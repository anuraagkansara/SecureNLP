Low
-
profile
information
-
stealing
Trojan
is
used
only
against
high-
value
targets
.

Symantec
has
uncovered
an
elusive
Trojan
used
by
the
cyberespionage
group
behind
the
€
œDuke
€
​
family
of
malware
.

Seaduke
(
detected
by
Symantec
as
Trojan
.
Seaduke
)
is
a
low
-
profile
information-
stealing
Trojan
which
appears
to
be
reserved
for
attacks
against
a
small
number
of
high
-
value
targets
.

Seaduke
has
been
used
in
attacks
against
a
number
of
major
,
government
-
level
targets
.

The
malware
hides
behind
numerous
layers
of
encryption
and
obfuscation
and
is
capable
of
quietly
stealing
and
exfiltrating
sensitive
information
such
as
email
from
the
victim
€
™s
computer
.

Seaduke
has
a
highly
configurable
framework
and
Symantec
has
already
found
hundreds
of
different
configurations
on
compromised
networks
.

Its
creators
are
likely
to
have
spent
a
considerable
amount
of
time
and
resources
in
preparing
these
attacks
and
the
malware
has
been
deployed
against
a
number
of
high
-
level
government
targets
.

While
the
Duke
group
began
to
distribute
Cozyduke
in
an
increasingly
aggressive
manner
,
Seaduke
installations
were
reserved
only
for
select
targets
.

Seaduke
victims
are
generally
first
infected
with
Cozyduke
and
,
if
the
computer
appears
to
be
a
target
of
interest
,
the
operators
will
install
Seaduke
.

The
group
behind
Seaduke
is
a
cyberespionage
operation
that
is
responsible
for
a
series
of
attacks
against
high
-
profile
individuals
and
organizations
in
government
,
international
policy
and
private
research
in
the
United
States
and
Europe
.

It
has
a
range
of
malware
tools
at
its
disposal
,
known
as
the
Dukes
,
including
Cozyduke
(
Trojan
.
Cozer
)
,
Miniduke
(
Backdoor
.
Miniduke
)
and
Cosmicduke
(
Backdoor
.
Tinybaron
)
.

News
of
the
Duke
group
first
emerged
in
March
and
April
of
2015
,
when
reports
detailing
attacks
involving
a
sophisticated
threat
actor
variously
called
Office
Monkeys
,
EuroAPT
,
Cozy
Bear
,
and
Cozyduke
were
published
.

Symantec
believes
that
this
group
has
a
history
of
compromising
governmental
and
diplomatic
organizations
since
at
least
2010
.

The
group
began
its
current
campaign
as
early
as
March
2014
,
when
Trojan
.
Cozer
(
aka
Cozyduke
)
was
identified
on
the
network
of
a
private
research
institute
in
Washington
,
D.C.

In
the
months
that
followed
,
the
Duke
group
began
to
target
victims
with
€
œOffice
Monkeys
€
​-
and
€
œeFax
€
​-themed
emails
,
booby
-
trapped
with
a
Cozyduke
payload
.

These
tactics
were
atypical
of
a
cyberespionage
group
.

It
€
™s
quite
likely
these
themes
were
deliberately
chosen
to
act
as
a
smokescreen
,
hiding
the
true
intent
of
the
adversary
.

The
Duke
group
has
mounted
an
extended
campaign
targeting
high
-
profile
networks
over
extended
periods
,
something
which
is
far
beyond
the
reach
of
the
majority
of
threat
actors
.

Its
capabilities
include
.

Attack
infrastructure
leveraging
hundreds
of
compromised
websites
Rapidly
developed
malware
frameworks
in
concurrent
use
Sophisticated
operators
with
fine
-
tuned
computer
network
exploitation
(
CNE
)
skills
Although
Cozyduke
activity
was
first
identified
in
March
2014
,
it
wasn
€
™t
until
July
that
the
group
managed
to
successfully
compromise
high
-
profile
government
networks
.

Cozyduke
was
used
throughout
these
attacks
to
harvest
and
exfiltrate
sensitive
information
to
the
attackers
.

In
parallel
,
the
Duke
group
was
also
installing
separate
malware
onto
these
networks
,
namely
Backdoor
.
Miniduke
and
the
more
elusive
Trojan
.
Seaduke
.

It
could
use
these
payloads
to
exploit
networks
on
multiple
fronts
and
providing
it
with
additional
persistence
mechanisms
.

In
July
of
2014
,
the
group
instructed
Cozyduke
-
infected
computers
to
install
Backdoor
.
Miniduke
onto
a
compromised
network
.

Miniduke
has
been
the
group
€
™s
tool
of
choice
for
a
number
of
years
in
espionage
operations
predominantly
targeting
government
and
diplomatic
entities
in
Eastern
Europe
and
ex
-
Soviet
states
.

€
œNemesis
Gemina
€
​
appears
to
be
the
internal
name
for
the
framework
used
by
the
group
to
identify
the
project
,
previously
reported
by
Kaspersky
.

The
following
debug
string
was
present
in
the
sample
used
in
these
attacks
.

C:\Projects\nemesis
-
gemina\nemesis\bin\carriers\ezlzma_x86_exe.pdb
This
project
name
has
been
seen
in
Backdoor
.
Tinybaron
(
aka
Cosmicduke
)
samples
,
which
Symantec
also
attributes
to
the
Duke
group
.

This
deployment
of
Miniduke
and
the
technical
similarities
with
Cozyduke
provided
strong
indicators
as
to
who
was
behind
the
attacks
.

The
Seaduke
payload
These
attacks
were
already
well
underway
when
another
group
began
to
deploy
a
previously
unknown
piece
of
malware
.

In
October
2014
,
the
Seaduke
payload
began
to
appear
within
target
networks
.

Although
Seaduke
was
developed
in
Python
,
the
overall
framework
bears
a
striking
resemblance
to
Cozyduke
in
terms
of
operation
.

It
€
™s
unclear
why
the
attackers
waited
until
October
to
deploy
Seaduke
.

Was
it
reserved
for
a
more
specific
attack
?
Was
part
of
their
cover
blown
,
necessitating
the
use
of
an
alternative
framework
?
The
Seaduke
framework
was
designed
to
be
highly
configurable
.

Hundreds
of
reconfigurations
were
identified
on
compromised
networks
.

The
communication
protocol
employed
had
many
layers
of
encryption
and
obfuscation
,
using
over
200
compromised
web
servers
for
command
and
control
.

Seaduke
required
a
significant
investment
of
time
and
resources
in
the
preparatory
and
operational
phases
of
the
attack
.

The
attackers
control
Cozyduke
via
compromised
websites
,
issuing
instructions
to
infected
machines
by
uploading
€
œtasks
€
​
to
a
database
file
.

Cozyduke
will
periodically
contact
these
websites
to
retrieve
task
information
to
be
executed
on
the
local
machine
.

One
such
task
(
an
encoded
PowerShell
script
)
instructed
Cozyduke
to
download
and
execute
Seaduke
from
a
compromised
website
.

Seaduke
operation
The
attackers
can
operate
Seaduke
in
a
broadly
similar
fashion
to
Cozyduke
.

The
Seaduke
control
infrastructure
is
essentially
distinct
,
opening
up
the
possibility
of
sub
-
teams
concurrently
exploiting
the
target
network
.

Unlike
Cozyduke
,
Seaduke
operators
upload
€
œtask
€
​
files
directly
to
the
command-
and
-
control
(
C&C
)
server
;
there
is
no
database
as
such
present
.

Seaduke
securely
communicates
with
the
C&C
server
over
HTTP
/
HTTPS
beneath
layers
of
encoding
(
Base64
)
and
encryption
(
RC4
,
AES
)
.

To
an
untrained
eye
,
the
communications
look
fairly
benign
,
no
doubt
an
effort
to
stay
under
the
radar
on
compromised
networks
.

Seaduke
has
many
inbuilt
commands
which
are
available
to
the
attackers
.

They
have
the
ability
to
retrieve
detailed
bot
/
system
information
,
update
bot
configuration
,
upload
files
,
download
files
,
and
self-
delete
the
malware
from
the
system
.

The
self
-
delete
function
is
interestingly
called
€
œseppuku
€
​.

This
is
a
form
of
Japanese
ritual
suicide
.

The
attackers
have
also
developed
a
number
of
additional
payloads
.

Operators
can
push
these
payloads
onto
infected
machines
for
very
specific
attacks
.

What
next
?
The
Duke
group
has
brought
its
operational
capability
to
the
next
level
.

Its
attacks
have
been
so
bold
and
aggressive
,
that
a
huge
amount
of
attention
has
been
drawn
to
it
,
yet
it
appears
to
be
unperturbed
.

Its
success
at
compromising
such
high
-
profile
targets
has
no
doubt
added
a
few
feathers
to
its
cap
.

Even
the
developers
reveled
in
this
fact
,
naming
one
of
Seaduke
€
™s
functions
€
œforkmeiamfamous
€
​.

While
the
group
is
currently
keeping
a
lower
profile
,
there
€
™s
no
doubt
it
will
reappear
.

Some
tools
may
have
to
be
abandoned
,
some
reworked
and
others
built
completely
from
scratch
.

This
attack
group
is
in
it
for
the
long
haul
.

Over
the
past
several
months
an
increasing
number
of
strategic
web
compromises
(
"
wateringholes
"
)
have
been
discovered
on
websites
in
Hong
Kong
.

This
rise
in
activity
coincides
with
the
Occupy
Central
protests
.

In
this
post
we
will
talk
about
a
single
attack
,
whilst
not
trying
to
distract
attention
from
the
vast
number
of
attacks
and
subsequent
compromises
that
remain
persistent
in
Hong
Kong
.

Whilst
going
about
our
daily
business
we
were
alerted
to
a
website
that
began
serving
a
malicious
payload
alongside
its
usual
web
page
.

The
initial
investigation
revealed
that
the
attack
and
associated
payloads
are
part
of
an
ongoing
attack
campaign
by
an
Advanced
Persistent
Threat
group
that
is
known
to
target
various
sectors
of
industry
and
Government
in
Hong
Kong
.

In
this
instance
we
have
chosen
to
obfuscate
details
of
the
compromised
website
to
protect
the
identity
of
the
victim
.

This
website
belongs
to
a
private
educational
institution
who
,
since
being
notified
about
the
compromise
,
has
removed
the
malicious
executable
and
remediated
the
compromised
of
their
server
,
thus
breaking
a
crucial
link
in
the
chain
of
this
attack
.

The
website
in
question
was
implanted
with
some
HTML
code
that
simply
reaches
out
to
a
secondary
website
and
downloads
malware
.

Whilst
this
in
itself
is
not
interesting
the
methodology
used
to
obfuscate
code
and
evade
detection
are
.

The
underlying
code
in
the
first
page
that
loads
exploits
a
vulnerability
in
Internet
Explorer
(
CVE-2014
-
6332
)
and
runs
several
scripts
,
each
with
support
for
different
operating
systems
and
methods
of
downloading
and
executing
a
file
from
a
website
.

The
first
script
is
obfuscated
Visual
Basic
Script
(
"
VBS
"
)
By
decoding
this
we
can
see
the
true
intentions
of
the
script
–
which
opens
a
whole
new
can
of
worms
.

This
code
is
extremely
interesting
because
not
only
does
it
contain
VBScript
but
also
contains
PowerShell
script
.

Once
running
it
uses
an
elaborate
way
to
detect
the
operating
system
version
and
then
selects
whether
to
use
VBScript
or
Powershell
based
on
the
result
;
VBScript
for
Windows
XP
and
Powershell
for
newer
versions
of
Windows
.

The
Powershell
script
is
compressed
and
Base64
encoded
.

By
decoding
this
script
we
can
determine
its
nature
As
you
can
see
this
powershell
script
simply
extracts
another
VBScript
and
executes
it
.

The
VBScript
then
downloads
the
first
binary
payload
into
the
user
's
temporary
directory
and
names
it
'
plug.exe
'
.

If
the
operating
system
version
is
too
old
to
support
Powershell
then
the
script
will
attempt
to
use
VBScript
.

This
VBScript
downloads
the
primary
payload
to
the
temporary
directory
and
names
it
"
z1.exe
"
.

The
first
binary
payload
that
lands
on
the
system
is
relatively
simple
and
serves
as
a
method
of
yet
again
detecting
the
operating
system
version
and
where
to
drop
a
secondary
payload
file
.

Whilst
this
binary
is
not
complicated
by
nature
it
has
been
designed
to
masquerade
as
a
legitimate
application
and
contains
functionality
to
evade
anti
-
virus
.

This
malware
implant
is
commonly
detected
by
anti-
virus
as
Swisyn
.

Upon
running
this
malware
determines
the
operating
system
version
,
but
only
delineating
between
Windows
XP
,
Visa
and
above
.

It
appears
that
this
functionality
is
included
because
the
secondary
payload
comes
in
both
32bit
and
64bit
versions
.

Both
of
these
second
stage
payloads
are
obfuscated
but
decoded
with
a
simple
bitwise
operation
as
per
below
In
this
scenario
,
the
secondary
payloads
can
be
decoded
using
a
simple
subtraction
of
3
followed
by
an
XOR
of
3
from
each
byte
.

This
file
is
then
written
to
%
User%\Application
Data\Microsoft
in
a
newly
created
folder
name
'
wuauclt
'
.

The
filename
depends
on
the
operating
system
version
,
for
Windows
XP
it
is
"
clbcatq.dll
"
,
for
Windows
Vista
and
above
it
is
"
profapi.dll
"
.

Once
this
file
has
been
written
to
disk
a
file
from
the
Windows
System32
folder
is
copied
into
the
directory
.

This
file
,
named
'
wuauclt.exe
'
,
is
the
Windows
update
client
interface
and
it
a
standard
windows
file
.

By
executing
this
file
in
a
specific
manner
it
will
load
the
freshly
dropped
DLL
file
–
affectively
this
is
known
as
DLL
hijacking
.

Following
this
action
another
file
,
named
'
wuauclt.dat
'
,
is
written
on
to
the
disk
under
the
same
directory
.

This
file
is
encoded
and
not
decoded
at
this
stage
of
the
attack
.

To
complete
the
file
drop
wuauclt.exe
is
executed
.

The
64bit
version
of
this
dropper
is
vastly
similar
in
functionality
although
it
offers
slightly
more
efficiency
in
the
code
.

The
decoding
routine
is
more
simplified
than
its
32bit
counterpart
and
the
decoding
key
is
hardcoded
The
following
pseudo
-
code
can
decode
both
32bit
and
64bit
versions
of
the
DLL
stored
in
'
wuauclt.dat
'
Not
to
dwell
on
a
dropper
,
let
's
move
on
to
the
second
stage
malware
.

The
malware
second
stage
is
now
loaded
and
running
.

Interestingly
,
this
payload
is
also
detected
by
anti
-
virus
as
Swisyn
.

This
DLL
is
again
fairly
simple
and
acts
as
a
secondary
dropper
.

It
primarily
serves
as
a
method
of
decoding
one
of
the
files
dropped
by
the
previous
malware
stage
and
creating
a
method
to
start
the
malware
on
system
boot
-
up
or
user
login
.

In
order
to
do
this
the
malware
firstly
decodes
a
file
that
was
dropped
by
the
previous
stage
–
in
this
case
it
is
"
wuauclt.dat
"
.

The
decoding
routine
is
again
overly
complex
but
ultimately
amounts
to
a
simple
subtraction
and
XOR
,
again
both
of
these
operations
are
performed
by
the
number
3
,
thus
each
byte
is
subtracted
by
3
and
then
XOR'd
with
3
Once
this
file
has
been
decoded
it
is
loaded
into
memory
and
executed
.

This
file
,
once
decoded
is
the
third
and
final
payload
.

The
method
of
leaving
the
encoded
file
on
disk
and
only
decoding
it
in
memory
is
to
thwart
poorly
configured
anti
-
virus
or
disk
surface
heuristic
scanners
.

Finally
to
wrap
up
,
an
entry
is
created
in
the
registry
named
'
wuauclt
'
is
created
under
'
HKCU\Software\Microsoft\Windows\Current
Version\Run
'
to
ensure
that
this
file
is
executed
upon
user
-
login
.

Finally
we
are
left
with
a
full
payload
.

Unsurprisingly
the
3rd
and
final
stage
of
this
part
of
the
attack
is
a
fully
fledged
RAT
(
Remote
Administration
Tool
)
,
which
is
detected
by
anti
-
virus
as
PCClient
.

This
RAT
allows
the
attacker
to
control
the
infected
workstation
and
perform
a
vast
array
of
administrative
functions
such
as
.

A
high
-
level
view
of
the
command
structure
gives
us
an
idea
as
to
how
simple
this
functionality
can
seem
,
but
does
not
turn
away
from
how
damaging
the
affects
can
be
.

Once
the
RAT
has
been
loaded
on
the
infected
machine
it
begins
calling
out
to
the
command
and
control
server
(
"
phoning
home
"
)
and
waits
for
the
attackers
to
issue
one
of
the
above
commands
to
the
victim
.

As
we
usually
see
with
APT
attacks
the
malware
controllers
use
a
specific
ID
to
code
their
attack
campaign
,
which
in
this
case
is
'
C00BBB
'
.

Information
about
the
victim
system
is
collected
and
posted
off
to
the
command
and
control
server
.

This
information
gives
the
attacker
a
brief
description
about
the
machine
.

The
information
consists
of
.

This
information
is
encoded
using
a
simple
bitwise
operation
and
then
sent
to
the
command
and
control
server
.

For
example
.

Unencoded
data
Encoded
data
44
45
4C
4C
2D
31
37
38
DELL-178
BA
B9
B2
B2
51
4D
47
46
QMGF
44
33
43
00
00
00
00
00
D3C
.....

BA
4B
BB
7E
7E
7E
7E
7E
K
~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
35
31
32
4D
42
00
00
00
512
MB
...

49
4D
4C
B1
BC
7E
7E
7E
IML
~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
57
69
6E
20
58
50
20
53
Win
XP
S
A7
95
90
5E
A6
AE
5E
AB
••^
^
50
33
20
28
42
75
69
6C
P3
(
Buil
AE
4B
5E
56
BC
89
95
92
K^V
‰•
'
64
20
32
36
30
30
29
00
d
2600
)
.

9A
5E
4C
48
4E
4E
55
7E
š^LHNNU~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
00
00
00
00
00
00
00
00
........

7E
7E
7E
7E
7E
7E
7E
7E
~~~~~~~~
43
30
30
42
42
42
00
00
C00BBB
..

BB
4E
4E
BC
BC
BC
7E
7E
NN
~~
Whilst
this
may
seem
to
make
the
data
harder
to
recover
it
actually
makes
detection
of
the
traffic
easier
.

To
decode
the
traffic
a
simple
calculation
can
be
performed
by
reversing
the
encoding
operations
.

In
this
case
the
malware
simply
increases
the
initial
encoding
key
by
1
,
then
adds
this
value
to
each
byte
in
the
buffer
and
finally
XOR
's
each
byte
.

Once
again
,
the
following
pseudo
-
code
can
decode
this
data
During
in
the
investigation
we
performed
analysis
of
the
infrastructure
that
this
malware
communicates
with
.

On
this
occasion
we
have
not
been
able
to
gain
physical
access
to
the
command
and
control
server
as
it
is
legitimate
,
but
compromised
production
infrastructure
.

The
graph
below
shows
the
flow
in
which
various
parts
of
the
attack
are
loaded
and
how
they
chain
together
.

This
attack
can
be
detected
and/or
mitigated
at
each
stage
.

In
order
to
help
organisations
protect
themselves
we
have
created
a
number
of
network
IDS
rules
and
disk
-
scan
rules
that
can
be
used
with
Snort
and
Yara
.

Rules
are
provided
in
a
best
-
effort
basis
and
we
can
not
vouch
for
their
efficiency
in
your
environment
.

Wateringhole
code
Encoded
version
of
PcClient
PcClient
malware
beaconing
alert
tcp
$
HOME_NET
any
-
>
$
EXTERNAL_NET
[
80,443
]
(
msg:"MALWARE
–
DTL
ID
12012015
-
PcClient
beacon
"
;
flow
:
established
,
to_server
;
content:"|BB
4E
4E
BC
BC
BC
7E
7E|
"
;
nocase
;
offset:160
;
depth:8
;
classtype
:
trojan
-
activty
;
sid
:
YOUR_SID
;
rev:20122014
;
)
Malware
domain
alert
udp
$
HOME_NET
any
-
>
$
EXTERNAL_NET
53
(
msg:"MALWARE
-
DTL
ID
12012015
-
C2
Domain
"
;
content:"|06|aoemvp|03|com
"
;
classtype
:
trojan
-
activity
;
sid
:
YOUR_SID
;
rev
:
20122014
;
)
C2
server
IP
#
1
alert
ip
$
HOME_NET
any
<
>
45.64.74.101
any
(
msg:"MALWARE
-
DTL
ID
12012015
–
C2
IP
Address
"
;
classtype
:
trojan
-
activity
;
sid
:
YOUR_SID
;
rev
:
20122014
;
)
C2
server
IP
#
2
alert
ip
$
HOME_NET
any
<
>
103.229.127.104
any
(
msg:"MALWARE
-
DTL
ID
12012015
-
C2
IP
Address
"
;
classtype
:
trojan
-
activity
;
sid
:
YOUR_SID
;
rev
:
20122014
;
)
The
following
artefacts
were
found
during
the
investigation
MD5s
Network
artefacts
a6a18c846e5179259eba9de238f67e41
c.aoemvp.com
55f84d88d84c221437cd23cdbc541d2e
aoemvp.com
a6a18c846e5179259eba9de238f67e41
lim.kiu@hotmail.com
279ef79f904476ba0f9f44c87358bb1f
45.64.74.101
42b76c0503a6bf21f1ea86e0b14d67ea
103.229.127.104
cff25fe24a90ef63eaa168c07008c2bb
ad17eff26994df824be36db246c8fb6a
f66b64ef984ac46ac7395358059979bc
efd9dc39682312d6576468f5c0eb6236
For
all
questions
relating
to
the
publication
or
specifics
in
this
document
please
contact
us
via
one
of
the
following
methods
.

Twitter
:
@dragonthreatlab
Website
:
http://dragonthreat.blogspot.hk
Email
:
dragonthreatlabs@gmail.com
Kind
regards
,
Dan
Dragon
Threat
Labs

Energetic
Bear
/
Crouching
Yeti
is
an
actor
involved
in
several
advanced
persistent
threat
(
APT
)
campaigns
that
have
been
active
going
back
to
at
least
the
end
of
2010
.

Targeted
sectors
include
.

Most
of
the
victims
we
identified
fall
into
the
industrial
/
machinery
building
sector
,
indicating
this
is
of
special
interest
.

To
infect
the
victims
,
the
attackers
rely
on
three
methods
.

During
the
attacks
,
the
Crouching
Yeti
uses
several
malware
/
Trojans
,
which
exclusively
infect
Windows
systems
.

For
command
and
control
,
these
connect
to
a
large
network
of
hacked
websites
.

These
sites
host
malware
modules
,
victim
information
and
issue
commands
to
infected
systems
.

The
dozens
of
known
Yeti
exploit
sites
and
their
referrer
sites
were
legitimate
,
compromised
sites
.

They
ran
vulnerable
content
management
systems
or
vulnerable
web
applications
.

None
of
the
exploits
used
to
compromise
the
servers
were
known
to
be
zero
-
day
.

None
of
the
client
side
exploits
re
-
used
from
the
open
source
metasploit
framework
were
zero
-
day
.

Overall
,
we
observed
about
2,800
victims
worldwide
,
the
most
prevalent
attack
tool
being
the
Havex
Trojan
.

We
believe
this
group
is
highly
determined
and
focused
on
a
very
specific
industrial
sector
of
vital
interest
.

It
uses
a
variety
of
ways
to
infect
its
victims
and
exfiltrate
strategic
information
.

The
analyzed
data
seems
to
suggest
the
following
points
.

This
report
provides
technical
details
on
how
they
perform
their
operations
.

This
section
analyzes
all
the
aspects
we
could
find
about
how
this
actor
performs
its
campaigns
.

The
Crouching
Yeti
actor
performed
a
massive
surveillance
operation
targeting
strategic
victims
,
many
of
them
in
the
industrial
/
manufacturing
sector
.

There
were
different
ways
of
delivering
of
its
malware
including
waterholing
,
spearphishing
and
adding
malware
to
legitimate
installers
.

Once
the
victims
were
infected
,
Crouching
Yeti
selected
different
RATs
for
its
operations
.

These
RATs
communicated
with
Command
and
Control
servers
on
compromised
servers
around
the
world
,
using
a
simple
PHP
backend
.

We
were
able
to
identify
several
victims
,
including
high
-
profile
ones
and
dozens
of
domains
used
in
the
campaign
.

As
far
as
we
know
the
group
behind
Crouching
Yeti
delivers
its
malware
using
at
least
three
different
methods
.

The
first
method
uses
a
legitimate
software
installer
repackaged
to
contain
the
malicious
DLL
.

Such
modified
self
-
extracting
archives
could
have
been
uploaded
directly
to
a
compromised
server
,
replacing
the
original
file
,
or
sent
to
the
victim
by
email
.

One
example
of
this
method
was
a
hijacked
SwissRanger
camera
driver
(
libMesaSR
version
1.0.14.706
)
that
was
used
to
drop
the
Sysmain
backdoor
to
.

%
APPDATA%\sydmain.dll
and
set
the
Run
registry
value
to
load
malicious
DLL
upon
next
system
startup
.

In
a
similar
manner
,
as
early
as
January
2014
,
Havex
version
038
appears
to
have
been
dropped
by
a
legitimate
~40
MB
software
installer
from
the
eWon
web
site
.

hxxp://www.ewon.biz
/
software
/
eCatcher
/
eCatcherSetup.exe
"
eWon
"
is
a
Belgian
producer
of
SCADA
and
industrial
network
equipment
,
which
helps
define
this
attack
method
as
a
watering
hole
attack
.

"
Breaking
the
barrier
between
industrial
applications
and
IT
standards
,
the
mission
of
eWON
is
to
connect
industrial
machines
securely
to
the
Internet
,
enabling
easy
remote
access
and
gathering
all
types
of
technical
data
originating
from
industrial
machines
...
Connecting
machines
across
the
Internet
is
our
mission
.
"
Sometimes
,
the
Havex
loader
was
dropped
from
"
eCatcherSetup_v4.exe
"
,
so
it
seems
that
the
site
operators
may
have
removed
a
previous
file
and
the
attackers
replaced
it
with
their
trojanized
installer
,
and
so
on
.

Likely
,
the
attackers
gained
access
to
eWon
's
ftp
site
and
replaced
the
legitimate
file
with
one
that
is
bound
with
the
Havex
dropper
several
times
.

Another
example
that
involves
a
hijacked
application
from
a
PLC
-
related
vendor
is
a
Trojanized
mbCHECK
installer
which
replaced
the
original
legitimate
version
freely
downloadable
from
the
vendor
's
website
.

The
legitimate
version
can
be
downloaded
for
free
from
the
vendor
's
website
.

The
vendor
-
MB
Connect
Line
-
is
a
company
which
specializes
in
software
for
remote
maintenance
of
PLC
systems
:
MB
Connect
Line
GmbH(hxxp://www.mbconnectline.com
/
index.php
/
en/
)
.

In
this
case
,
the
dropped
DLL
was
Havex
version
043
.

The
second
method
relies
on
a
malicious
XDP
file
containing
the
PDF
/
SWF
exploit
(
CVE-2011-
0611
)
and
was
most
probably
used
in
spear
-
phishing
attacks
.

This
exploit
drops
the
Havex
loader
DLL
,
which
is
stored
in
an
encrypted
form
in
the
XDP
file
.

The
exploit
is
delivered
as
an
XDP
file
(
XML
Data
Package
)
which
is
actually
a
PDF
file
packaged
within
an
XML
container
.

This
is
a
known
the
PDF
obfuscation
method
and
serves
as
an
additional
anti
-
detection
layer
.

The
XDP
file
contains
an
SWF
exploit
and
two
files
(
encrypted
with
XOR
)
stored
in
the
invalid
section
of
the
PDF
.

One
of
the
files
is
Havex
DLL
(
version
038
)
,
the
other
is
a
small
JAR
file
which
is
used
to
copy
and
run
the
DLL
by
executing
the
following
command
.

cmd
/c
copy
<
fname_passed_as_param
>
%
TEMP%\\explore.dll
/y
&
rundll32.exe
%
TEMP%\\explore.dll
,
RunDllEntry
SWF
executes
the
action
script
,
which
contains
another
SWF
file
which
in
turn
uses
the
CVE-
2011
-
0611
vulnerability
to
run
the
shellcode
.

The
shellcode
then
looks
for
a
specific
signature
in
the
memory
(
which
signs
the
start
of
encrypted
DLL
)
,
decrypts
and
loads
it
.

Finally
,
this
actor
actively
compromises
legitimate
websites
for
watering
hole
attacks
.

These
hacked
websites
in
turn
redirect
to
malicious
JAR
or
html
files
hosted
on
other
sites
maintained
by
the
group
(
exploiting
CVE-2013
-
2465
,
CVE-2013
-
1347
,
and
CVE-2012
-
1723
in
Java
6
,
Java
7
,
IE
7
and
IE
8)
,
which
then
drop
the
Havex
loader
,
the
Karagany
backdoor
and
helper
tools
.

These
sites
run
an
exploit
kit
known
as
"
LightsOut
"
.

It
appears
that
the
"
LightsOut
"
exploit
kit
is
exclusively
used
by
Energetic
Bear
/
Crouching
Yeti
.

From
the
dozens
of
Yeti
exploit
sites
we
reviewed
,
the
malicious
code
was
nothing
more
than
slightly
modified
metasploit
java
exploits
delivering
the
Havex
loader
.

Some
sort
of
internal
review
must
have
pushed
them
towards
the
LightsOut
EK
.

KSN
data
records
help
provide
a
list
of
Crouching
Yeti
related
exploit
delivery
from
dozens
of
these
sites
.

In
earlier
cases
(
July
2013
)
,
successful
Java
exploitation
served
from
nahoonservices.com
would
cascade
into
more
Yeti
components
planted
on
victim
systems
.

The
java
exploit
downloaded
Karagany
backdoors
,
which
in
turn
downloaded
stealers
from
91.203.6.71
.

Ksn
data
recorded
at
least
20
victim
sites
that
were
compromised
and
injected
with
Yeti
iframes
,
redirecting
hundreds
of
visitors
to
compromised
Yeti
exploit
sites
.

Most
of
these
redirector
sites
were
owned
by
western
and
Eastern
European
power
players
,
investors
,
legal
advisors
and
advocates
,
and
European
and
US
industrial
IT
equipment
makers
.

The
compromised
sites
hosting
the
LightsOut
Exploit
Kit
were
fairly
trafficked
,
legitimate
sites
.

Their
content
varies
widely
,
from
California
winemakers
to
Cuban
travel
agencies
and
Iranian
general
interest
/
religious
inspiration
sites
.

Finally
,
other
second
stage
tools
were
simply
retrieved
by
the
downloaders
over
http
from
various
servers
.

Some
of
these
Yeti
sites
,
like
kinoporno.org
,
served
both
Havex
and
these
tools
.

KSN
events
recorded
the
sites
serving
Windows
Credential
Editor
and
custom
credential
and
document
stealing
tools
.

The
Crouching
Yeti
group
has
different
tools
of
choice
for
their
operations
.

This
section
describes
them
from
a
technical
perspective
.

The
main
functionality
of
this
component
is
to
download
and
load
additional
DLL
modules
into
the
memory
.

These
are
stored
on
compromised
websites
that
act
as
C&C
servers
.

In
order
to
do
that
,
the
malware
injects
itself
into
the
EXPLORER.EXE
process
,
sends
a
GET
/
POST
request
to
the
PHP
script
on
the
compromised
website
,
then
reads
the
HTML
document
returned
by
the
script
,
looking
for
a
base64
encrypted
data
between
the
two
"
havex
"
strings
in
the
comment
tag
<
!
--havexhavex--
>
and
writes
this
data
it
to
a
%
TEMP%\<tmp>.xmd
file
(
filename
is
generated
by
GetTempFilename
function
)
.

In
the
meantime
,
another
routine
is
constantly
checking
the
%
TEMP%
folder
for
all
*
.xmd
files
.

For
each
file
it
finds
,
it
decompresses
the
content
,
decrypts
(
if
encrypted
)
and
loads
into
the
memory
as
the
DLL
.

In
order
to
run
on
each
system
boot
,
malware
copies
itself
to
:
<
path>\TMPprovider0XX.dll
and
creates
the
autorun
registry
key
.

All
samples
of
this
component
contain
a
statically
linked
bzip2
library
.

Versions
>
=
01B
also
contain
an
RSAeuro
library
,
used
to
encrypt
log
files
and
decrypt
downloadable
modules
.

Public
keys
for
encryption
are
hardcoded
in
the
binary
and/or
stored
in
the
configuration
section
.

In
some
cases
,
these
keys
are
written
to
the
registry
values
.

In
total
,
we
identified
124
different
samples
of
Havex
loaders
,
belonging
to
27
different
versions
.

As
of
June
2014
,
the
latest
version
number
we
have
is
044
.

The
URL
addresses
of
the
C&C
servers
(
which
are
indeed
compromised
websites
)
are
either
hardcoded
in
the
binary
,
or
-
in
versions
=
>
038
-
specified
in
the
configuration
section
inside
the
ICT
resource
.

This
resource
is
compressed
with
bzip2
and
encrypted
with
XOR
.

There
are
usually
2
-
4
URLs
per
binary
,
different
for
each
malware
version
and
sometimes
also
different
between
samples
of
the
same
version
.

Malware
sends
a
GET
request
(
versions
<
017
)
or
POST
request
to
the
first
available
URL
.

The
request
contents
depends
on
the
malware
version
and
it
may
include
such
information
as
unique
bot
i
d
,
malware
version
number
,
OS
version
number
,
and
some
other
data
from
configuration
,
as
well
as
the
harvested
information
logged
into
the
*
.yls
file
(
if
any
)
.

Then
the
malware
searches
the
HTML
code
of
each
returned
page
for
havex
markers
and
saves
the
data
between
the
markers
into
a
temporary
file
.

These
modules
are
hosted
between
the
havex
markers
in
the
HTML
code
of
compromised
websites
.

The
module
code
is
usually
XORed
with
"
1312312
"
then
compressed
with
BZIP2
and
finally
base64
encoded
.

Once
downloaded
into
the
%
TEMP%\*.xmd
file
by
the
main
Havex
DLL
,
the
code
is
decoded
,
decompressed
,
saved
into
the
temporary
DLL
file
and
loaded
into
the
memory
.

The
modules
perform
a
variety
of
different
actions
,
including
collecting
information
about
the
victim
's
system
and
other
machines
in
the
local
network
,
harvesting
passwords
,
listing
documents
,
etc
.

In
order
to
do
that
,
some
of
the
modules
make
use
of
additional
3rd
stage
3rd
party
executables
.

Each
module
contains
configuration
information
stored
in
an
encrypted
and
compressed
form
inside
a
resource
.

Configuration
data
includes
29-byte
UID
(
unique
ID
)
,
a
1024-bit
RSA
Public
key
(
base64
encoded
)
and
other
necessary
info
(
like
file
paths
,
etc
.
)
.

All
harvested
data
is
compressed
,
encrypted
and
written
into
the
%
TEMP%\*.yls
files
,
which
are
then
sent
to
the
C&C
by
the
main
Havex
/
Sysmain
module
.

The
"
yls
"
files
are
encrypted
with
the
3DES
crypto
algorithm
using
a
random
192-bit
key
(
168
bit
effective
)
.

The
3DES
key
is
encrypted
using
the
public
RSA
1024
key
and
therefore
never
transferred
in
plain
text
to
attackers
.

In
-
depth
analysis
of
the
cryptography
used
by
log
files
is
presented
in
Appendix
2
This
module
is
designed
to
collect
detailed
data
about
the
OPC
servers
running
in
the
local
network
and
save
them
to
a
%
TEMP%\{rand}.yls
file
.

To
query
the
OPC
servers
,
it
uses
the
following
interfaces
.

This
module
collects
basic
information
about
the
system
it
's
running
on
,
and
saves
it
to
the
%
TEMP%\{rand}.yls
file
.

Harvested
data
includes
.

This
module
collects
contact
details
stored
in
all
outlook.nk2
files
and
writes
them
to
the
%
TEMP%\{rand}.yls
file
.

Outlook.nk2
is
the
file
where
Outlook
(
version
since
2007
)
keeps
contact
details
in
order
to
use
them
with
the
AutoComplete
feature
.

This
module
uses
the
embedded
BrowserPasswordDecryptor
2.0
tool
(
hxxp://securityxploded.com
/
browser
-
password
-
decryptor.php
)
to
dump
login
credentials
stored
by
the
password
managers
of
various
browsers
.

Decrypted
passwords
are
saved
into
the
%
TEMP%\~tmp1237.txt
file
,
which
is
then
copied
by
the
parent
module
into
an
encrypted
*
.tmp.yls
file
.

List
of
browsers
supported
by
the
tool
(
from
the
product
's
website
)
.

This
module
is
designed
to
scan
the
local
network
and
look
for
all
hosts
listening
on
ports
related
to
OPC
/
SCADA
software
.

Information
about
these
hosts
is
then
saved
to
the
%
TEMP%\~tracedscn.yls
file
.

In
-
depth
analysis
of
the
Havex
loader
and
its
related
modules
is
presented
in
Appendix
2
.

This
component
is
a
simple
downloader
with
a
functionality
similar
to
the
Havex
component
.

It
sends
requests
to
the
PHP
script
at
the
C&C
(
compromised
website
)
and
looks
for
specific
data
in
the
returned
HTML
code
.

It
writes
the
data
(
some
ASCII
strings
)
from
between
<
I6></I6
>
tags
to
the
file
in
%
TEMP%\Low\~task.tmp
and
the
data
(
binary
data
XORed
with
0x0A
)
from
between
<
B6></B6
>
tags
into
the
%
TEMP%\Low\~ldXXXX.TMP
file
.

Then
it
decrypts
the
ldXXXX.TMP
file
and
loads
it
into
memory
.

Based
on
the
compilation
times
,
we
may
assume
that
this
loader
was
used
to
download
and
run
modules
before
it
was
replaced
by
Havex
.

The
Ddex
loader
is
analyzed
in
more
detail
in
Appendix
4
.

This
malware
can
be
described
as
a
classical
RAT
(
Remote
Access
Trojan
)
,
since
it
gives
the
attacker
a
wide
range
of
opportunities
to
control
and
interact
with
the
victim
machine
.

The
autonomous
part
of
Sysmain
installs
and
registers
itself
to
be
persistent
in
the
system
.

Then
it
gathers
general
information
about
the
victim
system
,
like
When
ready
,
this
data
is
submitted
to
one
of
the
C&C
-
servers
.

After
that
,
it
checks
periodically
for
new
commands
from
C&C
(
pulling
via
HTTP
)
.

With
a
set
of
11
commands
,
the
malware
is
able
to
.

There
are
also
commands
used
for
maintenance
purposes
.

Among
others
,
there
are
commands
to
change
the
pubkey
for
C&C
-
communication
or
delete
its
traces
in
the
registry
.

It
receives
its
commands
from
one
of
four
static
command
-
and
-
control
servers
.

Every
variant
of
this
malware
has
its
own
set
of
servers
.

As
usual
,
the
attackers
are
using
webservers
-
most
likely
compromised
ones
-
as
part
of
their
C&C
-
infrastructure
.

To
communicate
with
the
C&C
-
server
,
the
Trojan
makes
use
of
asymmetric
encryption
with
a
hardcoded
pair
of
private
and
public
keys
.

Another
public
key
is
used
to
encrypt
files
,
which
are
collected
in
a
local
dropzone
on
the
victim
's
file
system
.

The
files
in
that
dropzone
will
be
submitted
to
the
attacker
later
,
all
in
one
go
.

Appendix
3
provides
in
-
depth
analysis
of
the
Sysmain
backdoor
.

This
component
is
written
in
.NET
and
is
very
similar
to
The
Sysmain
backdoor
.

The
settings
of
the
RAT
are
stored
in
the
registry
as
BASE64
encoded
values
.

The
RAT
gets
its
commands
by
sending
a
request
to
a
PHP
script
on
the
C&C
(
compromised
server
)
as
usual
,
and
looks
for
specific
data
in
the
returned
HTML
code
.

The
data
in
this
case
is
stored
between
the
havexhavex
tags
,
it
is
then
decrypted
and
decoded
(
base64
)
.

The
RAT
supports
13
commands
including
.

Each
time
a
command
(
task
)
is
executed
,
the
result
of
that
command
is
stored
in
the
registry
under
a
subkey
named
"
done
"
or
"
doneEXT
"
.

The
results
(
which
are
called
"
answers
"
by
the
authors
)
are
then
POSTED
to
the
C&C
server
.

The
ClientX
backdoor
is
analyzed
in
depth
in
Appendix
5
.

Karagany
is
a
simple
backdoor
that
connects
to
the
C&C
and
keeps
waiting
for
commands
.

It
can
download
and
run
additional
executables
,
load
/
delete
modules
,
read
file
content
,
reboot
the
computer
,
update
itself
and
remove
all
components
.

Besides
backdoor
functionality
,
it
also
extracts
credentials
from
Internet
Explorer
's
password
manager
to
the
prx.jpg
file
and
injects
a
small
DLL
into
the
processes
of
web
browsers
.

This
DLL
keeps
listening
to
outgoing
network
traffic
and
looking
for
basic
access
authentication
details
sent
over
unencrypted
HTTP
.

Affected
browsers
include
Internet
Explorer
,
Firefox
,
Mozilla
and
Opera
.

When
executed
,
it
copies
itself
to
the
folder
under
%
APPDATA%
and
creates
a
.lnk
file
in
the
%
STARTUP%
directory
.

The
folder
name
and
filename
are
chosen
from
a
list
of
strings
hardcoded
in
the
binary
.

It
also
creates
the
C:\ProgramData\Mail\MailAg\
folder
,
where
the
information
harvested
by
downloaded
modules
will
be
stored
.

After
checking
if
a
connection
to
the
Internet
is
up
,
it
sends
an
initial
POST
request
to
the
C&C
server
.

Known
parameters
used
in
C&C
communication
are
.

This
module
is
used
to
drop
and
run
the
DuckLink
CmdCapture
tool
-
a
3rd
party
freeware
AutoIt
application
for
capturing
screenshots
(
hxxp://www.ducklink.com/
)
.

A
screenshot
of
the
desktop
is
saved
into
the
C:\ProgramData\Mail\MailAg\scs.jpg
file
.

Additionally
,
other
system
information
-
such
as
the
date
and
time
of
capture
,
computer
name
,
username
,
cpu
architecture
,
os
version
,
IP
address
,
logon
domain
and
logon
server
,
desktop
details
(
height
,
width
,
depth
,
refresh
rate
)
and
environmental
variables
-
are
logged
in
C:\ProgramData\Mail\MailAg\scs.txt
file
.

This
module
is
used
to
list
all
files
and
documents
with
specified
extensions
,
or
which
have
names
containing
specified
strings
in
the
C:\ProgramData\Mail\MailAg\fls.txt
file
.

Saved
information
includes
path
,
size
and
modification
time
.

File
matching
patterns
.

The
Command
and
Control
Servers
are
compromised
legitimate
websites
,
like
Blogs
,
from
different
countries
.

In
total
we
have
identified
219
unique
domain
names
for
these
C&C
servers
hosted
in
21
different
countries
.

We
found
most
hosted
C&Cs
in
the
United
States
(
81
servers
)
,
Germany
(
33
servers
)
,
the
Russian
Federation
(
19
servers
)
and
the
United
Kingdom
(
7
servers
)
.

The
table
below
shows
the
distribution
of
victims
affected
by
the
samples
identified
according
to
our
KSN
data
.

Victims
infected
with
samples
from
any
of
the
Crouching
Yeti
group
's
malware
were
found
in
.

65
of
these
C&C
servers
,
in
the
following
countries
,
were
monitored
during
our
investigation
.

This
monitoring
enabled
us
to
get
a
list
of
the
victims
connected
to
them
.

The
C&C
Backend
is
written
in
PHP
,
consisting
of
3
files
.

The
Backdoors
interact
with
"
source.php
"
,
which
is
the
control
script
.

These
are
its
functions
on
execution
.

1
.

Collect
the
following
information
.

2
.

Write
the
above
information
to
"
testlog.php
"
,
separated
by
"
Tabulator
"
and
base64-
encoded
,
with
the
following
syntax
.

<
timestamp>\t
<
victim
ip
-
address>\t
<
proxy>\t
<
botID>\t
<
request
-
uri>\t
<
useragent
>
3
.

Write
all
transferred
HTTP
-
GET
Variables
to
"
<
botID>.log
"
,
separated
by
"
Tabulator
"
and
base64-encoded
.

4
.

If
the
bot
executes
an
HTTP
-
POST
-
request
,
the
transferred
data
is
written
to
the
file
"
<
botID>.ans
"
,
enclosed
in
"
xdata
"-
Tag
with
timestamp
.

(
"
ans
"
is
the
acronym
for
"
Answer
"
)
.

5
.

Check
for
any
"
<
botID>_*.txt
"
files
a.

If
found
the
first
step
is
to
append
the
timestamp
,
filename
and
a
"
sent
"
Status
indicated
to
"
<
botID>.log
"
.

Then
the
file
content
is
transferred
to
the
bot
,
embedded
into
HTML
with
the
HTML
-
Body
"
No
data
!
"
and
the
HTML
-
Comment
"
havex
"
,
which
contains
the
data
to
be
transferred
.

Finally
the
file
on
the
server
is
removed
.

If
this
removal
fails
it
is
logged
to
"
<
botID>.log
"
.

b.

If
no
matching
file
is
found
,
an
HTML
-
Response
is
sent
with
an
empty
"
havex
"
HTML
-
Comment
and
HTML
-
Body
text
"
Sorry
,
no
data
corresponding
to
your
request
.
"
The
term
"
victim
"
in
this
section
refers
to
a
botID
(
unique
String
of
the
Backdoor
)
,
connecting
to
one
or
more
C&C
Servers
.

Based
on
the
45
C&C
Servers
wemonitored
,
a
total
of
2,811
unique
Victims
were
discovered
.

The
average
number
of
victims
per
C&C
is
70
.

The
following
chart
depicts
the
first
(
red
line
)
and
last
(
blue
line
)
appearance
of
each
victim
on
the
C&C.

The
"
FirstHit
"
shows
how
the
rate
of
accumulating
new
victims
has
accelerated
over
the
course
of
2014
.

"
LastHit
"
shows
how
the
last
connection
of
victims
to
C&C
servers
also
increases
over
time
.

This
could
mean
victims
are
disinfecting
their
computers
,
or
it
may
be
that
they
simply
report
to
a
different
C&C
server
that
we
do
not
monitor
.

Mapping
the
unique
hits
of
victims
per
day
also
indicates
a
decrease
of
"
active
"
infections
.

The
following
chart
clearly
shows
a
difference
between
weekdays
(
groups
of
five
higher
bars
)
and
weekends
(
two
lower
bars
)
.

The
daily
unique
hit
-
rate
fell
by
about
half
from
around
800
connections
at
the
beginning
of
2014
to
around
400
connections
per
week
-
day
by
the
middle
of
the
year
.

More
than
half
of
the
victims
always
connect
from
the
same
IP
address
.

Fewer
than
half
of
the
victims
connect
from
two
or
more
different
IP
addresses
as
the
following
graph
shows
.

This
might
indicate
that
some
of
the
victims
are
behind
proxies
,
which
makes
sense
for
corporate
environments
.

Victims
using
many
different
IP
addresses
may
indicate
laptops
.

The
following
chart
visualizes
all
the
unique
victims
connecting
to
C&C
servers
.

The
main
C&C
Servers
can
be
clearly
seen
in
Russia
and
the
USA
.

The
victims
are
distributed
across
99
different
countries
.

From
the
total
of
2,811
victims
,
it
was
possible
to
accurately
identify
106
of
them
.

Appendix
8
contains
a
brief
description
about
the
sector
/
company
in
which
these
victims
operate
.

The
table
below
summarizes
the
distribution
of
the
identified
victims
by
sector
.

Based
on
our
monitoring
,
the
most
widespread
Backdoor
is
Havex
with
a
total
of
2,470
infected
systems
,
mostly
based
in
USA
and
Spain
.

32
different
versions
of
Havex
are
used
among
all
victims
,
with
51
victims
left
without
any
identifiable
Havex
version
.

Havex
Version
024
,
compiled
at
the
end
of
2012
,
is
the
most
widespread
.

Besides
the
Havex
version
,
the
OS
Version
of
the
victim
computer
is
also
communicated
to
the
C&C
server
.

The
most
common
Operating
System
among
victims
is
Windows
XP
,
but
Windows
8.1
is
also
on
the
list
.

The
Sysmain
victims
connect
to
six
of
the
monitored
C&C
servers
,
where
261
unique
victims
were
counted
,
located
in
38
different
countries
.

Victims
of
the
Clientx
backdoor
connect
to
2
of
the
monitored
C&C
Servers
,
where
10
unique
Victims
were
counted
in
5
different
countries
.

Based
on
the
analysis
of
the
monitored
C&C
Servers
we
can
identify
some
clusters
based
on
malware
versions
and
the
victims
.

This
graph
visualizes
these
relations
.

Every
dot
represents
a
victim
,
different
Backdoors
and
versions
are
colored
differently
.

The
C&C
Servers
are
also
represented
as
dots
where
several
clients
connect
.

Grey
lines
are
connections
from
a
victim
to
its
C&C
Server
.

Some
C&C
Servers
are
dedicated
to
a
given
version
of
a
backdoor
(
big
Cluster
)
.

Others
share
connections
with
different
backdoor
versions
and
different
backdoors
.

Breaking
this
down
to
the
sectors
of
the
identified
victims
,
we
can
not
see
any
correlation
between
C&Cs
and
victims
.

The
same
sectors
are
targeted
with
different
backdoor
versions
.

Compared
to
our
other
APT
research
the
available
data
is
more
non
-
specific
than
usual
.

There
simply
is
no
one
piece
or
set
of
data
that
would
lead
to
the
conclusion
that
the
threat
actor
is
Bear
,
Kitten
,
Panda
,
Salmon
,
or
otherwise
.

Significant
data
points
below
.

It
is
rare
to
see
file
timestamps
used
as
a
precise
,
primary
source
of
information
when
it
comes
to
threat
actor
attribution
.

In
previous
reports
,
these
timestamps
have
been
used
as
supporting
,
or
secondary
pieces
of
data
.

They
may
help
to
suggest
or
support
a
time
range
for
attacker
activity
,
but
they
are
very
easily
modified
.

So
it
is
not
very
helpful
to
focus
on
this
data
set
.

The
strings
present
in
the
backdoors
,
web
components
,
and
exploits
are
in
English
.

Almost
200
malicious
binaries
and
the
related
operational
content
all
present
a
complete
lack
of
Cyrillic
content
,
the
opposite
of
our
documented
findings
from
researching
Red
October
,
Miniduke
,
Cosmicduke
,
Snake
,
and
TeamSpy
.

The
OPC
module
strings
include
typos
and
bad
grammar
.

Some
are
so
bad
they
are
almost
silly
and
there
does
n't
seem
to
be
a
consistent
pattern
here
.

Programm
was
started
at
%
02i:%02i:%02i
Start
finging
of
LAN
hosts
...

Finding
was
fault
.

Unexpective
error
Was
found
%
i
hosts
in
LAN
:
Hosts
was't
found
.

There
are
also
three
interesting
strings
inside
the
Karagany
backdoor
.

identifiant
(
which
is
French
for
identifier
)
,
fichier
(
French
for
file
)
and
liteliteliteskot
(
lite
scot
is
Swedish
for
little
sheet
)
Timestamp
analysis
is
based
on
a
total
of
154
collected
binaries
.

Highlights
.

Activity
/
Year
(
all
samples
)
.

Activity
/
Weekdays
based
on
compilation
time
.

Activity
/
Hours
(
UTC
)
based
on
compilation
time
.

All
the
exploit
servers
delivered
slightly
modified
ripped
content
from
open
source
repositories
.

All
the
servers
appear
to
be
hacked
servers
.

According
to
the
available
data
,
no
zero
-
day
exploits
were
used
in
any
of
these
attacks
,
either
to
compromise
the
servers
in
the
first
place
,
or
delivered
as
client
side
attack
exploits
by
the
Lights
Out
Exploit
Kit
.

While
this
purely
malicious
re
-
use
of
metasploit
PoC
highlights
the
danger
that
these
attack
tools
pose
,
it
is
also
unusual
to
see
an
exclusively
metasploit
attack
toolset
effectively
used
in
this
way
,
delivered
from
what
appear
to
be
a
chain
of
higher
value
compromised
sites
.

All
of
these
compromised
web
applications
were
vulnerable
to
freely
available
offensive
security
tools
.

We
acknowledge
that
many
of
the
compromised
referrer
servers
were
related
to
power
producers
in
some
way
.

However
,
these
targets
almost
seem
an
afterthought
,
as
the
exploit
servers
themselves
were
compromised
web
servers
from
Cuban
travel
agency
sites
,
a
Californian
winery
site
,
a
US
based
women
's
fashion
site
,
an
Iranian
general
interest
/
religious
inspiration
site
,
a
number
of
dating
and
adult
content
websites
,
and
a
variety
of
others
.

Although
,
we
note
that
the
known
Trojanized
software
packages
were
ICS
/
SCADA
related
as
well
,
possibly
because
those
victim
sets
or
environments
required
special
attention
.

So
,
while
there
was
a
strong
set
of
offensive
activities
on
power
producers
during
the
campaigns
,
it
was
by
no
means
the
full
focus
of
them
.

While
it
may
be
"
shocking
"
to
observe
power
producers
around
the
world
targeted
by
any
one
threat
actor
,
this
actor
's
attack
activity
does
not
appear
to
be
constrained
to
power
producers
.

The
related
industries
of
interest
show
a
much
broader
global
scope
than
previously
discussed
,
and
the
geographic
regions
of
interest
have
gone
completely
undiscussed
.

For
example
,
Spain
had
the
highest
number
of
victims
.

However
,
it
appears
that
there
was
no
significant
correlation
between
the
victim
location
and
the
C&C
geolocation
.

And
,
according
to
our
data
,
the
list
also
includes
victim
organizations
fitting
the
following
additional
categories
.

The
Crouching
Yeti
actor
has
been
performing
massive
surveillance
campaigns
in
recent
years
,
since
at
least
2010
.

Their
targets
included
thousands
of
victims
of
which
we
were
able
to
identify
a
few
,
confirming
Crouching
Yeti
's
interest
in
several
strategic
sectors
.

The
distribution
strategy
of
the
group
focuses
on
methods
following
this
targeted
philosophy
,
including
spear
phishing
and
waterholing
.

Noticeably
,
they
also
compromised
legitimate
software
packages
from
strategic
actors
in
the
SCADA
sector
in
order
to
infect
their
final
victims
.

The
victim
list
confirms
that
the
tactic
proved
successful
.

There
is
nothing
especially
sophisticated
in
their
exploits
,
or
in
the
malware
they
used
to
infect
victims
.

Their
RATs
are
flexible
enough
to
perform
surveillance
and
data
exfiltration
efficiently
.

They
used
dozens
of
compromised
servers
as
Command
and
Control
domains
with
a
simple
,
but
effective
,
PHP
backend
.

However
there
is
an
interesting
connection
with
this
group
and
the
LightsOut
Exploit
Kit
for
the
distribution
of
its
malware
in
some
waterholing
attacks
.

We
believe
they
are
likely
its
only
operators
as
of
June
2014
.

Thanks
to
the
monitoring
of
several
of
the
Command
and
Control
domains
used
by
the
group
,
we
were
able
to
identify
several
victims
.

This
victims
'
list
reinforces
the
interests
shown
by
the
Crouching
Yeti
actor
in
strategic
targets
,
but
also
shows
the
interest
of
the
group
in
many
other
not
-
so
-
obvious
institutions
.

We
believe
they
might
be
collateral
victims
,
but
it
might
also
be
fair
to
redefine
the
Crouching
Yeti
actor
not
only
as
a
highly
targeted
one
in
a
very
specific
area
of
interest
,
but
a
broad
surveillance
campaign
with
interests
in
different
sectors
.

We
will
continue
monitoring
this
actor
.

The
experts
of
G
DATA
's
SecurityLabs
discovered
a
cyber
-
espionage
campaign
that
perfectly
exemplifies
the
way
how
targeted
attacks
work
.

The
purpose
of
this
campaign
was
to
steal
valuable
documents
from
the
targeted
entity
.

We
entitle
this
operation
"
TooHash
"
.

The
attackers
'
modus
operandi
is
to
carry
out
spear
phishing
using
a
malicious
Microsoft
Office
document
as
an
attachment
.

The
attackers
do
not
choose
their
targets
indiscriminately
,
which
we
derive
from
the
fact
that
they
sent
specially
crafted
CV
documents
,
probably
to
human
resources
management
employees
.

Naturally
,
the
recipients
are
inclined
to
open
such
documents
on
a
daily
base
.

The
majority
of
discovered
samples
were
submitted
from
Taiwan
.

As
part
of
the
documents
are
in
Simplified
Chinese
which
is
used
in
the
Chinese
mainland
and
others
in
Traditional
Chinese
which
is
used
in
Hong
Kong
,
Macao
and
Taiwan
,
these
malicious
documents
might
have
been
used
against
targets
in
the
whole
Greater
China
area
.

The
attached
documents
exploit
a
well
-
known
and
rather
aged
vulnerability
(
CVE-2012
-
0158
)
to
drop
a
remote
administration
tool
,
or
RAT
for
short
,
onto
the
targeted
user
's
computer
.

During
the
campaign
,
we
identified
two
different
pieces
of
malware
.

Both
include
common
cyber
-
espionage
components
such
as
code
execution
,
file
listing
,
document
exfiltration
and
more
.

We
discovered
more
than
75
command
and
control
servers
,
all
used
to
administrate
infected
machines
.

The
servers
were
mainly
located
in
Hong
Kong
and
the
USA
.

Furthermore
,
the
administration
panel
's
language
,
used
by
the
attackers
to
manage
infected
systems
,
was
partly
written
in
Chinese
and
partly
in
English
.

The
exploit
used
by
the
attackers
is
identified
and
blocked
by
G
DATA
's
Exploit
Protection
technology
and
G
DATA
's
security
solutions
detect
the
dropped
binaries
as
Win32.Trojan
.
Cohhoc
.
A
and
Win32.Trojan
.
DirectsX.A
respectively
.

Nowadays
,
trade
secrets
describe
one
of
the
major
values
of
almost
every
company
.

Therefore
,
begrudged
competitors
may
be
tempted
to
steal
valuable
sensitive
information
for
their
purposes
.

The
leak
of
sensitive
documents
can
be
a
disaster
for
a
company
and
lead
to
large
financial
losses
.

Furthermore
,
governmental
entities
use
sensitive
,
private
or
classified
documents
.

Intelligence
agencies
may
be
interested
to
obtain
such
documents
.

The
analyzed
samples
used
in
the
"
TooHash
"
campaign
were
Microsoft
Office
documents
,
and
were
submitted
to
us
from
a
Taiwanese
customer
.

An
indication
leading
to
the
target
area
is
one
of
the
documents
used
by
the
attackers
,
which
contained
the
string
"
102年尾牙、
"
which
means
"
end
of
the
year
102
"
.

The
official
calendar
used
in
Taiwan
starts
in
1912
(
year
1
)
,
so
the
year
102
is
the
year
2013
according
to
the
Gregorian
calendar
(
1911
+
102=2013
)
.

We
conclude
that
the
targets
are
entities
located
in
the
Greater
China
area
and
on
the
name
of
another
document
used
by
the
attacker
called
李辉简历.doc
which
translates
to
"
resume
of
Li
Hui
"
.

Another
lead
,
suggesting
that
the
attacks
occurred
in
the
Greater
China
area
,
is
the
fact
that
the
majority
of
samples
available
on
VirusTotal
were
originally
submitted
from
Taiwan
.

The
DNS
-
name
of
the
C&C
server
contained
information
about
affected
companies
.

Here
is
a
list
of
some
targeted
entities
.

To
drop
the
malware
onto
the
targeted
computer
and
to
control
the
system
,
the
attackers
chose
to
carry
out
a
spear
phishing
campaign
.

This
campaign
comprised
a
Microsoft
Office
document
being
sent
to
the
victim
.

A
probable
entry
point
for
a
manipulated
CV
would
be
an
HR
department
.

If
the
document
is
opened
with
an
outdated
Microsoft
Office
version
,
malware
is
installed
by
exploiting
vulnerability
CVE-2012
-
0158
.

To
appear
credible
,
the
attackers
selected
the
targeted
users
and
the
type
of
the
attached
documents
cleverly
.

For
example
,
a
Microsoft
Office
Word
document
called
resume
of
Li
Hui.doc
.

The
document
title
as
well
as
the
content
was
written
in
Simplified
Chinese
.

The
titles
of
the
attacking
documents
involved
are
as
follows
.

To
explain
the
exploit
used
,
we
have
a
look
at
the
Word
document
,
the
ostensible
CV
.

The
mentioned
exploit
causes
Microsoft
Word
to
crash
,
which
might
alert
attacked
users
just
right
away
.

In
our
case
,
the
attackers
crafted
their
malicious
document
in
a
special
way
to
conceal
the
software
crash
:
The
malicious
.doc
causes
a
crash
,
but
moments
after
the
crash
a
legitimate
Word
session
opens
up
and
,
to
the
user
,
everything
appears
to
be
normal
.

Nevertheless
,
cautious
users
might
suspect
malicious
actions
behind
such
activities
and
notify
security
staff
.

The
CV
that
comes
with
the
legitimate
Word
document
(
Wo.doc
)
is
written
in
Chinese
characters
and
style
used
in
the
Chinese
mainland
.

Nevertheless
,
this
sample
has
also
been
submitted
to
us
from
Taiwan
.

The
resume
visible
to
the
user
(
Wo.doc
)
holds
a
tracking
mechanism
:
Li
Hui
's
picture
,
visible
in
the
document
as
the
blank
square
on
the
right
hand
side
,
is
not
stored
locally
but
stored
on
the
Internet
.

The
following
tag
,
inside
the
document
,
reveals
this
function
.

As
soon
as
the
document
is
loaded
,
a
network
query
is
performed
and
notifies
the
attacker
about
the
successful
exploit
and
the
availability
of
a
newly
infected
machine
.

We
identified
two
types
of
malware
used
to
administrate
the
infected
machines
:
Cohhoc
and
DirectsX.

The
first
one
is
a
"
classic
"
Remote
Administration
Tool
.

The
second
one
is
more
advanced
and
of
a
different
kind
,
the
malware
is
a
rootkit
.

It
is
executed
in
kernel
mode
.

The
RAT
and
the
rootkit
both
share
the
same
command
and
control
infrastructure
.

The
malware
is
divided
into
three
parts
.

The
second
component
is
installed
into
a
subfolder
of
the
directory
%
APPDATA%
(
for
example
in
%
APPDATA%\Microsoft\
)
.

Known
file
names
for
the
files
used
during
the
campaign
discussed
:
svchost.exe
and
conime.exe
.

The
second
component
works
similarly
.

In
case
you
are
interested
in
information
regarding
the
unpacking
of
this
malware
,
please
feel
free
to
contact
us
using
toohash.securityblog@gdata.de
During
the
TooHash
campaign
,
we
were
able
to
identify
two
variants
of
"
Cohhoc
"
.

Those
two
versions
can
be
distinguished
by
looking
at
the
creation
of
the
respective
mutex
after
the
malware
is
started
.

The
main
difference
between
the
two
malware
variants
is
the
handling
of
the
payload
(
component
three
)
.

In
the
earlier
version
,
the
payload
is
located
within
a
resource
inside
component
two
.

In
the
later
version
,
the
payload
is
an
additional
file
.

This
additional
file
is
stored
in
the
same
directory
as
the
second
component
and
its
name
is
brndlog
.

As
small
as
this
difference
seems
to
be
for
a
normal
computer
user
,
from
a
malware
analyst
's
point
of
view
,
it
is
a
huge
difference
.

If
,
in
the
first
case
,
the
sample
was
found
within
a
sample
database
,
the
analyst
would
be
able
to
extract
the
payload
and
to
analyze
it
right
away
.

However
,
in
the
second
case
,
the
analyst
can
not
extract
and
analyze
the
payload
at
all
.

In
this
context
,
the
second
component
alone
is
rather
useless
;
one
needs
to
find
the
binary
which
installs
the
payload
.

Furthermore
,
it
is
rather
complex
to
create
signature
detection
for
an
encrypted
file
,
such
as
the
payload
discussed
.

Persistence
is
ensured
by
the
creation
of
a
shortcut
file
(
.lnk
)
in
the
Start
Menu
folder
.

This
shortcut
is
labeled
as
Internet
Explorer
.lnk
.

The
blank
space
just
before
the
file
name
extension
was
inserted
to
trick
the
user
.

The
text
looks
exactly
like
the
original
without
the
additional
space
.

Furthermore
,
it
is
not
only
the
file
's
name
which
sidetracks
,
but
also
the
icon
used
for
this
link
comes
in
the
disguise
of
Microsoft
's
Internet
Explorer
.

The
screenshot
below
reveals
that
the
actual
file
behind
this
shortcut
points
to
a
different
program
:
conime.exe
:
The
"
Cohhoc
"
malware
is
a
Remote
Administration
Tool
and
is
able
to
.

Within
the
samples
,
we
found
two
different
hardcoded
command
and
control
servers
and
a
feature
to
easily
choose
an
alternative
server
.

If
the
file
%
APPDATA%\Adobe\ActiveX.dat
exists
on
the
system
,
the
malware
uses
the
server
listed
in
this
file
instead
of
the
hardcoded
servers
.

The
content
in
the
file
must
use
the
obfuscation
system
described
in
the
next
chapter
.

This
approach
,
using
an
extra
file
with
server
information
,
proves
to
be
particularly
useful
for
the
attackers
,
as
they
do
not
have
to
transmit
new
payload
to
the
infected
system
.

Furthermore
,
it
keeps
analysts
in
the
dark
about
additional
C&Cs
in
case
they
only
see
the
.dat
file
.

This
file
alone
is
rather
useless
.

We
have
seen
the
same
technique
when
looking
at
the
differences
between
the
two
malware
variants
before
.

The
"
Cohhoc
"
malware
uses
an
obfuscation
layer
,
to
disguise
the
malware
and
to
complicate
the
analysis
.

The
obfuscation
is
used
.

This
algorithm
can
easily
be
adapted
in
C
language
.

Fellow
researchers
are
welcome
to
receive
the
code
after
contacting
samplerequest@gdata.de
.

To
be
readable
and
easily
usable
,
the
base64
encoded
data
(
in
binary
format
)
is
converted
into
ASCII
.

Here
is
an
example
to
decode
a
command
and
control
.

The
malware
uses
HTTP
to
communicate
to
the
command
and
control
servers
.

Here
is
an
example
of
a
request
performed
by
an
infected
system
.

The
relevant
data
is
placed
after
the
GET
request
.

Here
is
the
content
of
the
request
,
decoded
by
using
the
code
mentioned
above
.

Here
are
the
different
parts
of
the
data
transmitted
.

The
dropper
is
used
to
install
two
files
and
the
persistence
mechanism
.

The
two
files
are
DirectsX.sys
(
the
malicious
driver
)
and
directsx
(
without
any
extension
)
.

The
second
file
is
the
encoded
payload
used
by
the
driver
.

The
persistence
mechanism
is
realized
by
the
creation
of
a
service
.

The
installed
file
and
the
registry
modifications
are
stored
in
a
resource
within
the
dropper
.

Here
is
a
screenshot
of
the
registry
key
created
.

The
dropper
and
the
driver
are
both
signed
by
a
legitimate
certificate
.

The
certificate
is
owned
by
"
Jiangxi
you
ma
chuang
da
software
technology
Co.
,
LTD
"
,
has
been
reported
stolen
and
is
known
to
have
been
used
in
APT
attacks
.

Here
is
a
screenshot
of
the
certificate
.

The
main
purpose
of
the
driver
is
to
decode
the
content
of
the
directsx
file
and
to
inject
the
payload
into
a
userland
process
.

The
algorithm
used
to
encode
the
data
in
the
file
is
a
XOR
followed
by
a
SUB
.

The
values
of
the
XOR
and
the
SUB
can
be
different
.

The
decoding
file
contains
the
configuration
(
command
and
control
)
and
a
library
(
.dll
)
to
inject
in
userland
.

Here
is
an
example
of
configuration
.

Actually
,
the
library
is
injected
into
the
process
of
BitDefender
(
seccenter.exe
)
,
ZoneAlarm
(
svchost.exe
)
or
360
(
360tray.exe
)
,
which
means
that
three
popular
security
products
are
abused
.

If
the
processes
are
not
running
on
the
infected
system
,
the
injection
is
performed
into
explorer.exe
.

To
perform
the
injection
,
the
driver
uses
the
API
KeStackAttachProcess
(
)
.

This
function
allows
it
to
attach
the
current
thread
to
an
address
space
of
a
userland
process
.

The
name
of
the
rootkit
is
linked
to
its
device
name
:
\\device\DirectsX
and
its
symbolic
name
:
\\DosDevices\DirectsX.

The
injected
dll
is
signed
with
the
same
certificate
,
too
.

It
is
the
remote
administration
tool
itself
,
injected
by
the
rootkit
.

The
tool
allows
the
attackers
.

This
library
is
a
variant
of
a
remote
administration
tool
also
known
as
Savit
.

We
identified
more
than
75
different
servers
.

The
complete
list
of
domains
is
available
in
the
appendix
.

The
IP
resolved
by
the
domains
changed
frequently
.

At
the
time
of
writing
this
report
,
all
known
C&C
servers
were
mainly
located
in
Hong
Kong
,
with
three
different
host
companies
.

A
fourth
host
company
used
was
located
in
the
US
.

The
IP
ranges
used
by
then
.

The
choice
of
domain
names
was
made
to
trick
the
users
or
the
security
team
during
their
analysis
of
the
web
logs
collected
.

Have
a
look
at
two
examples
used
during
the
TooHash
campaign
.

For
each
domain
,
the
attackers
add
a
subdomain
,
the
subdomain
is
generally
assumed
to
be
the
name
(
or
the
acronym
)
of
the
targeted
entities
.

Here
is
an
example
:
nspo.intarnetservices.com
.

This
could
,
in
the
context
of
the
Greater
China
area
,
stand
for
the
National
Space
Organization
located
in
Taiwan
.

The
attackers
control
infected
machines
with
the
help
of
web
servers
installed
on
the
C&Cs
,
they
do
not
need
to
have
remote
access
.

Here
is
the
authentication
page
of
the
administration
panel
and
aswe
can
see
,
the
panel
is
partly
written
in
Simplified
Chinese
.

We
did
not
clearly
identify
the
people
behind
this
campaign
.

The
use
of
the
stolen
certificate
could
point
the
Shiqiang
group
,
but
nothing
can
be
proven
.

Anyway
,
in
our
case
,
the
attackers
clearly
targeted
private
business
and
governmental
organizations
as
well
.

Either
the
group
decided
to
target
governmental
entities
as
well
or
the
stolen
certificate
is
used
by
several
groups
.

In
any
case
,
the
attackers
are
well
organized
and
use
a
huge
and
complex
infrastructure
to
manage
the
infected
systems
.

Furthermore
,
they
use
two
different
malware
types
in
order
to
always
have
access
to
the
targeted
organizations
even
if
one
malware
is
detected
.

The
second
malware
becomes
a
spare
wheel
.

We
assume
that
the
people
behind
the
group
are
professionals
.

This
campaign
showed
us
once
more
,
that
people
do
not
hesitate
to
use
sophisticated
and
deceptive
methods
to
steal
data
from
companies
or
governmental
organizations
.

The
files
submitted
to
us
seem
to
have
targeted
companies
in
the
Greater
China
area
but
this
technology
can
easily
be
used
against
organizations
in
other
countries
and
regions
across
the
globe
.

Due
to
the
increasing
value
of
nowadays
'
trade
secrets
and
political
secrets
,
we
believe
that
the
use
of
this
kind
of
sponsored
campaign
is
very
likely
to
increase
in
the
future
.

Companies
and
other
entities
as
well
need
to
increase
their
security
measures
and
to
educate
the
users
about
the
risks
they
might
encounter
while
working
with
a
computer
–
ranging
from
social
engineering
to
malware
attacks
,
etc
.

The
exploits
used
during
this
campaign
are
detected
by
G
DATA
's
exploit
protection
system
and
the
files
involved
are
detected
by
our
antivirus
engines
.

In
case
you
would
like
to
receive
further
technical
information
or
would
like
to
contribute
any
information
to
this
case
,
please
feel
free
to
contact
us
by
using
the
following
email
address
:
toohash.securityblog@gdata.de
Documents
(
and
the
original
name
)
.

Cohhoc
samples
.

DirectsX
samples
.

%
USERPROFILE%\Start
Menu\Programs\Startup\Internet
Explorer
.lnk
%
APPDATA%\Roaming\Microsoft\Windows\Start
Menu\Programs\Startup\Internet
Explorer
.lnk
%
APPDATA%\Adobe\ActiveX.dat
%
APPDATA%\Adobe\ActiveX.bat
%
APPDATA%\Microsoft\conime.exe
%
APPDATA%\Microsoft\conime.exe.en
%
TEMP%\svchost.exe
%
TEMP%\war.exe
%
TEMP%\Wo.doc
%
SystemRoot%\System\directsx.sys
%
CommonProgramFiles%\System\directsx
\\Device\DirectsX
\\DosDevices\DirectsX
*
.cnnic
-
micro.com
*
.proxydomain.org
*
.dyndns
-
office.com
*
.kmdns.net
*
.privnsb.com
*
.adobeservice.net
*
.webmailerservices.com
*
.intarnetservice.com
In
case
you
wish
to
have
information
about
the
IPs
involved
,
please
get
in
touch
with
us
via
toohash.securityblog@gdata.de

Disclaimer
:
CrowdStrike
derived
this
information
from
investigations
in
non
-
classified
environments
.

Since
we
value
our
client
's
privacy
and
interests
,
some
data
has
been
redacted
or
sanitized
.

Crowdstrike
presents
"
Mo
'
Shells
Mo
'
Problems
"
-
A
four
part
series
featuring
two
unique
web
shells
used
by
a
Chinese
threat
group
we
call
Deep
Panda
.

The
series
will
culminate
with
a
CrowdCast
in
April
2014
detailing
a
case
study
of
the
incident
response
investigation
conducted
to
identify
these
web
shells
.

Special
thanks
to
Josh
Phillips
of
the
CrowdStrike
Global
Intelligence
Team
for
providing
the
technical
analysis
in
this
blog
post
.

Today
we
'll
cover
part
one
of
this
series
,
which
provides
an
overview
of
what
web
shells
are
,
functionality
of
two
web
shells
recently
identified
during
an
incident
response
investigation
and
how
they
were
leveraged
by
the
attacker
.

Parts
two
through
four
will
provide
details
on
successful
analytical
techniques
you
can
use
to
discover
web
shells
within
your
environment
.

A
Web
Shell
is
a
file
containing
backdoor
functionality
written
in
a
web
scripting
language
such
ASP
,
ASPX
,
PHP
or
JSP
.

When
a
web
shell
is
hosted
on
an
internet
facing
victim
system
,
an
adversary
can
remotely
access
the
system
to
perform
malicious
actions
.

Deep
Panda
is
a
China
based
threat
group
CrowdStrike
has
observed
targeting
companies
in
the
defense
,
legal
,
telecommunication
and
financial
industries
.

Crowdstrike
has
observed
Deep
Panda
adopting
web
shells
as
their
primary
access
back
into
a
victim
organization
.

This
is
an
interesting
shift
as
web
shells
have
typically
been
seen
as
only
a
first
stage
into
obtaining
a
persistent
foothold
in
an
environment
.

Previously
,
web
shells
were
quickly
abandoned
once
persistent
second
stage
malware
was
successfully
beaconing
.

Using
a
web
shell
as
a
primary
backdoor
gives
Deep
Panda
several
advantages
.

To
assist
organizations
with
identifying
web
shells
in
their
environment
,
this
post
will
cover
two
popular
Deep
Panda
web
shells
.

By
gaining
insight
into
their
capabilities
and
footprint
,
organizations
should
find
it
feasible
to
detect
and
remediate
these
backdoors
.

Showimg.asp
is
an
example
of
an
early
stage
web
shell
used
to
build
an
initial
foothold
within
a
network
.

After
it
is
replaced
by
more
robust
backdoors
,
it
may
be
left
in
place
as
a
last
resort
should
remediation
take
place
.

At
a
diminutive
28
bytes
,
it
is
one
of
the
smallest
Active
Server
Page
(
ASP
)
backdoors
in
the
wild
.

In
a
recent
case
,
we
witnessed
this
web
shell
written
to
a
standalone
file
(
named
showimg.asp
)
,
but
it
could
easily
be
injected
into
an
existing
page
,
making
it
even
stealthier
.

The
code
for
this
web
shell
can
be
found
below
.

ASP
uses
Microsoft
Visual
Basic
(
VBScript
)
as
its
implementation
language
.

The
code
above
uses
the
chr
(
)
function
to
convert
an
integer
into
a
character
,
which
is
then
passed
as
an
argument
to
the
ASP
Request
(
)
object
.

The
Request
(
)
object
will
search
the
Query
String
for
any
keys
matching
the
input
.

In
our
case
,
the
code
is
equivalent
to
Request
.
QueryString
(
'
*
'
)
.

The
request
object
will
look
for
chr(42
)
which
is
an
asterisk
(
*
)
,
returning
whatever
is
passed
to
it
in
a
HTTP
GET
or
POST
.

Next
,
the
Execute
(
)
function
will
execute
any
value
returned
by
the
lookup
.

Effectively
,
an
attacker
can
form
a
request
that
will
execute
any
VBScript
code
.

As
you
might
imagine
,
this
is
a
powerful
capability
.

For
example
,
this
code
can
perform
any
of
the
following
actions
.

This
web
shell
is
an
example
of
a
"
thick
client
"
shell
,
meaning
that
while
the
server
side
code
is
quite
small
,
attackers
typically
use
a
larger
GUI
client
to
construct
the
sent
commands
.

The
client
GUI
runs
on
the
attacker
's
system
and
hence
is
not
typically
found
within
the
victim
network
.

As
a
simple
example
of
an
encoded
command
,
the
following
GET
request
would
cause
the
backdoor
to
execute
the
code
Response
.
Write("
<
h1>Hello
World</h1
>
"
)
and
would
render
"
Hello
World
"
to
be
printed
in
the
web
browser
.

Path
:
C:\inetpub\wwwroot\aspnet_client\system_web\<VERSION>\
MD5
Hash
:
cc875db104a602e6c12196fe90559fb6
File
Size
:
45187
Table
4
:
Metadata
of
"
system_web.aspx
"
System_web.aspx
is
an
excellent
example
of
a
more
robust
web
shell
used
to
replace
Deep
Panda
's
traditional
beaconing
command
and
control
infrastructure
.

It
is
an
ASP.NET
backdoor
written
in
C
#
,
with
far
more
capabilities
than
we
saw
with
the
showimage.asp
sample
.

The
web
shell
supports
a
form
of
authentication
to
protect
against
unauthorized
access
.

This
prevents
its
discovery
from
search
engine
indexing
,
vulnerability
scanning
tools
and
other
unauthorized
access
to
the
backdoor
.

In
order
to
bypass
authentication
,
a
user
session
must
satisfy
one
of
three
options
.

Since
web
shells
are
text
-
based
,
we
can
easily
see
how
this
authentication
takes
place
.

First
,
the
code
checks
if
a
cookie
by
the
name
of
cp
exists
.

If
so
,
the
response
object
has
its
End
(
)
method
invoked
,
denying
the
user
access
.

Next
,
the
code
uses
the
IsValidUser()method
and
checks
the
Hyper
Text
Transport
Protocol
(
HTTP
)
headers
for
the
Keep
-
Alive
value
,
which
,
if
equal
to
320
,
will
return
true
.

If
the
value
does
not
equal
320
the
IsValidUser()method
iterates
over
the
Request
.
UserLanguages
collection
searching
for
a
language
named
es
-
DN
,
and
if
found
,
the
IsValidUser
(
)
method
will
return
true
.

If
neither
check
passes
,
the
code
returns
false
and
the
code
will
finally
check
for
the
presence
of
a
cookie
named
<
REDACTED>.

If
the
cookie
is
present
,
the
authentication
step
is
satisfied
.

If
not
,
a
blank
web
page
with
no
content
is
displayed
.

After
successful
authentication
,
the
attacker
is
provided
with
the
following
page
.

System_web.aspx
packs
a
large
amount
of
functionality
into
a
compact
interface
.

It
provides
the
following
capabilities
.

The
web
shell
supports
8
main
commands
,
with
most
command
execution
via
Transact
-
SQL
using
the
xp_cmdshell
function
.

This
command
depends
on
the
contents
of
the
first
unlabeled
textbox1
.

If
unlabeled
textbox1
is
empty
,
the
code
will
enumerate
attached
drives
.

Provider=
or
Driver=
-
Will
connect
using
the
OleDbConnection
class
.

Data
Source=
-
The
code
will
connect
using
the
SqlConnection
class
.

iis://
-
If
this
appears
in
unlabeled
textbox1
,
the
code
will
use
data
from
the
second
unlabeled
textbox2
to
execute
Active
Directory
requests
.

This
command
also
depends
on
the
text
contained
in
the
unlabeled
textbox1
.

If
the
field
is
left
empty
,
the
code
will
assume
a
valid
path
to
a
file
on
the
local
machine
and
will
read
and
display
contents
to
user
.

Data
Source=
-
the
code
will
assume
that
the
unlabeled
textbox2
contains
a
valid
SQL
query
and
will
execute
it
and
display
the
results
.

http://
-
If
this
appears
in
unlabeled
textbox1
,
download
content
from
the
assumed
URL
.

$
SEX
–
If
this
appears
in
unlabeled
textbox1
,
pass
the
contents
to
the
Server
.
Execute
(
)
method
.

Execute
contents
in
unlabeled
textbox1
as
a
SQL
query
and
return
binary
data
to
adversary
.

Execute
contents
in
unlabeled
textbox1
as
a
SQL
statement
and
return
valid
textual
data
to
adversary
.

Upload
the
file
chosen
by
the
Choose
File
button
and
save
it
to
a
temporary
table
in
the
database
file
worktbl
in
chunks
of
10240
bytes
.

Then
executes
xp_cmdshell
(
which
executes
the
Bulk
Copy
Program
)
to
copy
the
data
from
that
table
to
a
file
whose
name
is
specified
in
unlabeled
textbox2
.

After
the
file
is
saved
,
the
code
deletes
the
temporary
table
.

If
unlabeled
textbox1
is
a
local
file
on
infected
system
,
the
file
is
read
and
displayed
to
attacker
.

\\
-
If
unlabeled
textbox1
starts
with
\\
,
use
xp_cmdshell
to
execute
the
copy
command
to
copy
file
to
%
windir%\Temp\temp.bin
.

Then
,
issue
the
dir
command
and
display
results
to
user
.

Finally
,
delete
the
temporary
file
%
windir%\Temp\temp.bin
.

Perform
Active
Directory
queries
.

The
code
handles
create
,
delete
,
set
,
get
,
and
enum
queries
,
while
any
query
not
matching
those
is
executed
directly
.

All
commands
are
executed
using
the
System
.
DirectoryServices
API
.

Simple
wrapper
around
the
CSharpCodeProvider
API
,
allowing
the
adversary
to
compile
and
execute
arbitrary
C
#
source
code
.

Login
Checkbox
Attempt
to
use
the
username
,
password
,
and
domain
from
the
User
,
Pass
and
Domain
fields
and
LogonUserA
(
)
Win32
API
function
to
impersonate
a
specific
user
.

Detatch
Checkbox
Specifies
whether
commands
run
from
the
Exec
button
will
have
their
output
redirected
and
displayed
to
the
adversary
when
the
command
is
finished
executing
.

In
short
,
system_web.aspx
provides
an
adversary
with
a
very
stealthy
means
of
near
full
control
of
the
server
on
which
it
resides
.

This
stealth
might
be
its
most
important
attribute
.

As
we
will
see
,
identifying
web
shells
can
be
much
harder
than
finding
malicious
binaries
.

In
our
next
post
,
we
will
discuss
techniques
for
identifying
web
shells
.

Stay
tuned
for
Parts
2
-
4
as
we
cover
File
Stacking
,
Web
Log
Review
,
and
Network
Detection
.

In
the
meantime
,
register
now
for
the
April
1st
CrowdCast
.

