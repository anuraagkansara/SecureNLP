DROPPER O
MD5 O
9fff114f15b86896d8d4978c0ad2813d O
SHA-1 O
27a0a98053f3eed82a51cdefbdfec7bb948e1f36 O
File O
Size O
693.4 O
KB O
( O
710075 O
bytes O
) O
Compile O
Time O
2011 O
- O
08 O
- O
29 O
11:48:42 O
IMPLANT O
MD5 O
4525141d9e6e7b5a7f4e8c3db3f0c24c O
SHA-1 O
efbe18eb8a66e4b6289a5c53f22254f76e3a29bd O
File O
Size O
585.4 O
KB O
( O
599438 O
bytes O
) O
Compile O
Time O
2011 O
- O
08 O
- O
29 O
13:02:29 O
Special O
thanks O
for O
their O
contribution O
in O
the O
making O
of O
this O
report O
go O
to O
Morgan O
Marquis O
- O
Boire O
, O
Joan O
Calvet O
, O
Paul O
Rascagn O
res O
, O
Alex O
Dulaunoy O
, O
Raphael O
Vinot O
and O
the O
remaining O
team O
of O
CIRCL O
Luxembourg O
. O
 
You O
guys O
rock O
\m/ O
Comments O
or O
inquiries O
please O
direct O
to O
Marion O
Marschalek O
( O
0xF372F2CA O
) O
. O
 
Babar O
and O
the O
related O
crowd O
of O
animalesque O
malware O
will O
be O
presented O
at O
SyScan'15 O
conference O
( O
https://www.syscan.org/ O
) O
in O
March O
2015 O
. O
 
No O
elephants O
were O
harmed O
in O
the O
making O
of O
this O
report O
. O
 
This O
work O
is O
licensed O
under O
a O
Creative O
Commons O
Attribution O
- O
NonCommercial O
- O
ShareAlike O
4.0 O
International O
License O
. O
 
Subject O
of O
this O
analysis O
is O
a O
fascinating O
piece O
of O
malware O
, O
which O
invades O
Windows O
desktop O
machines O
and O
aims O
at O
.. O
 
well O
, O
all O
the O
things O
. O
 
The O
analyzed O
malware O
consists O
of O
a O
dropper O
and O
an B-Entity
implant I-Entity
, O
which O
invades O
Windows O
processes O
to O
steal B-Action
data B-Entity
from B-Modifier
instant O
messengers B-Entity
, I-Entity
softphones I-Entity
, I-Entity
browsers I-Entity
and I-Entity
office I-Entity
applications I-Entity
. O
 
A O
fully O
blown O
espionage O
kit O
, O
so O
to O
say O
, O
sophisticated O
almost O
. O
 
The O
implant B-Entity
is O
able O
to O
hook O
APIs O
of O
interest O
in O
dedicated O
remote O
processes O
, O
to O
steal B-Action
data B-Entity
on B-Modifier
the O
fly B-Entity
. O
 
More O
interesting O
than O
the O
malware O
itself O
though O
is O
the O
path O
to O
the O
associated O
symbol O
file O
, O
which O
appears O
embedded O
in O
the O
dropper O
. O
 
The O
analyzed O
malware O
samples O
come O
with O
the O
internal O
project O
name O
' O
Babar64 O
' O
. O
 
The O
myth O
of O
Babar O
has O
been O
around O
for O
a O
while O
in O
the O
intelligence O
community O
. O
 
Questions O
have O
been O
raised O
since O
Le O
Monde O
published O
an O
article O
on O
Babar O
in O
2014 O
[ O
1 O
] O
and O
were O
recently O
fuelled O
by O
a O
leaked O
government O
presentation O
found O
among O
a O
stash O
of O
documents O
published O
in O
January O
by O
Spiegel O
[ O
2 O
] O
. O
 
The O
leaked O
document O
was O
authored O
by O
the O
Communications O
Security O
Establishment O
Canada O
( O
CSEC O
) O
and O
reports O
about O
a O
potential O
nation O
state O
attack O
involving O
malware O
named O
Babar O
. O
 
The O
actor O
behind O
the O
attacks O
is O
assumed O
to O
be O
French O
inteligence O
. O
 
Assumptions O
are O
based O
on O
certain O
binary O
attributes O
, O
language O
and O
location O
of O
infrastructure O
as O
well O
as O
targets O
. O
 
The O
binaries O
at O
hand O
fit O
well O
with O
the O
description O
CSEC O
provides O
, O
although O
it O
is O
quite O
clear O
they O
are O
a O
newer O
version O
from O
what O
CSEC O
had O
uncovered O
around O
2009 O
. O
 
It O
is O
not O
clear O
whether O
the O
compilation O
timestamps O
are O
falsified O
, O
but O
an O
earlier O
compilation O
time O
than O
the O
actual O
stamp O
seems O
unlikely O
. O
 
Doubtlessly O
though O
, O
the O
Babar O
binaries O
match O
with O
a O
malware O
strain O
representing O
itself O
as O
Bunny O
, O
as O
well O
as O
a O
family O
dubbed O
NBOT O
or O
TFC O
. O
 
The O
dropper O
operates O
straight O
forward O
; O
it B-Entity
fetches B-Action
the O
encrypted B-Entity
DLL I-Entity
from B-Modifier
its O
own B-Entity
binary I-Entity
from I-Entity
outside I-Entity
its I-Entity
resource I-Entity
section I-Entity
, O
decrypts O
it O
and O
hides B-Action
it B-Entity
in B-Modifier
the O
file B-Entity
system I-Entity
. O
 
Then O
it B-Entity
goes O
on O
to O
load B-Action
the O
DLL B-Entity
using B-Modifier
Windows O
regsvr32.exe B-Entity
. O
 
To O
achieve O
this O
it B-Entity
spawns B-Action
a O
dedicated B-Entity
process I-Entity
with B-Modifier
the O
command B-Entity
line I-Entity
' I-Entity
" I-Entity
regsvr32.exe I-Entity
" I-Entity
/s I-Entity
/n I-Entity
/i I-Entity
" I-Entity
% I-Entity
APPDATA%\%DLLNAME% I-Entity
" I-Entity
' I-Entity
. O
 
The O
DLL O
name O
is O
random O
but O
legitimately O
looking O
and O
hardcoded O
for O
a O
specific O
dropper O
. O
 
It O
is O
also O
stored O
as O
encrypted O
string O
in O
the O
binary O
, O
and O
has O
been O
seen O
to O
decrypt O
to O
either O
' O
perf585.dll O
' O
or O
' O
dump21cb.dll O
' O
depending O
on O
the O
dropper O
. O
 
The O
encryption O
algorithm O
used O
is O
AES O
( O
Advanced O
Encryption O
Standard O
) O
with O
128-bit O
keys O
. O
 
The O
keys O
used O
for O
decryption O
are O
' O
20 O
33 O
AF O
73 O
A9 O
AC O
72 O
D3 O
BE O
E6 O
A5 O
73 O
92 O
BA O
37 O
6C O
' O
for O
the O
implant O
filename O
and O
' O
A0 O
0E O
3E O
B3 O
3A O
1C O
D3 O
AA O
A0 O
BE O
3F O
B3 O
F9 O
0A O
96 O
15 O
' O
for O
decrypting O
the O
binary O
. O
 
AES O
is O
the O
encryption O
algorithm O
of O
choice O
throughout O
the O
dropper O
and O
its O
implant O
's O
operations O
. O
 
Interestingly O
, O
the O
Babar O
dropper O
as O
well O
as O
the O
implant O
show O
a O
similar O
method O
of O
API O
name O
obfuscation O
as O
the O
Bunny O
malware O
and O
samples O
from O
the O
NBOT O
family O
. O
 
Dedicated O
APIs O
are O
loaded O
through O
a O
resolution O
function O
, O
which O
searches O
for O
library O
exports O
by O
comparing O
hashes O
of O
the O
export O
names O
with O
a O
given O
hash O
. O
 
For O
the O
Babar O
project O
though O
the O
attackers O
used O
an O
adapted O
version O
of O
SHA-1 O
, O
as O
opposed O
to O
the O
simple O
XOR O
/ O
ROL O
hash O
algorithm O
which O
was O
used O
in O
the O
Bunny O
project O
. O
 
After O
infection O
the B-Entity
dropper I-Entity
executes O
a O
separate O
command O
line O
through O
spawning B-Action
a O
cmd.exe B-Entity
process I-Entity
, O
which O
is O
instructed O
to O
wait O
for O
1 O
second O
before O
deleting B-Action
the O
dropper B-Entity
binary I-Entity
on I-Entity
disk I-Entity
. O
 
This O
way O
the B-Entity
malware I-Entity
reduces B-Action
forensic O
artefacts B-Entity
, O
staying O
behind O
after O
infection O
. O
 
Curiously O
though O
, O
the O
regsvr32.exe O
process O
used O
to O
load O
the O
dropped O
implant O
remains O
running O
. O
 
This O
way O
Babar O
leaves O
a O
visible O
process O
on O
the O
process O
list O
during O
execution O
. O
 
As O
the O
project O
name O
' O
Babar64 O
' O
suggests O
, O
dropper O
and O
implant O
are O
designed O
to O
work O
on O
32-bit O
and O
on O
64-bit O
Windows O
versions O
. O
 
However O
, O
process O
hooking O
and O
injection O
can O
only O
affect O
32-bit O
processes O
due O
to O
the O
bitness O
of O
the O
implant O
itself O
. O
 
Babar O
's B-Entity
implant I-Entity
is O
a O
32-bit O
DLL O
written O
in O
C++ O
, O
which O
upon O
start O
injects B-Action
itself B-Entity
to B-Modifier
running O
processes B-Entity
and O
invades B-Action
desktop O
applications B-Entity
by B-Modifier
applying O
a B-Entity
global I-Entity
Windows I-Entity
hooks I-Entity
. O
 
The O
implant B-Entity
is O
capable O
of O
logging B-Action
keystrokes B-Entity
, O
capture B-Action
screen O
shots B-Entity
, O
spy O
on O
installed O
softphones O
and O
instant O
messengers O
next O
to O
a O
list O
of O
simpler O
espionage O
tricks O
. O
 
Babar O
is O
a O
fully O
blown O
espionage O
tool O
, O
built O
to O
excessively O
spy O
on O
the O
user O
's O
activity O
on O
an O
infected O
machine O
. O
 
The O
DLL O
dropped O
by O
Babar O
is O
placed O
into O
the O
application O
data O
folder O
, O
along O
with O
a O
directory O
named O
' O
MSI O
' O
where O
the O
runtime O
data O
will O
be O
stored O
. O
 
Babar B-Entity
operates O
through O
multiple O
instances O
, O
by O
injecting B-Action
its O
DLL B-Entity
to B-Modifier
a O
maximum B-Entity
of I-Entity
three I-Entity
desktop I-Entity
processes I-Entity
. O
 
This O
is O
achieved O
by O
loading O
the O
Babar O
DLL O
to O
remote O
processes O
through O
a O
mapped O
memory O
object O
. O
 
Apart O
from O
that O
, O
Babar O
comes O
with O
a B-Entity
userland I-Entity
rootkit I-Entity
component I-Entity
which O
applies B-Action
global O
Windows B-Entity
hooks I-Entity
to B-Modifier
invade O
all B-Entity
processes I-Entity
on I-Entity
its I-Entity
desktop I-Entity
. O
 
This O
way O
Babar B-Entity
can O
install B-Action
API O
hooks B-Entity
for I-Entity
various I-Entity
APIs I-Entity
via B-Modifier
Windows O
Detours B-Entity
technique I-Entity
to O
actively O
steal B-Action
data B-Entity
from B-Modifier
arbitrary O
processes B-Entity
. O
 
Babar O
's O
anti O
- O
analysis O
measures O
are O
sparse O
. O
 
It O
is O
not O
protected O
by O
a O
runtime O
packer O
or O
crypter O
, O
it O
does O
not O
have O
sandbox O
detection O
or O
anti O
- O
debugging O
measures O
, O
most O
character O
strings O
are O
shown O
in O
clear O
- O
text O
. O
 
Babar O
does O
show O
the O
same O
obscure O
treatment O
for O
installed O
anti O
- O
virus O
products O
as O
the O
Bunny O
malware O
though O
. O
 
Babar O
also O
enumerates O
the O
Windows O
Management O
Instrumentation O
for O
installed O
AV O
solutions O
, O
while O
the O
exact O
use O
of O
this O
information O
is O
not O
yet O
known O
. O
 
We O
do O
suspect O
large O
portions O
of O
the O
product O
enumeration O
to O
be O
based O
on O
the O
exact O
same O
source O
code O
as O
the O
module O
Bunny O
used O
. O
 
The O
enumeration O
function O
issues O
the O
commands O
â€ž O
SELECT O
* O
FROM O
AntiVirusProduct O
" O
and O
retrieves O
attributes O
such O
as O
' O
productState O
' O
, O
' O
DisplayName O
' O
, O
' O
VersionNumber O
' O
and O
' O
productUptoDate O
' O
. O
 
The O
anti O
- O
virus O
solutions O
searched O
for O
are O
again O
identified O
by O
256-bit O
SHA O
hashes O
. O
 
Only O
some O
of O
the O
hashes O
could O
be O
mapped O
to O
known O
names O
of O
anti O
- O
virus O
solutions O
. O
 
Babar B-Entity
also O
implements B-Action
an O
obfuscation B-Entity
technique I-Entity
to B-Modifier
hide O
certain B-Entity
API I-Entity
names I-Entity
. O
 
Selected O
APIs O
are O
identified O
by O
hashes O
, O
which O
are O
used O
to O
load O
the O
APIs O
dynamically O
at O
runtime O
. O
 
The O
hashes O
are O
hardcoded O
within O
the O
binary O
, O
and O
will O
be O
compared O
to O
hashed O
library O
exports O
by O
the O
API O
resolution O
routine O
. O
 
The O
hashing O
algorithm O
is O
different O
from O
the O
simple O
XOR O
/ O
ROL O
technique O
Bunny O
uses O
. O
 
It O
seems O
to O
be O
based O
on O
SHA-1 O
, O
but O
generates O
32-bit O
hashes O
instead O
of O
the O
standard O
160-bit O
length O
. O
 
What O
Bunny O
, O
Babar O
and O
NBOT O
all O
have O
in O
common O
though O
is O
that O
the O
obfuscation O
technique O
is O
easy O
to O
break O
and O
only O
applied O
to O
a O
subset O
of O
APIs O
. O
 
As O
an O
anti O
- O
analysis O
trick O
this O
is O
considerably O
useless O
, O
it O
does O
make O
sense O
though O
to O
trick O
malware O
detection O
solutions O
which O
apply O
heuristics O
based O
on O
static O
analysis O
of O
API O
calls O
. O
 
This O
becomes O
evident O
when O
looking O
at O
the O
list O
of O
Babar O
's O
obfuscated O
API O
names O
, O
which O
includes O
RegisterRawInputDevices O
, O
GetRawInputData O
, O
GetClipboardData O
or O
DirectSoundCaptureCreate O
. O
 
The O
startup B-Entity
routine I-Entity
of I-Entity
the I-Entity
Babar I-Entity
implant I-Entity
will O
create B-Action
a O
registry B-Entity
key I-Entity
under B-Modifier
' O
[ B-Entity
HKU]\ I-Entity
.. I-Entity
\CurrentVersion\Run I-Entity
' I-Entity
to B-Modifier
assure O
persistence B-Entity
. O
 
The O
key O
is O
named O
' O
MSSecurity O
' O
and O
executes O
the O
exact O
same O
command O
line O
as O
the O
infector O
, O
every O
time O
the O
system O
boots O
- O
' O
" O
regsvr32.exe O
" O
/s O
/n O
/i O
" O
% O
APPDATA%\%DLLNAME% O
" O
' O
. O
 
At B-Modifier
system O
boot B-Entity
time I-Entity
the O
regsvr32.exe B-Entity
process I-Entity
will O
start O
, O
load B-Action
the O
Babar B-Entity
DLL I-Entity
and O
thus O
' O
deploy O
' O
the O
malware O
to O
various O
legitimate O
processes O
. O
 
As O
opposed O
to O
persistence O
, O
Babar B-Entity
also O
implements O
functionality O
to O
uninstall B-Action
itself B-Entity
from B-Modifier
the O
affected B-Entity
system I-Entity
. O
 
Interesting O
again O
, O
same O
as O
during O
infection O
, O
the O
regsvr32.exe O
process O
remains O
running O
even O
after O
Babar O
is O
readily O
set O
up O
. O
 
During O
initialization O
Babar O
loads O
and O
decrypts O
a O
set O
of O
configuration O
parameters O
which O
are O
appended O
to O
the O
DLL O
's O
relocation O
section O
. O
 
ASCII O
strings O
within O
the O
configuration O
data O
reveal O
a O
lot O
about O
Babar O
's O
intentions O
. O
 
As O
could O
be O
seen O
already O
in O
binaries O
of O
related O
families O
, O
next O
to O
the O
hardcoded O
configuration O
data O
Babar O
maintains O
a O
system O
specific O
runtime O
configuration O
. O
 
The O
additional O
configuration O
consists O
of O
a O
set O
of O
local O
attributes O
and O
a O
set O
of O
values O
derived O
from O
the O
Windows O
environment O
. O
 
The O
attributes O
are O
dynamically O
generated O
or O
requested O
at O
runtime O
and O
not O
stored O
in O
memory O
. O
 
Values O
retrieved O
from O
Windows O
environment O
. O
 
The O
DLL O
when O
loaded O
in O
the O
context O
of O
an O
application O
seeks O
to O
invade O
a O
maximum O
of O
two O
more O
victim O
processes O
. O
 
This O
for O
once O
is O
a O
resilience O
measure O
, O
so O
if O
the O
initially O
infected O
process O
stops O
running O
the O
malware O
remains O
in O
memory O
through O
additional O
instances O
. O
 
On O
the O
other O
hand O
it O
is O
practically O
a O
load O
balancing O
measure O
. O
 
The O
C&C O
communication O
module O
is O
located O
in O
an O
export O
of O
the O
DLL O
, O
which O
will O
be O
executed O
through O
a O
remote O
thread O
, O
injected O
like O
the O
child O
processes O
, O
via O
a O
memory O
- O
mapped O
file O
. O
 
The O
process O
infection O
is O
achieved O
by O
mapping O
a O
shared O
object O
into O
the O
victim O
's O
process O
space O
and O
invoking O
a O
function O
stub O
as O
remote O
thread O
. O
 
The O
steps O
being O
taken O
are O
. O
 
The O
function B-Entity
stub I-Entity
will O
then O
go O
on O
to O
load B-Action
the O
Babar B-Entity
DLL I-Entity
through B-Modifier
LoadLibraryA B-Entity
and O
execute B-Action
one O
of B-Entity
its I-Entity
exports I-Entity
, O
as O
indicated O
in O
the O
shared O
memory O
. O
 
The O
mapped O
object O
contains O
name O
and O
path O
to O
the O
malicious O
DLL O
, O
the O
name O
of O
the O
pipe O
being O
used O
for O
communication O
between O
the O
instances O
, O
the O
name O
of O
the O
export O
from O
the O
DLL O
to O
be O
called O
as O
well O
as O
information O
about O
instances O
already O
running O
. O
 
For O
picking O
a O
process O
to O
infect O
the O
malware O
randomly O
picks O
one O
from O
a O
list O
of O
prospects O
. O
 
These O
have O
to O
be O
32-bit O
processes O
, O
not O
already O
infected O
and O
not O
among O
a O
list O
of O
processes O
to O
avoid O
such O
as O
winlogon.exe O
, O
explorer.exe O
, O
cmd.exe O
or O
regsvr32.exe O
. O
 
This O
way O
Babar O
always O
keeps O
three O
instances O
in O
memory O
. O
 
The O
first O
one O
to O
start O
up O
will O
be O
the O
' O
main O
instance O
' O
. O
 
If O
any O
of O
the O
instances O
dies O
, O
a O
new O
third O
instance O
will O
be O
created O
. O
 
If O
the O
main O
instance O
dies O
the O
oldest O
child O
will O
take O
over O
. O
 
For B-Modifier
inter O
process B-Entity
communication I-Entity
Babar B-Entity
uses B-Action
named O
pipes B-Entity
. O
 
The O
main O
instance O
generates O
a O
random O
GUID O
which O
is O
used O
as O
name O
and O
passed O
to O
child O
instances O
. O
 
At O
the O
same O
time O
, O
the B-Entity
main I-Entity
instance I-Entity
creates B-Action
six O
named B-Entity
pipes I-Entity
using B-Modifier
the O
very B-Entity
same I-Entity
GUID I-Entity
. O
 
These O
pipes O
represent O
the O
server O
side O
for O
child O
instances O
, O
and O
also O
the O
point O
to O
connect O
to O
for O
hooks O
Babar O
installs O
to O
spy O
on O
several O
system O
APIs O
. O
 
The O
spying B-Entity
activities I-Entity
are O
performed B-Action
either O
through B-Modifier
the O
Babar B-Entity
instance I-Entity
locally O
or O
via B-Modifier
a O
global B-Entity
Windows I-Entity
hook I-Entity
invading I-Entity
all I-Entity
processes I-Entity
running I-Entity
in I-Entity
the I-Entity
same I-Entity
desktop I-Entity
. O
 
Instance O
- O
local O
capabilities O
are O
basic O
spying B-Action
on B-Modifier
window O
names B-Entity
or O
snooping O
on O
the O
clipboard O
data O
, O
while O
the B-Entity
global I-Entity
hooks I-Entity
manage O
to O
steal B-Action
information B-Entity
directly O
from B-Modifier
Windows O
API B-Entity
calls I-Entity
. O
 
A O
summary O
of O
the O
capabilities O
would O
be O
as O
follows O
. O
 
The O
keylogger O
is O
based O
on O
the O
raw O
input O
model O
. O
 
The O
malware O
creates O
an B-Entity
invisible I-Entity
window I-Entity
, O
with O
no O
other O
purpose O
than O
to O
receive B-Action
window O
messages B-Entity
. O
 
By O
processing O
the O
window O
message O
queue O
it O
filters O
out O
input O
events O
and O
dispatches O
them O
to O
a O
raw O
input O
device O
object O
. O
 
Said O
object O
is O
configured O
to O
grab O
keyboard O
events O
through O
GetRawInputData O
. O
 
The O
snooped O
keystroke O
data O
is O
passed O
to O
a B-Entity
thread I-Entity
, O
which O
performs B-Action
encryption B-Entity
and O
dumps O
the O
data O
to O
a O
log O
file O
. O
 
The O
file O
is O
located O
in O
Babar O
's O
working O
directory O
and O
named O
update.msi O
. O
 
The O
design O
of O
the O
keylogging O
component O
is O
simple O
but O
effective O
. O
 
Babar B-Entity
is O
able O
to O
sniff B-Action
all O
keystrokes B-Entity
happening I-Entity
on I-Entity
the I-Entity
same I-Entity
desktop I-Entity
as I-Entity
its I-Entity
invisible I-Entity
window I-Entity
. O
 
Interesting O
though O
, O
the O
code O
seen O
in O
Babar O
's O
implant O
is O
remarkably O
similar O
to O
an O
example O
posted O
at O
[ O
4 O
] O
. O
 
The O
Babar B-Entity
implant I-Entity
applies B-Action
global O
Windows B-Entity
hooks I-Entity
to O
load B-Action
its O
DLL B-Entity
into B-Modifier
the O
process B-Entity
space I-Entity
of I-Entity
other I-Entity
processes I-Entity
. O
 
A O
global O
hook O
is O
installed O
by O
calling O
SetWindowsHookEx O
by O
passing O
the O
thread O
ID O
zero O
. O
 
It O
applies O
to O
all O
processes O
running O
in O
the O
same O
desktop O
, O
having O
the O
same O
' O
bitness O
' O
as O
the O
DLL O
to O
be O
injected O
. O
 
In O
the O
given O
case O
this O
applies O
to O
all O
32-bit O
processes O
. O
 
A O
global B-Entity
Windows I-Entity
hook I-Entity
is O
installed B-Action
into B-Modifier
the O
Windows B-Entity
event I-Entity
chain I-Entity
. O
 
This O
effectively O
means O
code O
provided O
by O
the O
hooking O
DLL O
gets O
executed O
whenever O
an O
arbitrary O
desktop O
process O
receives O
an O
event O
of O
a O
type O
specified O
by O
the O
hook O
. O
 
Babar O
installs O
hooks O
for O
type O
2 O
and O
3 O
, O
which O
are O
WH_KEYBOARD O
and O
WH_GETMESSAGE O
. O
 
This O
way O
Babar O
has O
control O
over O
all O
keyboard O
and O
message O
events O
received O
by O
any O
application O
on O
the O
same O
Windows O
desktop O
. O
 
Through O
the O
hook O
mechanism O
Babar O
can O
be O
maximum O
invasive O
in O
the O
Windows O
userland O
. O
 
Once O
in O
the O
context O
of O
a O
desired O
target O
process O
, O
the B-Entity
malware I-Entity
goes O
on O
to O
hook B-Action
specific O
APIs B-Entity
of I-Entity
interest I-Entity
. O
 
This O
is O
achieved O
by O
applying O
the O
detours O
technique O
, O
which O
implements O
trampoline O
functions O
to O
be O
invoked O
every O
time O
a O
hooked O
API O
is O
called O
[ O
6 O
] O
. O
 
To O
achieve O
this O
, O
Babar O
rewrites O
the O
in O
- O
memory O
code O
for O
target O
APIs O
. O
 
A O
call O
to O
a O
hooked O
API O
then O
results O
in O
the O
calling O
application O
invoking O
a O
trampoline O
function O
, O
which O
performs O
malicious O
activity O
and O
then O
passes O
control O
on O
to O
the O
legitimate O
API O
. O
 
Babar O
supports O
trampoline O
functions O
for O
a O
limited O
list O
of O
APIs O
and O
limited O
to O
a O
set O
of O
processes O
of O
interest O
, O
defined O
by O
its O
configuration O
. O
 
The O
list O
of O
APIs O
to O
hook O
is O
parted O
in O
three O
groups O
. O
 
Any O
set O
of O
hooks O
will O
only O
be O
applied O
to O
a O
defined O
set O
of O
processes O
. O
 
The O
predefined O
groups O
of O
application O
names O
retrieved O
from O
the O
hardcoded O
configuration O
data O
set O
the O
scope O
of O
Babar O
's O
hooking O
advances O
. O
 
The O
respective B-Entity
trampolines I-Entity
steal B-Action
data O
going B-Entity
in I-Entity
or I-Entity
out I-Entity
of I-Entity
the I-Entity
hooked I-Entity
APIs I-Entity
on B-Modifier
the O
fly B-Entity
. O
 
The O
parsing O
function O
for O
intercepted O
internet O
communication O
searches O
for O
chat O
traffic O
, O
more O
specifically O
for O
messages O
conforming O
with O
the O
MSNP21 O
standard O
. O
 
Babar O
is O
searching O
for O
tags O
such O
as O
' O
Message- O
Type O
' O
, O
' O
Reliability O
' O
, O
' O
To O
' O
, O
' O
From O
' O
or O
' O
Text O
' O
to O
pick O
out O
of O
the O
stream O
. O
 
A O
more O
detailed O
explanation O
concerning O
the O
MSNP21 O
can O
be O
found O
at O
[ O
7 O
] O
. O
 
MSNP21 O
is O
the O
MSN O
messenger O
chat O
protocol O
that O
was O
introduced O
with O
Windows O
Live O
2010 O
beta O
. O
 
It O
is O
unclear O
though O
as O
of O
why O
only O
parsing O
for O
the O
MSN O
messenger O
is O
supported O
. O
 
The O
data O
, O
like O
all O
stolen O
information O
, O
is O
handled O
by O
a B-Entity
separate I-Entity
thread I-Entity
which O
compresses B-Action
and O
encrypts B-Action
it B-Entity
before O
dumping O
it O
to O
a O
file O
on O
disk O
. O
 
For B-Modifier
grabbing O
audio B-Entity
streams I-Entity
Babar B-Entity
includes B-Action
code O
from B-Entity
the I-Entity
OpenCORE I-Entity
AMR I-Entity
library I-Entity
[ O
8 O
] O
. O
 
AMR O
enables O
the O
malware O
to O
encode O
and O
decode O
raw O
audio O
frames O
as O
they O
are O
passed O
to O
or O
grabbed O
from O
the O
audio O
devices O
. O
 
The O
very O
same O
malware O
module O
performs O
screen O
captures O
while O
dumping O
the O
snooped O
data O
. O
 
This O
is O
assumed O
to O
happen O
to O
recognize O
the O
parties O
involved O
in O
the O
conversation O
by O
capturing O
the O
GUI O
of O
the O
softphone O
application O
. O
 
Babar O
comes O
with O
the O
Deflate O
algorithm O
, O
as O
used O
by O
Zlib O
, O
to O
be O
able O
to O
compress O
data O
before O
encrypting O
it O
and O
dumping O
it O
to O
disk O
. O
 
The O
data O
is O
encrypted O
with O
128-bit O
AES O
using O
the O
key O
24 O
FE O
C5 O
AD O
34 O
56 O
F7 O
F8 O
12 O
01 O
00 O
AE O
B6 O
7C O
DE O
AB O
for O
reading O
and O
writing O
files O
. O
 
The O
following O
files O
have O
been O
seen O
to O
be O
dumped O
to O
Babar O
's O
working O
directory O
under O
% O
APPDATA%\MSI O
. O
 
Stolen O
information O
will O
be O
handled O
by O
the O
Babar O
main O
instance O
, O
which O
receives O
data O
through O
six O
named O
pipes O
from O
other O
instances O
or O
hooked O
processes O
. O
 
The O
update.msi-file O
stores O
data O
collected O
by O
the O
keylogging O
module O
. O
 
It O
posesses O
a O
file O
header O
which O
among O
other O
attributes O
keeps O
system O
specific O
data O
. O
 
This O
is O
assumed O
to O
serve O
for O
mapping O
of O
logfiles O
to O
infected O
hosts O
. O
 
Log O
lines O
written O
for O
stolen O
data O
from O
browsers O
and O
the O
MSN O
messenger O
are O
built O
by O
the O
format O
string O
" O
% O
s%c%s|%s\n O
" O
, O
where O
the O
first O
string O
is O
likely O
participant1 O
of O
a O
conversation O
, O
the O
second O
string O
participant2 O
. O
 
Both O
are O
parted O
by O
the O
characters O
' O
< O
' O
or O
' O
> O
' O
depending O
on O
the O
direction O
of O
the O
conversation O
. O
 
Similar O
log O
lines O
accompany O
dumped O
sound O
data O
and O
saved O
documents O
. O
 
Sound O
data O
logs O
follow O
the O
format O
" O
A|%u|%S O
" O
, O
document O
logs O
the O
format O
" O
% O
I64i|%I64i|%I64i|%s%s|%s\n O
" O
. O
 
For O
documents O
three O
timestamps O
are O
included O
as O
well O
as O
whether O
read O
or O
write O
access O
was O
requested O
, O
indicated O
by O
' O
R O
' O
or O
' O
W O
' O
or O
' O
- O
' O
. O
 
The O
last O
placeholder O
is O
reserved O
for O
the O
filename O
. O
 
At O
the O
time O
of O
writing O
the O
content O
of O
the O
sound O
data O
log O
line O
remains O
unclear O
. O
 
The O
internet O
communication O
module O
of O
Babar O
is O
located O
in O
a O
sparate O
export O
called O
' O
FindCtxSectionStringW O
' O
, O
which O
will O
be O
invoked O
through O
remote O
thread O
injection O
at O
runtime O
. O
 
Injection O
is O
achieved O
the O
same O
way O
as O
the O
infection O
of O
child O
instances O
described O
in O
section O
3.4 O
. O
 
The O
analyzed O
sample O
of O
Babar B-Entity
has B-Action
two O
hard B-Entity
coded I-Entity
C&C I-Entity
server I-Entity
addresses I-Entity
which O
are O
included O
in O
its O
configuration O
data O
. O
 
Both O
servers O
were O
used O
to O
push B-Action
spied O
information B-Entity
onto B-Modifier
the O
remote B-Entity
site I-Entity
. O
 
It O
remains O
unclear O
though O
whether O
the O
C&Cs O
also O
served O
to O
instruct O
the O
infected O
machines O
per O
commands O
, O
as O
Babar O
does O
not O
posess O
obvious O
command O
parsing O
functionality O
. O
 
Data O
exfiltration O
is O
assumed O
to O
be O
time O
triggered O
. O
 
The O
domain O
horizons-tourisme.com O
is O
a O
legitimate O
website O
, O
operated O
by O
an O
Algerian O
travel O
agency O
, O
located O
in O
Algiers O
, O
Algeria O
. O
 
The O
website O
is O
in O
French O
and O
still O
online O
today O
. O
 
Gezelimmi.com O
is O
a O
Turkish O
domain O
, O
currently O
responding O
with O
an O
HTTP O
error O
message O
403 O
, O
access O
not O
permitted O
. O
 
Both O
domains O
appear O
to O
be O
of O
legitimate O
use O
, O
but O
compromised O
and O
abused O
to O
host O
Babar O
's O
server O
side O
infrastructure O
. O
 
At O
the O
time O
of O
writing O
the O
server O
pointed O
to O
by O
horizons-tourisme.com O
is O
still O
hosting O
left O
overs O
from O
the O
C&C O
infrastructure O
used O
by O
Babar O
. O
 
With O
directory O
traversal O
activated O
researchers O
from O
ESET O
could O
pull O
a O
minimalistic O
directory O
structure O
, O
showing O
directories O
named O
as O
follows O
. O
 
page O
| O
14 O
Obviously O
, O
the O
directory O
belonging O
to O
Babar O
is O
' O
bb28 O
' O
. O
 
' O
tfc422 O
' O
matches O
with O
strings O
found O
in O
the O
TFC O
bots O
( O
previously O
named O
NBOT O
) O
. O
 
The O
purpose O
of O
the O
' O
d13 O
' O
directory O
remains O
unknown O
, O
although O
it O
is O
assumed O
to O
serve O
for O
requests O
of O
a O
third O
currently O
unknown O
family O
. O
 
Most O
of O
the O
directories O
pulled O
from O
horizons-tourisme.com O
are O
empty O
, O
or O
contain O
empty O
files O
. O
 
The O
only O
script O
inside O
the O
bb28 O
directory O
though O
appears O
to O
be O
interesting O
. O
 
Its O
a O
.php O
- O
script O
named O
config.inc O
, O
containing O
variables O
which O
look O
familiar O
from O
Babar O
's O
config O
such O
as O
' O
user O
' O
, O
' O
i O
d O
' O
or O
' O
seq O
' O
, O
but O
also O
a O
handful O
of O
comments O
from O
the O
authors O
. O
 
At O
the O
time O
of O
writing O
two O
Babar64 O
droppers O
are O
known O
, O
dropping O
one O
implant O
each O
. O
 
They O
both O
show O
traits O
of O
the O
malware O
described O
by O
CSEC O
, O
being O
attributed O
to O
French O
intelligence O
with O
â€ž O
moderate O
certainty O
" O
[ O
2 O
] O
. O
 
The O
CSEC O
document O
mentions O
uncovering O
the O
attack O
in O
2009 O
. O
 
The O
compilation O
timestamps O
of O
the O
binaries O
date O
back O
to O
August O
2011 O
. O
 
While O
these O
can O
be O
faked O
it O
is O
still O
unlikely O
that O
the O
authors O
would O
change O
the O
2009-timestamp O
to O
a O
future O
date O
. O
 
This O
, O
and O
the O
mentioning O
of O
' O
Babar O
' O
instead O
of O
' O
Babar64 O
' O
by O
CSEC O
indicates O
that O
the O
samples O
at O
hand O
stem O
from O
a O
more O
recent O
campaign O
. O
 
Besides O
the O
project O
name O
, O
Babar64 O
also O
shares O
the O
malformed O
user O
agent O
string O
described O
in O
the O
document O
, O
where O
a O
letter O
from O
the O
MSIE O
6.0 O
name O
is O
missing O
. O
 
The O
second O
Babar64 O
binary O
comes O
with O
its O
own O
set O
of O
C&C O
servers O
. O
 
The O
first O
one O
is O
the O
legitimate O
website O
of O
AlexPetro O
Technical O
Services O
, O
a O
company O
operating O
in O
the O
oil O
and O
gas O
industry O
in O
Kairo O
, O
Egypt O
. O
 
The O
second O
domain O
is O
Iranian O
, O
allegedly O
owned O
by O
a O
web O
design O
company O
named O
Radcom O
. O
 
What O
links O
Babar64 O
to O
other O
families O
analyzed O
beforehand O
, O
such O
as O
Bunny O
or O
TFC O
( O
also O
called O
NBOT O
) O
are O
shared O
portions O
of O
source O
code O
and O
re O
- O
used O
coding O
techniques O
. O
 
The O
enumeration O
of O
anti O
- O
virus O
software O
and O
the O
code O
to O
query O
the O
system O
's O
proxy O
settings O
are O
almost O
identical O
. O
 
Furthermore O
, O
the O
samples O
at O
hand O
show O
the O
same O
partial O
API O
name O
obfuscation O
as O
Bunny O
and O
TFC O
. O
 
What O
has O
changed O
is O
the O
hashing O
algorithm O
. O
 
Also O
common O
among O
all O
of O
the O
families O
seems O
to O
be O
to O
hold O
system O
specific O
configuration O
data O
in O
memory O
at O
runtime O
, O
although O
this O
holds O
true O
for O
a O
lot O
of O
malware O
. O
 
Putting O
Babar O
, O
Bunny O
and O
TFC O
in O
context O
a O
number O
of O
conclusion O
can O
be O
drawn O
. O
 
Looking O
at O
the O
compilation O
timestamps O
and O
assuming O
they O
are O
not O
faked O
( O
which O
is O
backed O
by O
VirusTotal O
submission O
dates O
) O
, O
the O
oldest O
family O
is O
TFC O
being O
active O
throughout O
2010 O
. O
 
These O
are O
DDoS O
bots O
, O
used O
to O
build O
a O
botnet O
which O
can O
be O
utilized O
to O
attack O
adversaries O
on O
the O
internet O
. O
 
Next O
on O
the O
timeline O
is O
Babar64 O
, O
allegedly O
compiled O
middle O
of O
2011 O
and O
first O
seen O
on O
VirusTotal O
middle O
of O
2012 O
. O
 
It O
is O
believed O
that O
this O
strain O
has O
been O
active O
from O
2011 O
until O
2013 O
, O
spying O
on O
dedicated O
targets O
rather O
than O
being O
spread O
widely O
. O
 
Last O
comes O
Bunny O
, O
compiled O
second O
half O
of O
2011 O
and O
making O
its O
first O
public O
appearance O
during O
the O
analysis O
of O
the O
Adobe O
Reader O
exploit O
for O
CVE-2011 O
- O
4369 O
[ O
9 O
] O
. O
 
At O
the O
time O
when O
Bunny O
was O
spread O
through O
CVE-2011 O
- O
4369 O
, O
before O
December O
2011 O
, O
the O
vulnerability O
was O
unknown O
to O
the O
public O
. O
 
Bunny O
itself O
is O
a O
Lua O
script O
execution O
platform O
, O
not O
including O
any O
spying O
capabilities O
. O
 
All O
three O
families O
leave O
the O
impression O
of O
being O
developed O
by O
a O
team O
of O
skilled O
software O
developers O
, O
rather O
than O
being O
the O
product O
of O
a O
malware O
author O
operating O
in O
the O
criminal O
underground O
. O
 
Also O
none O
of O
the O
binaries O
makes O
attempts O
of O
hiding O
its O
intentions O
, O
which O
is O
a O
common O
trait O
among O
targeted O
malware O
. O
 
Heavy O
obfuscation O
or O
the O
use O
of O
crypters O
easily O
raises O
suspicion O
of O
heuristics O
based O
malware O
scanners O
. O
 
However O
, O
besides O
the O
CSEC O
document O
there O
was O
no O
obvious O
pointer O
found O
leading O
to O
the O
conclusion O
that O
Babar O
and O
its O
companions O
were O
set O
out O
by O
French O
inteligence O
services O
. O
 
As O
it O
is O
with O
digital O
crime O
, O
chances O
are O
high O
no O
proof O
will O
ever O
evolve O
and O
research O
will O
be O
limited O
to O
educated O
conclusions O
. O
 
The O
drawing O
of O
personal O
educated O
conclusions O
is O
left O
as O
an O
exercise O
for O
the O
interested O
reader O
. O
 
Lists O
of O
passive O
DNS O
entries O
for O
horizons-tourisme.com O
and O
gezelimmi.com O
can O
be O
found O
below O
. O
 
For O
gezelimmi.com O
. O
 
For O
horizons-tourisme.com O
. O
 
Resolve O
Location O
Network O
First O
Last O
192.185.113.148 O
US O
192.185.64.0/18 O
28.04.11 O
00:00 O
10.02.15 O
00:00 O
184.172.143.188 O
US O
184.172.128.0/18 O
23.12.06 O
00:00 O
28.04.11 O
00:00 O
212.27.35.109 O
FR O
212.27.32.0/19 O
02.08.05 O
00:00 O
23.12.06 O
00:00 O
206.41.94.190 O
CA O
206.41.94.0/24 O
24.06.05 O
00:00 O
02.08.05 O
00:00 O
 
