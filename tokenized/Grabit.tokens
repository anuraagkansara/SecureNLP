Not O
so O
long O
ago O
, O
Kaspersky O
clients O
in O
the O
United O
States O
approached O
Kaspersky O
researchers O
with O
a O
request O
to O
investigate O
a O
new O
type O
of O
malicious O
software O
that O
they O
were O
able O
to O
recover O
from O
their O
organizations O
' O
servers O
. O
 
The O
malware O
calls O
itself O
Grabit O
and O
is O
distinctive O
because O
of O
its O
versatile O
behavior O
. O
 
Every O
sample O
we O
found O
was O
different O
in O
size O
and O
activity O
from O
the O
others O
but O
the O
internal O
name O
and O
other O
identifiers O
were O
disturbingly O
similar O
. O
 
The O
timestamp O
seems O
valid O
and O
close O
to O
the O
documented O
infection O
timeline O
. O
 
Our O
documentation O
points O
to O
a O
campaign O
that O
started O
somewhere O
in O
late O
February O
2015 O
and O
ended O
in O
mid- O
March O
. O
 
As O
the O
development O
phase O
supposedly O
ended O
, O
malware O
started O
spreading O
from O
India O
, O
the O
United O
States O
and O
Israel O
to O
other O
countries O
around O
the O
globe O
. O
 
All O
of O
the O
dozens O
of O
samples O
we O
managed O
to O
collect O
were O
programmed O
in O
Windows O
machine O
32bit O
processor O
, O
over O
the O
Microsoft O
.NET O
Framework O
( O
Visual O
Basic O
/ O
C O
# O
) O
. O
 
Files O
were O
compiled O
over O
the O
course O
of O
three O
days O
, O
between O
March O
7th O
and O
9th O
of O
2015 O
. O
 
The O
following O
chart O
illustrates O
how O
the O
group O
or O
individual O
created O
the O
samples O
, O
the O
size O
of O
each O
sample O
, O
the O
time O
of O
the O
day O
when O
each O
was O
compiled O
and O
the O
time O
lapses O
between O
each O
compilation O
. O
 
The O
smallest O
sample O
( O
0.52Mb O
) O
and O
the O
largest O
( O
1.57Mb O
) O
were O
both O
created O
on O
the O
same O
day O
, O
which O
could O
indicate O
experiments O
made O
by O
the O
group O
to O
test O
features O
, O
packers O
and O
" O
dead O
code O
" O
implementations O
. O
 
Looking O
at O
the O
chart O
, O
it O
is O
interesting O
to O
see O
the O
modus O
operandi O
as O
the O
threat O
actor O
consistently O
strives O
to O
achieve O
a O
variety O
of O
samples O
, O
different O
code O
sizes O
and O
supposedly O
more O
complicated O
obfuscation O
. O
 
Along O
with O
these O
different O
sizes O
, O
activities O
and O
obfuscation O
, O
a O
serious O
encryption O
algorithm O
was O
also O
implemented O
in O
each O
one O
of O
them O
. O
 
The O
proprietary O
obfuscated O
string O
, O
methods O
and O
classes O
made O
it O
rather O
challenging O
to O
analyze O
. O
 
ASLR O
is O
also O
enabled O
, O
which O
might O
point O
to O
an O
open O
source O
RAT O
or O
even O
a O
commercial O
framework O
that O
packed O
the O
malicious O
software O
in O
a O
well O
written O
structure O
. O
 
This O
type O
of O
work O
is O
known O
as O
a O
mitigation O
factor O
for O
threat O
actors O
to O
keep O
their O
code O
hidden O
from O
analysts O
' O
eyes O
. O
 
During O
our O
research O
, O
dynamic O
analysis O
showed O
that O
the O
malicious O
software O
's O
" O
call O
home O
" O
functionality O
communicates O
over O
obvious O
channels O
and O
does O
not O
go O
the O
extra O
mile O
to O
hide O
its O
activity O
. O
 
In O
addition O
, O
the O
files O
themselves O
were O
not O
programmed O
to O
make O
any O
kind O
of O
registry O
maneuvers O
that O
would O
hide O
them O
from O
Windows O
Explorer O
. O
 
Taking O
that O
into O
an O
equation O
, O
it O
seems O
that O
the O
threat O
actors O
are O
sending O
a O
" O
weak O
knight O
in O
a O
heavy O
armor O
" O
to O
war O
. O
 
It O
means O
that O
whoever O
programmed O
the O
malware O
did O
not O
write O
all O
the O
code O
from O
scratch O
. O
 
A O
well O
trained O
knight O
would O
never O
go O
to O
war O
with O
a O
blazing O
shield O
and O
yet O
a O
stick O
for O
a O
sword O
. O
 
Looking O
into O
the O
" O
call O
home O
" O
traffic O
, O
the O
Keylogger O
functionality O
prepares O
files O
that O
act O
as O
a O
container O
for O
keyboard O
interrupts O
, O
collecting O
hostnames O
, O
application O
names O
, O
usernames O
and O
passwords O
. O
 
However O
, O
the O
interesting O
part O
lies O
here O
. O
 
The O
file O
names O
contain O
a O
very O
informative O
string O
. O
 
HawkEye_Keylogger_Execution_Confirmed_<VICTIM O
> O
3.10.2015 O
6:08:31 O
PM O
HawkEye O
is O
a O
commercial O
tool O
that O
has O
been O
in O
development O
for O
a O
few O
years O
now O
; O
it O
appeared O
in O
2014 O
, O
as O
a O
website O
called O
HawkEyeProducts O
, O
and O
made O
a O
very O
famous O
contribution O
to O
the O
hacker O
community O
. O
 
In O
the O
website O
, O
the O
product O
shows O
great O
versatility O
as O
it O
contains O
many O
types O
of O
RATs O
, O
features O
and O
functionality O
, O
such O
as O
the O
traditional O
HawkEye O
Logger O
or O
other O
types O
of O
remote O
administration O
tools O
like O
Cyborg O
Logger O
, O
CyberGate O
, O
DarkComet O
, O
NanoCore O
and O
more O
. O
 
It O
seems O
to O
support O
three O
types O
of O
delivery O
: O
FTP O
, O
SMTP O
and O
Web O
- O
Panel O
. O
 
As O
seen O
, O
the B-Entity
malware I-Entity
uses B-Action
a O
number B-Entity
of I-Entity
RATs I-Entity
to O
control B-Action
its O
victims B-Entity
or O
track B-Action
their O
activity B-Entity
. O
 
One O
of O
the O
threat O
actor O
's O
successful O
implementations O
contained O
the O
well O
- O
known O
DarkComet O
. O
 
This O
convenient O
" O
choose O
your O
RAT O
" O
functionality O
plays O
a O
very O
important O
role O
in O
the O
malware O
infection O
, O
routine O
and O
survival O
on O
the O
victim O
's O
machine O
. O
 
The O
DarkComet O
samples O
are O
more O
complicated O
than O
the O
traditional O
HawkEye O
logger O
. O
 
One O
instance O
had O
a O
random O
key O
generator O
which O
sets O
an O
initialization O
vector O
of O
the O
first O
4 O
bytes O
of O
the O
executable O
file O
and O
appends O
a O
random O
5 O
byte O
key O
that O
unpacks O
another O
PE O
file O
, O
less O
than O
20Kb O
in O
size O
. O
 
The O
PE O
file O
then O
contains O
another O
packer O
with O
an O
even O
more O
challenging O
obfuscation O
technique O
. O
 
The O
last O
sample O
we O
tested O
had O
still O
more O
complicated O
behavior O
. O
 
The O
code O
itself O
had O
the O
same O
obfuscation O
technique O
, O
though O
traffic O
was O
not O
transferring O
in O
clear O
text O
. O
 
Stolen O
data B-Entity
was O
packed B-Action
and O
sent B-Action
encrypted O
over B-Modifier
HTTP O
random B-Entity
ports I-Entity
. O
 
This O
means O
that O
the O
group O
is O
trying O
to O
produce O
other O
types O
of O
malicious O
samples O
with O
different O
RATs O
. O
 
Approximately O
10,000 O
stolen O
files O
have O
been O
collected O
. O
 
Companies O
based O
in O
Thailand O
and O
India O
had O
the O
largest O
percentage O
of O
infected O
machines O
. O
 
By O
looking O
at O
the O
stolen O
credentials O
, O
it O
is O
very O
clear O
that O
employees O
sent O
the O
malware O
to O
one O
another O
, O
as O
stolen O
host O
names O
and O
internal O
applications O
are O
the O
same O
. O
 
The O
following O
is O
the O
full O
chart O
, O
updated O
to O
May O
2015 O
. O
 
Malware O
distribution O
by O
country O
Demonstrating O
the O
effectiveness O
of O
their O
simple O
Keyloggers O
, O
one O
C2 O
( O
on O
May O
15th O
) O
maintained O
thousands O
of O
victim O
account O
credentials O
from O
hundreds O
of O
infected O
systems O
. O
 
To O
sum O
it O
up O
, O
Grabit O
threat O
actors O
did O
not O
use O
any O
sophisticated O
evasions O
or O
maneuvers O
in O
their O
dynamic O
activity O
. O
 
It O
is O
interesting O
to O
see O
the O
major O
differences O
between O
the O
core O
development O
of O
the O
malware O
and O
the O
actual O
functionality O
it O
uses O
. O
 
Some O
malware O
samples O
used O
the O
same O
hosting O
server O
, O
and O
even O
the O
same O
credentials O
. O
 
Could O
it O
be O
that O
our O
threat O
actor O
was O
in O
a O
hurry O
? O
Our O
guess O
is O
that O
we O
are O
looking O
at O
a O
group O
and O
not O
an O
individual O
. O
 
Some O
members O
of O
the O
group O
are O
more O
technical O
than O
the O
others O
and O
some O
are O
more O
security O
oriented O
and O
aware O
of O
the O
risks O
they O
might O
expose O
themselves O
to O
. O
 
Back O
to O
square O
one O
. O
 
From O
what O
we O
have O
seen O
so O
far O
, O
the B-Entity
malware I-Entity
is O
being O
delivered B-Action
as B-Modifier
a O
Microsoft B-Entity
Office I-Entity
Word I-Entity
( I-Entity
.doc I-Entity
) I-Entity
email I-Entity
attachment I-Entity
, O
containing O
a O
malicious O
macro O
called O
AutoOpen O
. O
 
This O
macro O
simply O
opens O
a O
socket O
over O
TCP O
and O
sends O
an O
HTTP O
request O
to O
a O
remote O
server O
that O
was O
hacked O
by O
the O
group O
to O
serve O
as O
a O
malware O
hub O
, O
before O
downloading O
the O
malware O
. O
 
In O
some O
cases O
the O
malicious O
macro O
was O
password O
protected O
, O
but O
our O
threat O
actor O
might O
have O
forgotten O
that O
a O
.doc O
file O
is O
actually O
an O
archive O
and O
when O
that O
archive O
is O
opened O
in O
a O
convenient O
editor O
of O
your O
choice O
, O
the O
macro O
strings O
are O
shown O
in O
clear O
- O
text O
. O
 
The O
malware B-Entity
is O
in O
plain O
view O
, O
modifying B-Action
commonplace O
registry B-Entity
entries I-Entity
, O
such O
as O
the O
startup O
configurations O
, O
and O
not O
covering O
its O
tracks O
. O
 
Its O
binaries O
are O
not O
deleted O
in O
most O
cases O
, O
and O
its O
communication O
is O
in O
clear- O
text O
, O
where O
the O
victim O
can O
sniff O
the O
communication O
and O
grab O
the O
FTP O
/ O
SMTP O
server O
's O
credentials O
. O
 
Malware O
derivatives O
are O
mainly O
located O
in O
. O
 
C:\Users\ O
< O
user O
> O
\AppData\Roaming\Microsoft O
Phishing O
extensions O
: O
.doc O
3f77403a64a2dde60c4962a6752de601d56a621a O
4E7765F3BF73AEC6E350F412B623C23D37964DFC O
Icons O
: O
.pdf O
, O
.doc O
, O
.ttf O
, O
.xls O
, O
.ppt O
, O
.msg O
, O
.exe O
Stealer O
: O
.txt O
, O
.jpeg O
, O
.eml O
Additional O
Executable O
names O
. O
 
Malware O
extensions O
: O
.zip O
or O
.exe O
IP O
Addresses O
. O
 
