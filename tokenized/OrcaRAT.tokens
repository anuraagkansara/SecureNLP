By O
Dan O
Kelly O
and O
Tom O
Lancaster O
It O
's O
every O
malware O
analyst O
's O
dream O
to O
be O
handed O
a O
sample O
which O
is O
, O
so O
far O
, O
unnamed O
by O
the O
AV O
community O
- O
especially O
when O
the O
malware O
in O
question O
may O
have O
links O
to O
a O
well O
- O
known O
APT O
group O
. O
 
In O
my O
line O
of O
work O
I O
analyse O
several O
' O
unknown O
' O
malware O
samples O
a O
week O
, O
but O
often O
it O
turns O
out O
that O
they O
are O
simply O
new O
variants O
of O
existing O
malware O
families O
. O
 
Recently O
I O
was O
fortunate O
enough O
to O
be O
handed O
something O
that O
not O
only O
had O
a O
low O
detection O
rate O
but O
, O
aside O
from O
heuristics O
, O
seemed O
to O
be O
relatively O
unknown O
to O
the O
top O
40 O
anti O
- O
virus O
companies O
. O
 
In O
this O
post O
I O
will O
walk O
you O
through O
the O
malware O
family O
we O
've O
dubbed O
" O
OrcaRAT O
" O
. O
 
First O
of O
all O
, O
it O
is O
worth O
pointing O
out O
that O
most O
of O
the O
malware O
I O
see O
on O
a O
day O
- O
to O
- O
day O
basis O
is O
espionage O
orientated O
, O
and O
very O
rarely O
do O
the O
programmers O
and O
operators O
make O
much O
effort O
to O
cover O
their O
tracks O
. O
 
The O
use O
of O
forged O
HTTP O
headers O
is O
a O
common O
occurrence O
and O
simple O
mistakes O
within O
these O
headers O
are O
frequent O
. O
 
The O
malware O
in O
question O
was O
handed O
to O
me O
by O
one O
of O
our O
threat O
intelligence O
analysts O
who O
was O
hunting O
through O
infrastructure O
associated O
with O
some O
samples O
of O
Comfoo[1 O
] O
malware O
and O
happened O
across O
a O
malware O
sample O
( O
253a704acd7952677c70e0c2d787791b8359efe2c92a5e77acea028393a85613 O
) O
he O
did O
n't O
recognise O
. O
 
He O
immediately O
took O
the O
malware O
and O
passed O
it O
through O
first O
stage O
analysis O
, O
which O
involves O
running O
the O
file O
in O
a O
sandbox O
environment O
. O
 
After O
this O
, O
he O
handed O
it O
over O
for O
more O
in O
- O
depth O
capability O
analysis O
. O
 
The O
structure O
I O
began O
by O
looking O
over O
the O
sandbox O
report O
. O
 
The O
first O
thing O
that O
drew O
my O
attention O
was O
the O
URI O
structure O
. O
 
( O
A O
screenshot O
showing O
the O
HTTP O
headers O
and O
URI O
structure O
that O
OrcaRAT O
produces O
) O
To O
those O
of O
us O
who O
are O
familiar O
with O
decoding O
data O
, O
you O
will O
notice O
that O
the O
URI O
string O
formatting O
appears O
to O
be O
a O
modified O
version O
of O
the O
Base64 O
algorithm O
. O
 
To O
understand O
this O
structure O
more O
, O
we O
must O
reverse O
engineer O
the O
functions O
that O
generate O
and O
then O
encode O
the O
data O
. O
 
Firstly O
we O
begin O
by O
analysing O
the O
routines O
that O
produce O
the O
data O
which O
is O
later O
encoded O
and O
sent O
in O
the O
HTTP O
URI O
field O
. O
 
The O
very O
first O
thing O
that O
jumped O
out O
when O
disassembling O
the O
malware O
is O
the O
simplicity O
and O
cleanliness O
of O
the O
code O
. O
 
There O
are O
also O
a O
significant O
number O
of O
Windows O
Crypto O
API[2 O
] O
functions O
imported O
by O
the O
malware O
, O
so O
we O
can O
assume O
this O
indicates O
that O
it O
uses O
encryption O
. O
 
( O
A O
screenshot O
showing O
the O
functions O
that O
are O
imported O
by O
OrcaRAT O
) O
Delving O
deeper O
in O
to O
the O
disassembly O
, O
we O
come O
across O
the O
preamble O
to O
the O
URI O
generation O
function O
. O
 
( O
A O
screenshot O
showing O
the O
decoding O
and O
generation O
of O
a O
string O
value O
) O
The O
function O
above O
uses O
Windows O
crypto O
API O
to O
generate O
a O
random O
number O
of O
6 O
bytes O
, O
then O
dynamically O
builds O
and O
appends O
the O
word O
" O
OrcaKiller O
" O
on O
to O
the O
end O
of O
this O
number O
. O
 
In O
one O
such O
example O
the O
final O
product O
was O
" O
\x61\xBA\xF4\x44\x52\xF1OrcaKiller O
" O
( O
where O
\x O
denotes O
hexadecimal O
values O
) O
. O
 
Once O
this O
value O
has O
been O
produced O
, O
the O
malware O
begins O
constructing O
the O
URI O
. O
 
With O
many O
pieces O
of O
malware O
the B-Entity
initial I-Entity
communications I-Entity
that O
it B-Entity
sends O
out B-Action
to B-Modifier
its O
command B-Entity
and I-Entity
control I-Entity
server I-Entity
( O
known O
as O
beaconing O
or O
phoning O
home O
) O
usually O
include O
pieces O
of O
information O
about O
the O
victim O
system O
. O
 
OrcaRAT O
is O
no O
exception O
. O
 
The O
randomly O
generated O
values O
noted O
above O
are O
actually O
used O
to O
encrypt B-Action
several O
pieces B-Entity
of I-Entity
information I-Entity
that I-Entity
are I-Entity
extracted I-Entity
from I-Entity
the I-Entity
system I-Entity
, O
and O
even O
the O
key O
itself O
is O
included O
. O
 
( O
A O
screenshot O
showing O
an O
encryption O
function O
used O
by O
OrcaRAT O
) O
All O
of O
the O
values O
extracted O
from O
the O
system O
are O
encrypted O
using O
the O
RC4[3 O
] O
algorithm O
and O
then O
base64 O
encoded O
. O
 
The O
RC4 O
encryption O
key O
is O
derived O
from O
an O
MD5 O
hash[4 O
] O
of O
the O
randomly O
generated O
bytes O
concatenated O
with O
the O
' O
OrcaKiller O
' O
string O
. O
 
Once O
the O
data O
has O
been O
encrypted O
it O
is O
base64 O
encoded O
. O
 
Any O
forward O
slashes O
in O
the O
base64 O
string O
are O
replaced O
with O
a O
tilde O
- O
pseudo O
code O
is O
shown O
below O
. O
 
Once O
all O
of O
the O
values O
have O
been O
encrypted O
and O
formatted O
the O
URI O
has O
the O
following O
structure O
. O
 
( O
A O
screenshot O
showing O
the O
URI O
structure O
of O
OrcaRAT O
command O
and O
control O
activity O
) O
The O
campaign O
ID O
value O
is O
constructed O
using O
a O
method O
similar O
to O
that O
for O
the O
encryption O
key O
. O
 
( O
A O
screenshot O
showing O
the O
generation O
of O
the O
first O
hidden O
string O
value O
) O
It O
would O
appear O
that O
the O
authors O
did O
not O
want O
anybody O
to O
be O
able O
to O
easily O
see O
this O
value O
. O
 
This O
now O
gives O
us O
OrcaKiller O
and O
wHaLe O
. O
 
It O
would O
appear O
that O
our O
adversary O
has O
a O
salty O
sense O
of O
humour O
. O
 
Command O
and O
control O
As O
with O
all O
malware O
, O
the O
command O
and O
control O
functions O
reveal O
the O
true O
nature O
and O
intent O
of O
the O
operators O
. O
 
Up O
until O
now O
we O
have O
only O
determined O
how O
the O
malware O
communicates O
with O
the O
server O
. O
 
We O
will O
now O
investigate O
the O
mechanisms O
that O
the O
server O
uses O
to O
communicate O
and O
interact O
with O
the O
victim O
. O
 
The O
command O
and O
control O
routine O
in O
OrcaRAT O
appears O
to O
serve O
two O
purposes O
. O
 
Interestingly O
these O
routines O
are O
split O
in O
to O
two O
branches O
. O
 
Each O
branch O
of O
command O
and O
control O
activity O
is O
determined O
by O
the O
unique O
response O
from O
the O
remote O
server O
. O
 
Command O
and O
control O
takes O
form O
of O
a O
webpage O
. O
 
Unlike O
malware O
designed O
by O
the O
well O
- O
known O
Comment O
Crew[5 O
] O
, O
this O
group O
does O
not O
hide O
these O
commands O
in O
HTML O
comments O
, O
but O
instead O
places O
them O
in O
plain O
view O
. O
 
The O
first B-Entity
set I-Entity
of I-Entity
commands I-Entity
force B-Action
the O
malware B-Entity
to B-Modifier
behave O
as B-Entity
a I-Entity
simple I-Entity
downloader I-Entity
. O
 
( O
A O
screenshot O
showing O
OrcaRAT O
parsing O
the O
HTML O
code O
behind O
a O
webpage O
) O
Upon O
downloading O
the O
webpage O
from O
the O
server O
the O
malware O
looks O
for O
specific O
sets O
of O
HTML O
tags O
. O
 
The O
first O
set O
are O
< O
P O
> O
and O
the O
terminating O
tag O
< O
/P>. O
 
Once O
the O
malware O
has O
found O
these O
tags O
it O
drops O
in O
to O
the O
first O
command O
and O
control O
function O
. O
 
The O
malware O
then O
extracts O
the O
payload O
text O
between O
the O
HTML O
tags O
and O
runs O
it O
through O
a O
decryption O
routine O
. O
 
The O
same O
encryption O
key O
that O
is O
sent O
in O
the O
URI O
string O
is O
used O
to O
decrypt O
the O
text O
. O
 
Once O
the O
payload O
text O
has O
been O
decrypted O
the O
malware O
treats O
this O
as O
a B-Entity
binary I-Entity
executable I-Entity
file I-Entity
, O
which O
is O
then O
written B-Action
to B-Modifier
the O
disk B-Entity
and O
executed B-Action
. O
 
The O
second O
set O
of O
HTML O
tags O
allows O
the O
operator O
to O
drop O
the O
malware O
in O
to O
a O
set O
of O
remote O
control O
functions O
. O
 
This O
time O
the O
malware O
searches O
for O
the O
< O
H1 O
> O
tag O
that O
is O
terminated O
by O
< O
/H1>. O
 
Once O
the O
payload O
text O
between O
these O
tags O
has O
been O
extracted O
it O
is O
then O
decrypted O
using O
the O
encryption O
key O
found O
in O
the O
URI O
string O
. O
 
The O
payload O
text O
from O
this O
page O
is O
much O
smaller O
and O
ultimately O
points O
to O
the O
command O
function O
that O
the O
operator O
has O
executed O
. O
 
( O
A O
screenshot O
showing O
the O
structure O
of O
the O
command O
and O
control O
routines O
within O
OrcaRAT O
) O
The B-Entity
command I-Entity
and I-Entity
control I-Entity
structure I-Entity
is O
fairly O
simplistic O
but O
provides B-Action
the O
operator B-Entity
with B-Modifier
access O
to B-Entity
the I-Entity
victim I-Entity
machine I-Entity
's I-Entity
filesystem I-Entity
and I-Entity
command I-Entity
line I-Entity
, O
and O
as O
such O
allows O
the O
attacker O
to O
perform O
various O
tasks O
such O
as O
executing B-Action
arbitrary O
commands B-Entity
or O
uploading B-Action
and O
downloading B-Action
files B-Entity
from B-Modifier
the O
compromised B-Entity
system I-Entity
. O
 
After O
a O
command O
and O
control O
message O
is O
received O
, O
OrcaRAT B-Entity
sends B-Action
an O
HTTP B-Entity
POST I-Entity
message I-Entity
back O
to B-Modifier
the O
command B-Entity
and I-Entity
control I-Entity
server I-Entity
. O
 
Each O
time O
that O
the O
URI O
is O
built O
it O
generates O
a O
new O
encryption O
key O
, O
showing O
that O
the O
command O
and O
control O
server O
is O
at O
least O
serving O
dynamic O
content O
. O
 
Given O
the O
command O
structure O
above O
, O
it O
is O
logical O
to O
assume O
that O
the O
command O
and O
control O
server O
requires O
an O
operator O
to O
manually O
issue O
specific O
commands O
to O
the O
victim O
workstation O
, O
with O
the O
default O
command O
likely O
being O
' O
sleep O
' O
. O
 
Given O
the O
information O
above O
we O
can O
reasonably O
assume O
that O
this B-Entity
malware I-Entity
was O
most O
likely O
designed B-Action
as B-Modifier
a O
first B-Entity
stage I-Entity
implant I-Entity
. O
 
History O
has O
shown O
that O
malware O
designed O
in O
this O
way O
is O
usually O
done O
so O
to O
allow O
the O
operator O
an O
initial O
level O
of O
access O
to O
the O
compromised O
system O
, O
usually O
for O
surveying O
the O
victim O
and O
then O
deciding O
whether O
to O
deploy O
a O
more O
capable O
and O
valuable O
second O
stage O
malware O
implant O
. O
 
Detection O
Once O
OrcaRAT O
has O
been O
delivered O
to O
a O
victim O
system O
there O
are O
a O
number O
of O
ways O
to O
detect O
it O
. O
 
Firstly O
we O
will O
cover O
disk O
detection O
using O
Yara O
. O
 
The O
rule O
below O
will O
detect O
an O
OrcaRAT O
binary O
executable O
that O
has O
been O
written O
to O
a O
compromised O
machine O
's O
disk O
. O
 
OrcaRAT O
can O
also O
be O
detected O
in O
two O
separate O
ways O
at O
the O
network O
level O
using O
a O
Snort O
or O
Suricata O
IDS O
rule O
. O
 
Detecting O
malware O
at O
different O
stages O
of O
connectivity O
can O
be O
important O
. O
 
By O
creating O
signatures O
with O
a O
nexus O
to O
the O
kill O
chain[6 O
] O
we O
can O
determine O
which O
stage O
the O
intrusion O
has O
reached O
. O
 
The O
two O
signatures O
below O
will O
indicate O
whether O
the O
intrusion O
has O
reached O
the O
command O
and O
control O
or O
action O
- O
on O
phases O
. O
 
Snort O
. O
 
alert O
tcp O
any O
any O
- O
> O
any O
any O
( O
msg:"::[PwC O
CTD O
] O
: O
: O
- O
OrcaRAT O
implant O
check O
- O
in O
" O
; O
flow O
: O
established O
, O
from_client O
; O
urilen O
: O
67<>170 O
; O
content:"User O
- O
Agent O
: O
Mozilla/4.0 O
( O
compatible\ O
; O
MSIE O
8.0\ O
; O
Windows O
NT O
5.1\ O
; O
Trident/4.0\ O
; O
.NET O
CLR O
2.0.50727\ O
; O
.NET O
CLR O
3.0.04506.30\ O
; O
.NET4.0C\ O
; O
.NET4.0E O
) O
" O
; O
http_header O
; O
content:"GET O
" O
; O
http_method O
; O
pcre:"/^\/[A O
- O
Za O
- O
z0 O
- O
9+~= O
] O
{ O
14,18}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{33,38}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{6,9}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{5,50}\/[A O
- O
Za O
- O
z0- O
9+~=]{5,50}$/U O
" O
; O
sid O
: O
YOUR_SID O
; O
rev:1 O
; O
) O
alert O
tcp O
any O
any O
- O
> O
any O
any O
( O
msg:"::[PwC O
CTD O
] O
: O
: O
- O
OrcaRAT O
implant O
C2 O
confirmation O
response O
" O
; O
flow O
: O
established O
, O
from_client O
; O
urilen O
: O
67<>170 O
; O
content:"User O
- O
Agent O
: O
Mozilla/4.0 O
( O
compatible\ O
; O
MSIE O
8.0\ O
; O
Windows O
NT O
5.1\ O
; O
Trident/4.0\ O
; O
.NET O
CLR O
2.0.50727\ O
; O
.NET O
CLR O
3.0.04506.30\ O
; O
.NET4.0C\ O
; O
.NET4.0E O
) O
" O
; O
http_header O
; O
content:"POST O
" O
; O
http_method O
; O
pcre:"/^\/[A O
- O
Za O
- O
z0 O
- O
9+~= O
] O
{ O
14,18}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{33,38}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{6,9}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{5,50}\/[A O
- O
Za O
- O
z0- O
9+~=]{5,50}$/U O
" O
; O
sid O
: O
YOUR_SID O
; O
rev:1 O
; O
) O
Suricata O
. O
 
alert O
http O
any O
any O
- O
> O
any O
any O
( O
msg:"::[PwC O
CTD O
] O
: O
: O
- O
OrcaRAT O
implant O
check O
- O
in O
" O
; O
flow O
: O
established O
, O
from_client O
; O
urilen O
: O
67<>170 O
; O
content O
: O
" O
Mozilla/4.0 O
( O
compatible\ O
; O
MSIE O
8.0\ O
; O
Windows O
NT O
5.1\ O
; O
Trident/4.0\ O
; O
.NET O
CLR O
2.0.50727\ O
; O
.NET O
CLR O
3.0.04506.30\ O
; O
.NET4.0C\ O
; O
.NET4.0E O
) O
" O
; O
http_user_agent O
; O
content:"GET O
" O
; O
http_method O
; O
pcre:"/^\/[A O
- O
Za O
- O
z0 O
- O
9+~= O
] O
{ O
14,18}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{33,38}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{6,9}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{5,50}\/[A O
- O
Za O
- O
z0- O
9+~=]{5,50}$/U O
" O
; O
sid O
: O
YOUR_SID O
; O
rev:1 O
; O
) O
alert O
http O
any O
any O
- O
> O
any O
any O
( O
msg:"::[PwC O
CTD O
] O
: O
: O
- O
OrcaRAT O
implant O
C2 O
confirmation O
response O
" O
; O
flow O
: O
established O
, O
from_client O
; O
urilen O
: O
67<>170 O
; O
content O
: O
" O
Mozilla/4.0 O
( O
compatible\ O
; O
MSIE O
8.0\ O
; O
Windows O
NT O
5.1\ O
; O
Trident/4.0\ O
; O
.NET O
CLR O
2.0.50727\ O
; O
.NET O
CLR O
3.0.04506.30\ O
; O
.NET4.0C\ O
; O
.NET4.0E O
) O
" O
; O
http_user_agent O
; O
content:"POST O
" O
; O
http_method O
; O
pcre:"/^\/[A O
- O
Za O
- O
z0 O
- O
9+~= O
] O
{ O
14,18}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{33,38}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{6,9}\/[A O
- O
Za O
- O
z0 O
- O
9+~=]{5,50}\/[A O
- O
Za O
- O
z0- O
9+~=]{5,50}$/U O
" O
; O
sid O
: O
YOUR_SID O
; O
rev:1 O
; O
) O
Appendix O
A O
: O
Samples O
of O
Orca O
RAT O
. O
 
Appendix O
B O
: O
Related O
indicators O
 
