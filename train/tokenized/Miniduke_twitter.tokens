At O
the O
end O
of O
April O
Microsoft O
announced O
that O
a O
vulnerability O
in O
Word O
was O
actively O
being O
exploited O
. O
 
This O
vulnerability O
occurred O
in O
parsing O
RTF O
files O
and O
was O
assigned O
CVE-2014-1761 O
, O
a O
thorough O
analysis O
of O
which O
can O
be O
found O
on O
the O
HP O
Security O
Research O
blog O
. O
 
We O
have O
since O
seen O
multiple O
cases O
where O
this B-Entity
exploit I-Entity
is O
used O
to O
deliver B-Action
malware B-Entity
and O
one O
was O
particularly O
interesting O
as O
it O
contained O
a O
new O
variant O
of O
MiniDuke O
( O
also O
known O
as O
Win32/SandyEva O
) O
. O
 
MiniDuke O
was O
first O
discussed O
by O
Kaspersky O
in O
March O
2013 O
in O
their O
paper O
The O
MiniDuke O
Mystery O
: O
PDF O
0- O
day O
Government O
Spy O
Assembler O
0x29A O
Micro O
Backdoorand O
shortly O
after O
in O
a O
paper O
by O
Bitdefender O
. O
 
Some O
of O
the O
characteristics O
of O
MiniDuke B-Entity
- O
such O
as O
its O
small O
size O
( O
20 O
KB O
) O
, O
its O
crafty O
use O
of O
assembly O
programming O
, O
and O
the O
use B-Action
of O
zero-day B-Entity
exploits I-Entity
for B-Modifier
distribution B-Entity
- O
made O
it O
an O
intriguing O
threat O
. O
 
Although O
the O
backdoor O
is O
still O
quite O
similar O
to O
its O
previous O
versions O
, O
some O
important O
changes O
were O
made O
since O
last O
year O
, O
the O
most O
notable O
being O
the O
introduction O
of O
a B-Entity
secondary I-Entity
component I-Entity
written I-Entity
in I-Entity
JScript I-Entity
to O
contact B-Action
a B-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
via B-Modifier
Twitter B-Entity
. O
 
The O
exploit O
document O
was O
named O
Proposal-Cover-Sheet-English.rtf O
and O
is O
quite O
bland O
when O
compared O
to O
the O
documents O
that O
were O
used O
in O
2013 O
, O
which O
were O
of O
a O
political O
nature O
. O
 
We O
received O
the O
document O
on O
April O
8th O
, O
only O
three O
days O
after O
the O
compilation O
of O
the O
MiniDuke O
payload O
, O
dated O
April O
5th O
in O
the O
PE O
header O
. O
 
The O
payload O
remains O
quite O
small O
at O
only O
24 O
KB O
. O
 
The O
functionality O
of O
the B-Entity
shellcode I-Entity
which O
is B-Action
executed I-Action
by B-Modifier
triggering B-Entity
the I-Entity
vulnerability I-Entity
is O
rather O
simple O
and O
straightforward O
. O
 
After O
decrypting O
itself O
and O
obtaining O
the O
addresses O
of O
some O
functions O
exported O
by O
kernel32.dll O
, O
it B-Entity
decrypts B-Action
and I-Action
drops I-Action
the B-Entity
payload I-Entity
in B-Modifier
the B-Entity
% I-Entity
TEMP I-Entity
% I-Entity
directory I-Entity
in I-Entity
a I-Entity
file I-Entity
named I-Entity
'' I-Entity
a.l I-Entity
'' I-Entity
which O
is B-Action
subsequently I-Action
loaded I-Action
by B-Modifier
calling B-Entity
kernel32 I-Entity
! I-Entity
LoadLibraryA I-Entity
. O
 
An O
interesting O
thing O
about O
the O
shellcode O
is O
that O
before O
transferring O
control O
to O
any O
API O
function O
it B-Entity
checks O
the O
first O
bytes O
of O
the O
function O
in O
order O
to O
detect B-Action
hooks B-Entity
and I-Entity
debugger I-Entity
breakpoints I-Entity
which I-Entity
may I-Entity
be I-Entity
set I-Entity
by I-Entity
security I-Entity
software I-Entity
and I-Entity
monitoring I-Entity
tools I-Entity
. O
 
If O
any O
of O
these O
are O
found O
the O
shellcode O
skips O
the O
first O
5 O
bytes O
of O
the O
function O
being O
called O
by O
manually O
executing O
prologue O
instructions O
( O
mov O
edi O
, O
edi O
; O
push O
ebp O
; O
mov O
ebp O
, O
esp O
) O
and O
then O
jumping O
to O
the O
function O
code O
as O
illustrated O
below O
. O
 
The O
next O
graph O
presents O
the O
execution O
flow O
of O
this O
malware O
when O
the O
exploitation O
is O
successful O
. O
 
As O
mentioned O
previously O
this O
version O
of O
the O
MiniDuke O
payload O
comes O
with O
two O
modules O
which O
we O
refer O
to O
as O
the O
main O
module O
and O
the O
TwitterJS O
module O
. O
 
Once O
MiniDuke O
receives O
control O
it O
checks O
that O
the O
host O
process O
is O
not O
rundll32.exe O
and O
whether O
the O
current O
directory O
is O
% O
TEMP O
% O
. O
 
If O
either O
of O
those O
conditions O
is O
met O
the O
malware O
assumes O
it O
is O
run O
for O
the O
first O
time O
and O
it B-Entity
proceeds B-Action
with B-Modifier
its B-Entity
installation I-Entity
onto I-Entity
the I-Entity
system I-Entity
. O
 
MiniDuke B-Entity
gathers B-Action
information B-Entity
about I-Entity
the I-Entity
system I-Entity
and O
encrypts B-Action
its B-Entity
configuration I-Entity
based B-Modifier
on I-Modifier
that B-Entity
information I-Entity
, O
a O
method O
also O
used O
by O
OSX/Flashback O
( O
this O
process O
is O
called O
watermarking O
by O
Bitdefender O
) O
. O
 
The O
end O
result O
is O
that O
it O
is O
impossible B-Action
to I-Action
retrieve I-Action
the B-Entity
configuration I-Entity
of I-Entity
an I-Entity
encrypted I-Entity
payload I-Entity
if B-Modifier
analyzing B-Entity
it I-Entity
on I-Entity
a I-Entity
different I-Entity
computer I-Entity
. O
 
The O
information O
collected O
on O
infection O
has O
not O
changed O
since O
the O
previous O
version O
and O
consists O
of O
the O
following O
values O
: O
Once O
the B-Entity
encrypted I-Entity
version I-Entity
of I-Entity
the I-Entity
malware I-Entity
is B-Action
created I-Action
, O
it B-Entity
is B-Action
written I-Action
into B-Modifier
a B-Entity
file I-Entity
in I-Entity
the I-Entity
% I-Entity
ALLUSERSPROFILE I-Entity
% I-Entity
\Application I-Entity
Data I-Entity
directory I-Entity
. O
 
The O
name O
of O
the O
file O
is O
randomly O
picked O
from O
the O
following O
values O
( O
you O
can O
find O
this O
listing O
and O
those O
of O
the O
next O
screenshots O
on O
the O
VirusRadar O
description O
: O
The O
filename O
extension O
is O
also O
picked O
randomly O
from O
the O
following O
list O
: O
To O
persist B-Action
on B-Modifier
the B-Entity
infected I-Entity
system I-Entity
after B-Modifier
reboots B-Entity
, O
the B-Entity
malware I-Entity
creates B-Action
a B-Entity
hidden I-Entity
.LNK I-Entity
file I-Entity
in B-Modifier
the B-Entity
'' I-Entity
Startup I-Entity
'' I-Entity
directory I-Entity
pointing O
to O
the O
modified O
main O
module O
. O
 
The O
name O
of O
the O
.LNK O
 
file O
is O
randomly O
drawn O
from O
the O
following O
values O
: O
The B-Entity
.LNKfile I-Entity
 
is B-Action
created I-Action
using B-Modifier
a B-Entity
COM I-Entity
object I-Entity
with B-Modifier
the B-Entity
IShellLinkA I-Entity
interface I-Entity
and O
contains O
the O
following O
command O
: O
'' O
C O
: O
\Windows\system32\rundll32.exe O
% O
pathtomainmodule O
% O
, O
exportfunction O
'' O
Which O
gives O
something O
like O
: O
'' O
C O
: O
\Windows\system32\rundll32.exe O
C O
: O
\DOCUME~1\ALLUSE~1\APPLIC~1\data.cat O
, O
IlqUenn O
'' O
. O
 
When O
the B-Entity
malware I-Entity
is B-Action
loaded I-Action
by O
rundll32.exe B-Entity
and O
the O
current O
directory O
is O
n't O
% O
TEMP O
% O
, O
the B-Entity
malware I-Entity
starts O
with O
gathering B-Action
the B-Entity
same I-Entity
system I-Entity
information I-Entity
as I-Entity
described I-Entity
in I-Entity
the I-Entity
'' I-Entity
Installation I-Entity
'' I-Entity
section I-Entity
to B-Modifier
decrypt B-Entity
configuration I-Entity
information I-Entity
. O
 
As O
with O
the O
previous O
version O
of O
MiniDuke O
, O
it O
checks O
for O
the O
presence O
of O
the O
following O
processes O
in O
the O
system O
: O
If O
any O
of O
these O
are O
found O
in O
the O
system O
the O
configuration O
information O
will O
be O
decrypted O
incorrectly O
, O
i.e O
. O
 
the O
malware O
will O
run O
on O
the O
system O
without O
any O
communication O
to O
C O
& O
C O
servers O
. O
 
If O
the O
configuration O
data O
is O
decrypted O
correctly O
, O
MiniDuke B-Entity
retrieves B-Action
the B-Entity
Twitter I-Entity
page I-Entity
of I-Entity
@ I-Entity
FloydLSchwartz I-Entity
in B-Modifier
search B-Entity
of I-Entity
URLs I-Entity
by I-Entity
which I-Entity
to I-Entity
reach I-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
. O
 
It O
looks O
for O
the O
tag O
'' O
X O
) O
) O
) O
'' O
on O
the O
page O
( O
MiniDuke O
was O
searching O
for O
'' O
uri O
! O
'' O
in O
previous O
samples O
) O
and O
if O
the O
tag O
is O
found O
it O
decrypts O
a O
URL O
from O
the O
data O
that O
follows O
it O
. O
 
The O
Twitter O
account O
@ O
FloydLSchwartz O
does O
exist O
but O
has O
only O
retweets O
and O
no O
strings O
with O
the O
special O
tag O
. O
 
As O
the O
next O
step O
, O
MiniDuke B-Entity
gathers B-Action
the B-Entity
following I-Entity
information I-Entity
from B-Modifier
the B-Entity
infected I-Entity
systems I-Entity
: O
This B-Entity
information I-Entity
is B-Action
then I-Action
sent I-Action
to B-Modifier
the B-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
along O
with O
the O
request B-Action
to B-Modifier
download B-Entity
a I-Entity
payload I-Entity
. O
 
The B-Entity
final I-Entity
URL I-Entity
used B-Action
to B-Modifier
communicate B-Entity
with I-Entity
the I-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
looks O
like O
this O
: O
< O
urlstart O
> O
/create.php O
? O
< O
rndparam O
> O
= O
< O
systeminfo O
> O
Those O
tokens O
are O
derived O
as O
follows O
: O
An O
example O
of O
such O
a O
URL O
is O
given O
below O
: O
The B-Entity
payload I-Entity
is B-Action
downloaded I-Action
in B-Modifier
the B-Entity
file I-Entity
named I-Entity
'' I-Entity
fdbywu I-Entity
'' I-Entity
using B-Modifier
the B-Entity
urlmon I-Entity
! I-Entity
URLDownloadToFileA I-Entity
API I-Entity
: O
The O
downloaded O
payload O
is O
a O
fake O
GIF8 O
file O
containing O
encrypted O
executable O
. O
 
The O
malware O
processes O
the O
downloaded O
file O
in O
the O
same O
way O
as O
previous O
samples O
of O
MiniDuke O
: O
it B-Entity
verifies B-Action
the B-Entity
integrity I-Entity
of I-Entity
the I-Entity
file I-Entity
using B-Modifier
RSA-2048 B-Entity
, O
then O
decrypts O
it O
, O
stores O
in O
a O
file O
and O
finally O
executes B-Action
it B-Entity
. O
 
The B-Entity
RSA-2048 I-Entity
public I-Entity
key I-Entity
to O
verify B-Action
integrity B-Entity
of I-Entity
the I-Entity
executable I-Entity
inside I-Entity
the I-Entity
GIF I-Entity
file I-Entity
is O
the O
same O
as O
in O
the O
previous O
version O
of O
MiniDuke O
. O
 
In O
the O
event O
that O
MiniDuke O
is O
unable O
to O
retrieve O
a O
C O
& O
C O
URL O
from O
this O
account O
, O
it O
generates O
a O
username O
to O
search O
for O
based O
on O
the O
current O
date O
. O
 
The O
search O
query O
changes O
roughly O
every O
seven O
days O
and O
is O
similar O
to O
the O
backup O
mechanism O
in O
previous O
versions O
that O
was O
using O
Google O
searches O
. O
 
A O
Python O
implementation O
of O
the O
algorithm O
can O
be O
found O
in O
Appendix O
B O
. O
 
The O
TwitterJS O
module O
is O
extracted O
by O
creating B-Action
a B-Entity
copy I-Entity
of I-Entity
the I-Entity
Windows I-Entity
DLL I-Entity
cryptdll.dll I-Entity
, O
injecting O
a O
block O
of O
code O
into O
it O
and O
redirecting O
the O
exported O
functions O
to O
this O
code O
. O
 
Here O
is O
how O
the O
export O
address O
table O
of O
the O
patched O
binary O
looks O
after O
modifications O
. O
 
This B-Entity
file I-Entity
is B-Action
then I-Action
stored I-Action
in B-Modifier
an B-Entity
Alternate I-Entity
Data I-Entity
Stream I-Entity
( I-Entity
ADS I-Entity
) I-Entity
in I-Entity
NTUSER.DAT I-Entity
in I-Entity
the I-Entity
% I-Entity
USERPROFILE I-Entity
% I-Entity
folder I-Entity
. O
 
Finally O
this B-Entity
DLL I-Entity
is B-Action
registered I-Action
as B-Modifier
the B-Entity
Open I-Entity
command I-Entity
when I-Entity
a I-Entity
drive I-Entity
is I-Entity
open I-Entity
, O
which O
has O
the O
effect O
of O
starting B-Action
the B-Entity
bot I-Entity
every B-Modifier
time I-Modifier
the B-Entity
user I-Entity
opens I-Entity
a I-Entity
disk I-Entity
drive I-Entity
. O
 
Below O
you O
can O
find O
the O
content O
of O
the O
init.cmd O
script O
used O
by O
MiniDuke B-Entity
to O
install B-Action
TwitterJS B-Entity
module I-Entity
onto B-Modifier
the B-Entity
system I-Entity
. O
 
When O
loaded O
, O
TwitterJS O
instantiates O
the O
JScript O
COM O
object O
and O
decrypts O
a O
JScript O
file O
containing O
the O
core O
logic O
of O
the O
module O
. O
 
Prior O
to O
executing O
it O
, O
MiniDuke B-Entity
applies B-Action
a B-Entity
light I-Entity
encoding I-Entity
to B-Modifier
the B-Entity
script I-Entity
: O
The O
next O
images O
show O
the O
result O
of O
two O
separate O
obfuscations O
, O
we O
can O
see O
that O
the O
variables O
have O
different O
values O
. O
 
This B-Entity
is O
probably O
done O
to O
thwart B-Action
security B-Entity
systems I-Entity
that I-Entity
scan I-Entity
at I-Entity
the I-Entity
entry I-Entity
points I-Entity
of I-Entity
the I-Entity
JScript I-Entity
engine I-Entity
. O
 
The O
purpose O
of O
this B-Entity
script I-Entity
is O
to O
use B-Action
Twitter B-Entity
to B-Modifier
find B-Entity
a I-Entity
C I-Entity
& I-Entity
C I-Entity
and O
retrieve B-Action
JScript B-Entity
code I-Entity
to I-Entity
execute I-Entity
. O
 
It O
first O
generates O
a O
Twitter O
user O
to O
search O
for O
; O
this O
search O
term O
changes O
every O
7 O
days O
and O
is O
actually O
a O
match O
to O
the O
real O
account O
name O
, O
not O
the O
Twitter O
account O
name O
. O
 
The O
bot O
then O
visits O
the O
Twitter O
profiles O
returned O
by O
the O
search O
and O
looks O
for O
links O
that O
end O
with O
'' O
.xhtml O
 
'' O
. O
 
When O
one O
is O
found O
, O
it O
replaces O
'' O
.xhtml O
 
'' O
with O
'' O
.php O
 
'' O
and O
fetches O
that O
link O
. O
 
Information O
about O
the O
computer O
is O
embedded O
in O
the O
Accept O
HTTP O
header O
. O
 
The O
first O
link O
on O
the O
retrieved O
page O
should O
contain O
base64 O
data O
; O
the O
name O
attribute O
of O
the O
link O
is O
used O
as O
a O
rolling O
XOR O
key O
to O
decrypt O
the O
JScript O
code O
. O
 
Finally O
, O
MiniDuke O
calculates O
a O
hash O
of O
the O
fetched O
script O
and O
compares O
it O
with O
a O
hardcoded O
hash O
in O
the O
TwitterJS O
script O
. O
 
If O
they O
match O
, O
the O
fetched O
script O
is O
executed O
by O
calling O
eval O
( O
) O
. O
 
The O
code O
hashing O
algorithm O
used O
by O
the O
component O
looks O
very O
much O
like O
SHA-1 O
but O
outputs O
different O
hashes O
( O
you O
can O
find O
the O
complete O
implementation O
in O
Appendix O
B O
. O
 
We O
decided O
to O
search O
for O
what O
was O
changed O
in O
the O
algorithm O
; O
one O
of O
our O
working O
hypotheses O
was O
that O
the O
algorithm O
might O
have O
been O
altered O
to O
make O
collisions O
feasible O
. O
 
We O
could O
n't O
find O
an O
obvious O
difference O
; O
all O
the O
constants O
and O
the O
steps O
of O
the O
algorithm O
were O
as O
expected O
. O
 
Then O
we O
noticed O
that O
for O
short O
messages O
only O
the O
second O
32-bit O
word O
was O
different O
when O
compared O
to O
the O
original O
SHA-1 O
. O
 
By O
examining O
how O
this O
2nd O
word O
was O
generated O
we O
finally O
discovered O
that O
this O
was O
caused O
by O
a O
scope O
issue O
. O
 
As O
shown O
below O
the O
SHA-1 O
function O
used O
a O
variable O
named O
f O
: O
the O
function O
Z O
( O
) O
is O
then O
called O
which O
also O
uses O
a O
variable O
named O
f O
without O
the O
var O
keyword O
, O
causing O
it O
to O
be O
treated O
as O
a O
global O
variable O
rather O
than O
local O
to O
the O
function O
. O
 
The O
end O
result O
is O
that O
the O
value O
of O
f O
is O
also O
changed O
in O
the O
SHA-1 O
function O
which O
affects O
the O
value O
of O
the O
2nd O
word O
for O
that O
round O
and O
ultimately O
the O
whole O
hash O
for O
long O
messages O
. O
 
A O
likely O
explanation O
of O
how O
this O
problem O
came O
to O
be O
is O
that O
the O
variable O
names O
were O
changed O
to O
single O
letters O
using O
an O
automated O
tool O
prior O
to O
embedding O
it O
in O
the O
payload O
. O
 
The O
2 O
f O
variables O
probably O
had O
different O
names O
in O
the O
original O
script O
which O
avoided O
the O
issue O
. O
 
So O
this O
leaves O
us O
with O
two O
takeaways O
: O
1 O
) O
The O
difference O
in O
the O
hashing O
algorithm O
was O
unintentional O
and O
2 O
) O
Always O
declare O
your O
local O
variables O
with O
the O
var O
keyword O
. O
 
; O
- O
) O
We O
generated O
the O
list O
of O
Twitter O
search O
terms O
for O
2013-2014 O
and O
checked O
if O
any O
of O
those O
were O
registered O
. O
 
At O
the O
moment O
only O
one O
exists O
, O
@ O
AA2ADcAOAA O
, O
which O
is O
the O
TwitterJS O
account O
that O
was O
generated O
between O
August O
21st O
and O
27th O
2013 O
. O
 
This O
account O
has O
no O
tweets O
. O
 
In O
an O
effort O
to O
discover O
potential O
victims O
, O
we O
registered O
the O
Twitter O
accounts O
corresponding O
to O
the O
current O
week O
both O
for O
the O
main O
and O
TwitterJS O
components O
and O
set O
up O
tweets O
with O
encrypted O
URLs O
so O
that O
an O
infected O
computer O
would O
reach O
out O
to O
our O
server O
. O
 
So O
far O
we O
have O
received O
connections O
via O
the O
TwitterJS O
accounts O
from O
four O
computers O
located O
in O
Belgium O
, O
France O
and O
the O
UK O
. O
 
We O
have O
contacted O
national O
CERTs O
to O
notify O
the O
affected O
parties O
. O
 
We O
detect O
the O
RTF O
exploit O
document O
as O
Win32/Exploit.CVE-2014-1761.D O
and O
the O
MiniDuke O
components O
as O
Win32/SandyEva.G O
. O
 
