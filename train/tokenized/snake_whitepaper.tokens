One O
of O
the O
questions O
which O
comes O
up O
in O
the O
months O
after O
big O
security O
whitepaper O
disclosures O
is O
: O
where O
are O
they O
now O
? O
In O
other O
words O
, O
what O
happened O
to O
the O
operators O
, O
tools O
, O
and O
infrastructure O
which O
was O
revealed O
in O
the O
reports O
, O
blog-posts O
, O
and O
press O
interviews O
. O
 
Did O
they O
continue O
on O
as O
before O
, O
did O
they O
re-build O
the O
disclosed O
infrastructure O
and O
tools O
, O
did O
they O
go O
away O
and O
get O
jobs O
in O
another O
line O
of O
work O
? O
In O
some O
cases O
, O
the O
disclosure O
had O
little O
, O
if O
any O
impact O
on O
the O
operation O
. O
 
For O
example O
, O
after O
the O
McAfee O
ShadyRAT O
report O
in O
2011 O
, O
there O
was O
absolutely O
no O
change O
in O
the O
attacks O
from O
the O
group O
behind O
this O
. O
 
However O
, O
when O
Mandiant O
released O
their O
APT1 O
report O
in O
2013 O
, O
there O
was O
a O
noticeable O
reduction O
in O
activity O
from O
the O
group O
– O
and O
much O
of O
the O
tools O
and O
infrastructure O
has O
not O
been O
seen O
since O
. O
 
In O
the O
September O
2010 O
issue O
of O
Foreign O
Affairs O
magazine O
, O
former O
US O
Deputy O
Secretary O
of O
Defense O
William O
J. O
Lynn O
discussed O
a O
cyber-attack O
which O
happened O
two O
years O
previously O
on O
the O
DoD's O
classified O
computer O
networks O
. O
 
Lynn O
described O
how O
a O
foreign O
intelligence O
agency O
planted O
malicious O
code O
on O
the O
networks O
with O
the O
aim O
of O
transferring O
data O
to O
servers O
under O
their O
control O
. O
 
The O
article O
included O
the O
now O
oft-quoted O
phrase O
'digital O
beachhead O
' O
to O
describe O
what O
was O
undoubtedly O
a O
significant O
compromise O
of O
US O
military O
systems O
. O
 
Further O
reports O
in O
the O
press O
kept O
the O
story O
alive O
in O
2011 O
, O
but O
since O
then O
this O
threat O
has O
received O
remarkably O
little O
attention O
. O
 
However O
, O
the O
operation O
behind O
the O
attacks O
has O
continued O
with O
little O
modification O
to O
the O
tools O
and O
techniques O
, O
in O
spite O
of O
the O
widespread O
attention O
a O
few O
years O
ago O
. O
 
They B-Entity
use O
highly O
sophisticated O
malware O
tools O
to O
maintain B-Action
persistent B-Entity
access I-Entity
to I-Entity
their I-Entity
targets I-Entity
. O
 
These B-Entity
tools I-Entity
can O
be B-Action
used I-Action
for B-Modifier
covert B-Entity
communications I-Entity
in B-Modifier
a B-Entity
number I-Entity
of I-Entity
different I-Entity
modes I-Entity
, O
some B-Entity
of I-Entity
which I-Entity
present B-Action
significant B-Entity
challenges I-Entity
for I-Entity
traditional I-Entity
security I-Entity
technologies I-Entity
to I-Entity
detect I-Entity
. O
 
There O
are O
some O
threats O
which O
come O
and O
go O
, O
whilst O
there O
are O
others O
which O
are O
permanent O
features O
of O
the O
landscape O
. O
 
In O
this O
paper O
, O
we O
describe O
the O
tools O
and O
techniques O
of O
one O
of O
the O
most O
sophisticated O
and O
persistent O
threats O
we O
track O
. O
 
We O
hope O
this O
will O
help O
victims O
identify O
intrusions O
and O
understand O
their O
need O
to O
improve O
defences O
. O
 
Cyber O
security O
is O
a O
collaborative O
effort O
– O
the O
operation O
described O
in O
this O
paper O
again O
raises O
the O
bar O
for O
the O
security O
community O
in O
their O
efforts O
to O
keep O
up O
with O
the O
attackers O
in O
cyber-space O
. O
 
When O
antivirus O
back-end O
classification O
platforms O
can O
not O
identify O
a O
malware O
family O
for O
an O
analysed O
malicious O
sample O
, O
they O
assign O
generic O
names O
, O
such O
as O
'' O
Trojan O
Horse O
'' O
or O
'' O
Agent O
'' O
. O
 
The O
variant O
letters O
are O
also O
assigned O
automatically O
, O
by O
using O
hexavigesimal O
( O
or O
Base26 O
) O
notation O
. O
 
That O
is O
, O
the O
variant O
letters O
are O
auto-assigned O
starting O
from O
'' O
A O
'' O
, O
followed O
with O
'' O
B O
'' O
, O
and O
so O
on O
until O
'' O
Z O
'' O
. O
 
Next O
comes O
'' O
AA O
'' O
, O
'' O
AB O
'' O
and O
so O
on O
, O
until O
'' O
ZZ O
'' O
. O
 
After O
that O
, O
the O
variant O
letters O
start O
from O
'' O
AAA O
'' O
, O
'' O
AAB O
'' O
and O
so O
on O
, O
until O
'' O
ZZZ O
'' O
. O
 
Back O
in O
2008 O
an O
unknown O
malicious O
file O
was O
discovered O
and O
auto-classified O
as O
'' O
Agent.BTZ O
'' O
, O
meaning O
it O
was O
registered O
as O
unknown O
malicious O
sample O
# O
1,898 O
in O
an O
anti-virus O
classification O
system O
. O
 
It O
was O
n't O
given O
an O
actual O
name O
, O
only O
a O
generic O
one O
. O
 
Meanwhile O
, O
internally O
the O
authors O
behind O
this O
malware O
were O
using O
their O
own O
naming O
systems O
- O
with O
specific O
titles O
for O
their O
file O
components O
and O
projects O
such O
as O
'' O
snake O
'' O
, O
'' O
uroburos O
'' O
, O
'' O
sengoku O
'' O
, O
and O
'' O
snark O
'' O
used O
to O
denote O
variants O
of O
their O
framework O
. O
 
A O
recent O
report O
from O
German O
security O
company O
GData O
described O
a O
sample O
from O
the O
'' O
uroburos O
'' O
variant O
of O
this O
framework O
. O
 
Their O
report O
revealed O
the O
complex O
nature O
of O
this O
malware O
family O
, O
and O
showed O
that O
the O
operation O
behind O
'' O
Agent.BTZ O
'' O
has O
continued O
. O
 
As O
a O
result O
of O
this O
disclosure O
, O
we O
are O
also O
releasing O
our O
own O
technical O
analysis O
of O
the O
threat O
, O
including O
a O
timeline O
of O
known O
samples O
, O
known O
Command-and-Control O
( O
C O
& O
C O
) O
servers O
, O
and O
other O
indicators O
to O
aid O
investigators O
in O
discovering O
attacks O
. O
 
Reverse O
engineering O
of O
recent O
malware O
samples O
shows O
these O
to O
be O
much O
more O
advanced O
variants O
of O
Agent.BTZ O
, O
though O
still O
sharing O
many O
similarities O
and O
encryption O
methods O
with O
the O
original O
. O
 
Further O
investigation O
allowed O
us O
to O
locate O
related O
samples O
compiled O
between O
2006 O
and O
2014 O
, O
and O
spanning O
across O
several O
distinctive O
generations O
. O
 
The O
first O
section O
of O
this O
report O
gives O
an O
overview O
of O
the O
samples O
collected O
, O
where O
they O
were O
reported O
and O
the O
timelines O
derived O
from O
their O
analysis O
. O
 
Snake O
's O
architecture O
turned O
out O
to O
be O
quite O
interesting O
. O
 
We O
have O
identified O
two B-Entity
distinct I-Entity
variants I-Entity
, O
both O
highly O
flexible O
but O
with O
two O
different O
techniques O
for O
establishing B-Action
and I-Action
maintaining I-Action
a B-Entity
presence I-Entity
on B-Modifier
the B-Entity
target I-Entity
system I-Entity
. O
 
In O
general O
, O
its O
operation O
relies O
on O
kernel O
mode O
drivers O
, O
making O
it O
a O
rootkit O
. O
 
It B-Entity
is O
designed O
to O
covertly B-Action
install I-Action
a B-Entity
backdoor I-Entity
on B-Modifier
a B-Entity
compromised I-Entity
system I-Entity
, O
hide B-Action
the B-Entity
presence I-Entity
of I-Entity
its I-Entity
components I-Entity
, O
provide B-Action
a B-Entity
communication I-Entity
mechanism I-Entity
with I-Entity
its I-Entity
C I-Entity
& I-Entity
C I-Entity
servers I-Entity
, O
and O
enable B-Action
an B-Entity
effective I-Entity
data I-Entity
exfiltration I-Entity
mechanism I-Entity
. O
 
At O
the O
same O
time O
, O
Snake O
exposed O
a O
flexibility O
to O
conduct O
its O
operations O
by O
engaging O
these O
noticeably O
different O
architectures O
. O
 
In O
the O
first O
model O
, O
the B-Entity
network I-Entity
communications I-Entity
are B-Action
carried I-Action
out I-Action
from B-Modifier
the B-Entity
userland I-Entity
- O
i.e O
. O
 
the O
area O
of O
the O
computer O
system O
where O
application O
software O
executes O
. O
 
In O
another O
model O
, O
the B-Entity
network I-Entity
communications I-Entity
are B-Action
handled I-Action
by O
a B-Entity
kernel I-Entity
mode I-Entity
driver I-Entity
- O
i.e O
. O
 
the O
area O
where O
lower O
level O
system O
code O
such O
as O
device O
drivers O
run O
. O
 
The B-Entity
choice I-Entity
of I-Entity
what I-Entity
architecture I-Entity
should I-Entity
be I-Entity
used I-Entity
may O
depend B-Action
on I-Action
a B-Entity
specific I-Entity
target I-Entity
's I-Entity
environment I-Entity
, O
allowing O
the O
Snake O
operators O
to O
choose O
the O
most O
suitable O
architecture O
to O
be O
deployed O
. O
 
In O
both O
architectures O
there O
is O
a B-Entity
kernel I-Entity
mode I-Entity
driver I-Entity
installed B-Action
and O
a B-Entity
usermode I-Entity
DLL I-Entity
injected B-Action
by O
the B-Entity
driver I-Entity
into B-Modifier
the B-Entity
system I-Entity
processes I-Entity
. O
 
In O
both O
architectures O
, O
there O
is O
both O
32-bit O
and O
64-bit O
code O
involved O
. O
 
In O
order O
to O
distinguish O
between O
these O
architectures O
, O
we O
will O
call O
them O
the O
usermode-centric O
and O
the O
kernel-centric O
architectures O
respectively O
. O
 
The O
remainder O
of O
this O
report O
gives O
a O
detailed O
explanation O
of O
how O
the O
two O
Snake O
architectures O
embed O
themselves O
in O
the O
target O
system O
and O
communicate O
with O
the O
outside O
world O
. O
 
We O
have O
also O
provided O
a O
set O
of O
technical O
indicators O
in O
the O
Appendix O
to O
enable O
organisations O
and O
the O
security O
research O
community O
to O
identify O
compromises O
. O
 
In O
total O
we O
have O
collected O
over O
100 O
unique O
files O
related O
to O
this O
espionage O
toolkit O
. O
 
Many O
of O
these O
were O
submitted O
to O
online O
malware O
analysis O
websites O
by O
victims O
and O
investigators O
over O
several O
years O
. O
 
In O
many O
cases O
the O
source O
country O
information O
of O
the O
submission O
is O
available O
. O
 
These O
allow O
us O
to O
visualise O
the O
distribution O
of O
countries O
where O
this O
malware O
has O
been O
seen O
: O
Whilst O
this O
view O
is O
likely O
to O
only O
be O
the O
tip O
of O
the O
iceberg O
, O
it O
does O
give O
us O
an O
initial O
insight O
into O
the O
profile O
of O
targets O
for O
the O
Snake O
operations O
. O
 
Other O
useful O
visualisations O
of O
the O
operations O
come O
from O
the O
compile O
timestamps O
. O
 
Below O
is O
shown O
a O
table O
with O
a O
count O
of O
the O
number O
of O
files O
in O
our O
sample O
set O
from O
recent O
years O
. O
 
Two O
samples O
compiled O
in O
late O
January O
2014 O
show O
that O
this O
activity O
is O
ongoing O
. O
 
Plotting O
the O
day O
of O
the O
week O
in O
which O
the O
samples O
were O
compiled O
shows O
a O
now O
familiar O
pattern O
for O
analysts O
of O
modern O
cyber-attacks O
. O
 
The O
creators O
of O
the O
malware O
operate O
a O
working O
week O
, O
just O
like O
any O
other O
professional O
. O
 
The O
single O
sample O
in O
our O
set O
which O
was O
compiled O
on O
a O
Saturday O
is O
an O
outlier O
, O
but O
does O
n't O
alter O
the O
conclusion O
. O
 
Similarly O
, O
plotting O
the O
hour O
of O
the O
day O
in O
which O
the O
samples O
were O
compiled O
reveals O
another O
human O
pattern O
– O
the O
working O
day O
. O
 
This O
has O
been O
adjusted O
to O
UTC+4 O
to O
show O
a O
possible O
fit O
to O
the O
operators O
' O
local O
time O
. O
 
The O
usermode-centric O
architecture O
of O
Snake O
is O
known O
to O
have O
been O
used O
from O
2011 O
till O
2014 O
, O
with O
the O
most O
recent O
sample O
compiled O
on O
January O
28 O
, O
2014 O
. O
 
With O
this O
architecture O
, O
the B-Entity
Snake I-Entity
driver I-Entity
is O
mainly O
used O
to O
load B-Action
the B-Entity
DLL I-Entity
module I-Entity
into B-Modifier
the B-Entity
usermode I-Entity
processes I-Entity
, O
and O
then O
use B-Action
that B-Entity
module I-Entity
for B-Modifier
the B-Entity
communications I-Entity
. O
 
One O
of O
the O
analysed O
samples O
exposed O
multiple O
debug O
messages O
and O
source O
control O
check-in O
logs O
. O
 
It O
is O
not O
clear O
why O
those O
messages O
were O
allowed O
in O
the O
deployed O
driver O
- O
possibly O
an O
operational O
security O
lapse O
. O
 
However O
, O
they O
give O
some O
insight O
into O
the O
internal O
structure O
of O
the O
source O
code O
. O
 
For O
example O
, O
the O
analysed O
driver O
gave O
away O
the O
following O
source O
file O
names O
: O
The O
source O
control O
check-in O
log O
examples O
, O
showing O
the O
names O
of O
the O
developers O
to O
be O
'vlad O
' O
and O
'gilg O
' O
: O
It O
also O
exposed O
the O
project O
name O
of O
this O
particular O
variant O
as O
'sengoku O
' O
: O
Now O
it O
's O
time O
to O
execute O
the O
driver O
and O
see O
what O
it O
does O
. O
 
When O
first O
executed O
, O
the B-Entity
driver I-Entity
creates B-Action
device B-Entity
named I-Entity
\Device\vstor32 I-Entity
with B-Modifier
a B-Entity
symbolic I-Entity
link I-Entity
\DosDevices\vstor32 I-Entity
. O
 
This B-Entity
device I-Entity
is B-Action
used I-Action
for B-Modifier
userland/kernel B-Entity
communications I-Entity
. O
 
Next O
, O
it B-Entity
drops B-Action
a B-Entity
DLL I-Entity
into B-Modifier
the B-Entity
% I-Entity
windows I-Entity
% I-Entity
directory I-Entity
- O
the O
DLL O
is O
carried O
in O
the O
body O
of O
the O
driver O
as O
a O
binary O
chunk O
with O
XOR B-Entity
0xAA I-Entity
applied B-Action
on B-Modifier
top I-Modifier
of I-Modifier
it B-Entity
, O
so O
the O
driver O
decrypts O
it O
first O
. O
 
Depending O
on O
the O
variant O
, O
the B-Entity
DLL I-Entity
is B-Action
dropped I-Action
either O
under B-Modifier
a B-Entity
random I-Entity
name I-Entity
or I-Entity
a I-Entity
hard-coded I-Entity
name I-Entity
, O
such O
as O
mscpx32n.dll O
. O
 
The O
purpose O
of O
this B-Entity
DLL I-Entity
is O
to O
be B-Action
injected I-Action
into B-Modifier
the B-Entity
user-mode I-Entity
processes I-Entity
. O
 
Some O
variants O
of O
Snake O
carry O
the O
DLL B-Entity
modules I-Entity
that O
can O
be B-Action
installed I-Action
as B-Modifier
a B-Entity
service I-Entity
, O
to O
be B-Action
run I-Action
within B-Modifier
taskhost.exe B-Entity
or I-Entity
services.exe I-Entity
processes I-Entity
. O
 
Next O
, O
the B-Entity
driver I-Entity
sets B-Action
up I-Action
the B-Entity
hooks I-Entity
for B-Modifier
the B-Entity
following I-Entity
kernel-mode I-Entity
APIs I-Entity
: O
After O
that O
, O
it B-Entity
calls B-Action
PsSetCreateProcessNotifyRoutine B-Entity
( I-Entity
) I-Entity
in O
order O
to O
be B-Action
notified I-Action
whenever B-Modifier
a B-Entity
new I-Entity
process I-Entity
is I-Entity
started I-Entity
. O
 
The O
handlers O
of O
the O
hooks O
above O
along O
with O
the O
notification O
callback O
allow O
Snake B-Entity
to O
stay B-Action
persistent B-Entity
on I-Entity
a I-Entity
system I-Entity
, O
being O
able O
to O
infect B-Action
any B-Entity
newly I-Entity
created I-Entity
processes I-Entity
, O
and O
restore B-Action
its B-Entity
driver I-Entity
file I-Entity
in B-Modifier
case I-Modifier
it B-Entity
gets I-Entity
deleted I-Entity
. O
 
Another B-Entity
set I-Entity
of I-Entity
hooks I-Entity
it B-Entity
sets B-Action
is O
designed O
to O
hide B-Action
the B-Entity
presence I-Entity
of I-Entity
the I-Entity
Snake I-Entity
components I-Entity
on I-Entity
the I-Entity
system I-Entity
: O
The B-Entity
driver I-Entity
then O
watches B-Action
for B-Modifier
all B-Entity
userland I-Entity
processes I-Entity
to B-Modifier
see B-Entity
if I-Entity
they I-Entity
load I-Entity
any I-Entity
web I-Entity
pages I-Entity
. O
 
As B-Modifier
long I-Modifier
as I-Modifier
the B-Entity
user I-Entity
is I-Entity
not I-Entity
using I-Entity
the I-Entity
Internet I-Entity
, O
Snake B-Entity
stays B-Action
dormant B-Entity
too O
, O
as O
there O
is O
no O
process O
that O
communicates O
with O
the O
web O
servers O
. O
 
However O
, O
as B-Modifier
soon I-Modifier
as I-Modifier
the B-Entity
user I-Entity
goes I-Entity
online I-Entity
, O
the B-Entity
driver I-Entity
intercepts B-Action
that B-Entity
event I-Entity
and O
then O
immediately O
injects B-Action
the B-Entity
malicious I-Entity
DLL I-Entity
module I-Entity
into B-Modifier
the B-Entity
process I-Entity
that I-Entity
initiated I-Entity
connection I-Entity
( O
the O
browser O
) O
. O
 
Once O
injected O
, O
the B-Entity
module I-Entity
initiates B-Action
polling B-Entity
from B-Modifier
one B-Entity
of I-Entity
the I-Entity
hard-coded I-Entity
C I-Entity
& I-Entity
C I-Entity
servers I-Entity
. O
 
The O
purpose O
of O
this B-Entity
behaviour I-Entity
is O
to O
blend B-Action
Snake B-Entity
's I-Entity
traffic I-Entity
with B-Modifier
the B-Entity
browser I-Entity
traffic I-Entity
, O
bypassing B-Action
the B-Entity
firewalls I-Entity
, O
and O
keeping B-Action
a B-Entity
low I-Entity
profile I-Entity
at O
the O
same O
time O
. O
 
By O
communicating O
from O
within O
a O
process O
that O
also O
communicates O
, O
even O
a O
technically O
savvy O
user O
will O
find O
it O
challenging O
to O
detect O
Snake O
traffic O
among O
legitimate O
traffic O
. O
 
The O
reason O
behind O
such O
difficulty O
is O
because O
modern O
web O
pages O
often O
fetch O
pages O
from O
the O
different O
web O
servers O
, O
including O
such O
data O
as O
additional O
scripts O
, O
CSS O
templates O
, O
advertising O
contents O
, O
analytics O
data O
, O
blogs O
, O
social O
networking O
data O
, O
etc O
. O
 
When O
intercepted O
with O
the O
purpose O
of O
analysis O
, O
such O
traffic O
may O
literally O
represent O
itself O
hundreds O
of O
DNS O
and O
HTTP O
requests O
made O
when O
a O
popular O
website O
, O
such O
as O
a O
news O
website O
is O
open O
. O
 
Hiding B-Action
a B-Entity
few I-Entity
DNS/HTTP I-Entity
requests I-Entity
among B-Modifier
busy B-Entity
network I-Entity
traffic I-Entity
allows O
Snake B-Entity
rootkit I-Entity
to O
stay B-Action
unnoticed B-Entity
. O
 
In O
order O
to O
test O
Snake O
's O
communications O
with O
the O
C O
& O
C O
servers O
, O
and O
still O
being O
able O
to O
clearly O
distinguish O
its O
traffic O
, O
a O
small O
tool O
was O
built O
to O
generate O
GET O
request O
to O
a O
web O
server O
running O
on O
the O
analysed O
system O
. O
 
The O
tool O
was O
named O
as O
chrome.exe O
in O
order O
to O
trigger O
the O
malware O
communications O
. O
 
As O
long O
as O
the O
test O
tool O
named O
chrome.exe O
did O
not O
make O
any O
requests O
, O
its O
memory O
stayed O
pristine O
. O
 
There O
were O
no O
injections O
made O
by O
the O
driver O
. O
 
As O
soon O
as O
the O
tool O
made O
its O
first O
GET O
requests O
, O
the B-Entity
driver I-Entity
immediately O
injected B-Action
a B-Entity
malicious I-Entity
DLL I-Entity
module I-Entity
in B-Modifier
it B-Entity
, O
and O
that B-Entity
module I-Entity
started B-Action
producing B-Entity
the I-Entity
following I-Entity
traffic I-Entity
: O
↓ O
The B-Entity
domain I-Entity
names I-Entity
of I-Entity
the I-Entity
C I-Entity
& I-Entity
C I-Entity
servers I-Entity
it B-Entity
relies B-Action
on I-Action
are O
hard-coded O
in O
the O
body O
of O
the O
malware O
. O
 
Some O
examples O
are O
given O
below O
, O
and O
a O
full O
list O
of O
known O
domains O
is O
given O
in O
the O
Appendix O
D O
: O
As O
seen O
in O
the O
traffic O
dump O
above O
, O
the B-Entity
malware I-Entity
first O
resolves B-Action
the B-Entity
domain I-Entity
name I-Entity
of I-Entity
its I-Entity
C I-Entity
& I-Entity
C I-Entity
. O
 
Next O
, O
it B-Entity
fetches B-Action
a B-Entity
file I-Entity
/D/pub.txt I-Entity
, O
and O
expects B-Action
the B-Entity
server I-Entity
to I-Entity
respond I-Entity
with I-Entity
a I-Entity
string I-Entity
'' I-Entity
1 I-Entity
'' I-Entity
, I-Entity
acknowledging I-Entity
it I-Entity
's I-Entity
active I-Entity
: O
Once O
acknowledged O
, O
it B-Entity
asks B-Action
the B-Entity
server I-Entity
for B-Modifier
a B-Entity
command I-Entity
, O
and O
the B-Entity
server I-Entity
returns B-Action
a B-Entity
new I-Entity
command I-Entity
to I-Entity
execute I-Entity
: O
The B-Entity
command I-Entity
it B-Entity
receives B-Action
from B-Modifier
C B-Entity
& I-Entity
C I-Entity
above O
( O
swim.onlinewebshop.net O
) O
is B-Action
encrypted I-Action
. O
 
In O
order O
to O
decrypt B-Action
it B-Entity
, O
the B-Entity
malware I-Entity
first O
applies B-Action
the B-Entity
XOR I-Entity
mask I-Entity
to B-Modifier
the B-Entity
bytes I-Entity
that I-Entity
start I-Entity
from I-Entity
offset I-Entity
0x40 I-Entity
: O
An O
identical O
XOR O
mask O
was O
also O
used O
by O
Agent.BTZ O
. O
 
Next O
, O
it B-Entity
calculates B-Action
and I-Action
confirms I-Action
a B-Entity
CRC32 I-Entity
checksum I-Entity
within B-Modifier
the B-Entity
command I-Entity
, O
further O
decrypts B-Action
the B-Entity
data I-Entity
by B-Modifier
using B-Entity
the I-Entity
Number I-Entity
Theory I-Entity
Library I-Entity
( I-Entity
NTL I-Entity
) I-Entity
, O
and O
makes B-Action
sure I-Action
the B-Entity
command I-Entity
is I-Entity
destined I-Entity
to I-Entity
the I-Entity
current I-Entity
host I-Entity
by B-Modifier
matching B-Entity
the I-Entity
ID I-Entity
field I-Entity
in I-Entity
it I-Entity
. O
 
Once O
decrypted O
, O
the B-Entity
malware I-Entity
interprets B-Action
the B-Entity
received I-Entity
command I-Entity
, O
as O
reflected O
in O
the O
malware O
log O
below O
( O
the O
new O
C O
& O
C O
server O
address O
is O
highlighted O
in O
it O
) O
: O
After O
that O
, O
the B-Entity
malware I-Entity
connects B-Action
to B-Modifier
the B-Entity
new I-Entity
C I-Entity
& I-Entity
C I-Entity
, O
asking B-Action
it B-Entity
for B-Modifier
another B-Entity
command I-Entity
: O
The B-Entity
command I-Entity
it B-Entity
receives B-Action
is O
called O
UpLoad O
, O
so O
it B-Entity
uploads B-Action
all B-Entity
the I-Entity
collected I-Entity
logs I-Entity
to B-Modifier
the B-Entity
server I-Entity
, O
and O
then O
cleans B-Action
out I-Action
those B-Entity
logs I-Entity
: O
The B-Entity
files I-Entity
it B-Entity
uploads B-Action
are O
stored O
inside O
its O
home O
directory O
% O
windows O
% O
\ O
$ O
NtUninstallQ O
[ O
random O
] O
$ O
, O
where O
[ O
random O
] O
is O
a O
random O
number O
. O
 
For O
example O
, O
Snake O
's O
home O
directory O
could O
be O
C O
: O
\WINDOWS\ O
$ O
NtUninstallQ812589 O
$ O
. O
 
The B-Entity
files I-Entity
within I-Entity
that I-Entity
directory I-Entity
are B-Action
used I-Action
by O
the O
rootkit B-Entity
to O
store B-Action
configuration B-Entity
and I-Entity
log I-Entity
data I-Entity
. O
 
When O
decrypted O
with O
the O
same O
XOR O
key O
that O
was O
used O
by O
Agent.BTZ O
, O
these O
files O
expose O
the O
following O
contents O
: O
Analysis O
of O
the O
sample O
reveals O
that O
it B-Entity
supports B-Action
3 B-Entity
modes I-Entity
of I-Entity
fetching I-Entity
C I-Entity
& I-Entity
C I-Entity
commands I-Entity
. O
 
• O
In O
the O
first O
mode O
, O
it B-Entity
relies B-Action
on I-Action
Windows B-Entity
Internet I-Entity
( I-Entity
WinINet I-Entity
) I-Entity
APIs I-Entity
, I-Entity
such I-Entity
as I-Entity
HttpOpenRequest I-Entity
( I-Entity
) I-Entity
, I-Entity
HttpSendRequest I-Entity
( I-Entity
) I-Entity
, I-Entity
InternetReadFile I-Entity
( I-Entity
) I-Entity
, I-Entity
etc I-Entity
. O
 
• O
In O
the O
second O
mode O
, O
it B-Entity
uses B-Action
Windows B-Entity
Sockets I-Entity
2 I-Entity
( I-Entity
Winsock I-Entity
) I-Entity
APIs I-Entity
, I-Entity
such I-Entity
as I-Entity
WSAStartup I-Entity
( I-Entity
) I-Entity
, I-Entity
socket I-Entity
( I-Entity
) I-Entity
, I-Entity
connect I-Entity
( I-Entity
) I-Entity
, I-Entity
send I-Entity
( I-Entity
) I-Entity
, I-Entity
etc I-Entity
. O
 
• O
In O
the O
third O
mode O
, O
it B-Entity
works B-Action
in B-Modifier
the B-Entity
'pipe I-Entity
server I-Entity
' I-Entity
mode I-Entity
, O
when O
it B-Entity
passes B-Action
the B-Entity
web I-Entity
requests I-Entity
it I-Entity
is I-Entity
interested I-Entity
in I-Entity
( I-Entity
as I-Entity
a I-Entity
client I-Entity
) I-Entity
to B-Modifier
the B-Entity
pipe I-Entity
server I-Entity
that I-Entity
runs I-Entity
within I-Entity
Windows I-Entity
Explorer I-Entity
( I-Entity
explorer.exe I-Entity
) I-Entity
and/or I-Entity
Internet I-Entity
Explorer I-Entity
( I-Entity
iexplore.exe I-Entity
) I-Entity
processes I-Entity
. O
 
Memory O
pipes O
is O
a O
common O
mechanism O
for O
Inter-Process O
Communications O
( O
IPC O
) O
. O
 
When O
the O
pipe O
server O
reads O
such O
requests O
from O
the O
pipes O
, O
it O
performs O
the O
web O
request O
on O
behalf O
of O
a O
client O
by O
using O
WinINet O
APIs O
, O
so O
it O
effectively O
serves O
as O
a O
proxy O
. O
 
The O
diagram O
below O
demonstrates O
the O
last O
, O
'pipe O
server O
' O
mode O
of O
Snake O
operation O
: O
The O
diagram O
illustrates O
the O
operation O
steps O
1-4 O
: O
1 O
First O
, O
the B-Entity
malicious I-Entity
driver I-Entity
with I-Entity
the I-Entity
embedded I-Entity
DLL I-Entity
module I-Entity
injects B-Action
that B-Entity
DLL I-Entity
into B-Modifier
a B-Entity
system I-Entity
process I-Entity
, I-Entity
such I-Entity
as I-Entity
services.exe I-Entity
; O
once O
loaded O
, O
the B-Entity
DLL I-Entity
will O
function B-Action
in B-Modifier
the B-Entity
'pipe I-Entity
server I-Entity
' I-Entity
mode I-Entity
. O
 
2 O
As O
soon O
as O
the B-Entity
driver I-Entity
detects B-Action
a B-Entity
usermode I-Entity
process I-Entity
that I-Entity
goes I-Entity
online I-Entity
( I-Entity
e.g I-Entity
. I-Entity
a I-Entity
browser I-Entity
) I-Entity
, O
it B-Entity
will O
inject B-Action
malicious B-Entity
DLL I-Entity
module I-Entity
into B-Modifier
it B-Entity
; O
depending O
on O
the O
operational O
mode O
, O
the B-Entity
DLL I-Entity
may O
start B-Action
communicating B-Entity
with I-Entity
C I-Entity
& I-Entity
C I-Entity
directly I-Entity
. O
 
3 O
In O
the O
'pipe O
mode O
' O
of O
operation O
, O
the B-Entity
injected I-Entity
DLL I-Entity
will O
start B-Action
communicating B-Entity
with I-Entity
the I-Entity
pipe I-Entity
server I-Entity
by O
sending B-Action
messages B-Entity
into B-Modifier
the B-Entity
established I-Entity
inter-process I-Entity
communication I-Entity
pipes I-Entity
. O
 
4 O
Once O
the B-Entity
task I-Entity
of I-Entity
communication I-Entity
with I-Entity
C I-Entity
& I-Entity
C I-Entity
is B-Action
delegated I-Action
to B-Modifier
the B-Entity
pipe I-Entity
server I-Entity
, O
it B-Entity
will O
start B-Action
communicating B-Entity
with I-Entity
the I-Entity
C I-Entity
& I-Entity
C I-Entity
, O
bypassing B-Action
the B-Entity
host-based I-Entity
firewalls I-Entity
that I-Entity
keep I-Entity
an I-Entity
infected I-Entity
system I-Entity
process I-Entity
in I-Entity
a I-Entity
white-list I-Entity
. O
 
The O
reason O
behind O
the B-Entity
pipes I-Entity
usage I-Entity
is O
to O
'legitimise B-Action
' I-Action
the B-Entity
outbound I-Entity
web I-Entity
requests I-Entity
, O
forcing O
them O
to O
originate O
from O
the O
host O
firewall- O
friendly O
system O
services O
. O
 
Pipe O
server O
is O
a O
special O
mode O
of O
the O
injected O
DLL O
. O
 
In O
order O
to O
switch O
into O
that O
mode O
, O
a B-Entity
dedicated I-Entity
thread I-Entity
is B-Action
spawned I-Action
to O
listen B-Action
for B-Modifier
IPC B-Entity
messages I-Entity
received I-Entity
through I-Entity
the I-Entity
pipes I-Entity
. O
 
The O
memory O
pipes O
used O
by O
Snake O
are O
named O
as O
: O
Apart O
from O
GET B-Entity
/ O
POST B-Entity
requests I-Entity
, O
the B-Entity
pipe I-Entity
clients I-Entity
( I-Entity
infected I-Entity
usermode I-Entity
processes I-Entity
) I-Entity
may O
also O
ask B-Action
the B-Entity
pipe I-Entity
server I-Entity
to O
perform B-Action
other O
operations O
on O
their O
behalf O
, O
such O
as O
saving B-Action
data B-Entity
into B-Modifier
a B-Entity
temporary I-Entity
file I-Entity
, O
copy B-Action
/ O
delete B-Action
files B-Entity
, O
save B-Action
configuration B-Entity
data I-Entity
into B-Modifier
the B-Entity
registry I-Entity
under B-Modifier
the B-Entity
aforementioned I-Entity
ShellCore I-Entity
value I-Entity
. O
 
This B-Entity
delegation I-Entity
of I-Entity
tasks I-Entity
is O
designed O
to O
keep B-Action
infected B-Entity
processes I-Entity
under B-Modifier
the B-Entity
radar I-Entity
of I-Entity
the I-Entity
behavioural I-Entity
analysis I-Entity
tools I-Entity
for B-Modifier
as B-Entity
long I-Entity
as I-Entity
possible I-Entity
. O
 
Another O
reason O
is O
to O
overcome B-Action
account B-Entity
restrictions I-Entity
imposed I-Entity
on I-Entity
a I-Entity
browser I-Entity
process I-Entity
in O
order O
to O
be O
able O
to O
write B-Action
into B-Modifier
files B-Entity
/ O
registry B-Entity
. O
 
To O
delegate O
different O
types O
of O
tasks O
, O
the B-Entity
clients I-Entity
send B-Action
messages B-Entity
to B-Modifier
the B-Entity
pipe I-Entity
server I-Entity
using B-Modifier
the B-Entity
following I-Entity
task I-Entity
identification I-Entity
headers I-Entity
: O
The B-Entity
usermode I-Entity
component I-Entity
of I-Entity
Snake I-Entity
communicates B-Action
with B-Modifier
its B-Entity
kernel-mode I-Entity
driver I-Entity
via B-Modifier
a B-Entity
device I-Entity
called I-Entity
\\.\vstor32 I-Entity
( I-Entity
created I-Entity
under I-Entity
kernel I-Entity
as I-Entity
\Device\vstor32 I-Entity
) I-Entity
. O
 
In O
its O
communication O
protocol O
with O
the O
driver O
it O
uses O
the O
IOCTL O
code O
of O
0x222038 O
. O
 
To O
write B-Action
data B-Entity
, O
it B-Entity
opens B-Action
the B-Entity
device I-Entity
with B-Modifier
CreateFile B-Entity
( I-Entity
'' I-Entity
\\.\vstor32 I-Entity
'' I-Entity
) I-Entity
, O
then O
calls B-Action
DeviceIoControl B-Entity
( I-Entity
) I-Entity
API I-Entity
on B-Modifier
its B-Entity
handle I-Entity
with B-Modifier
IOCTL B-Entity
code I-Entity
of I-Entity
0x222038 I-Entity
. O
 
Configuration O
parameters O
along O
with O
the B-Entity
initial I-Entity
set I-Entity
of I-Entity
domain I-Entity
names I-Entity
are B-Action
hard-coded I-Action
within B-Modifier
the B-Entity
body I-Entity
of I-Entity
the I-Entity
DLL I-Entity
. O
 
However O
, O
the O
data O
appears O
to O
be O
defined O
in O
the O
structures O
, O
so O
it O
is O
very O
likely O
the O
DLL O
could O
be O
generated O
by O
a O
stand-alone O
builder O
that O
'patches O
' O
the O
DLL O
with O
the O
new/updated O
list O
of O
C O
& O
C O
. O
 
Analysis O
of O
the B-Entity
commands I-Entity
performed B-Action
by O
the B-Entity
malware I-Entity
suggests O
the O
following O
capabilities O
: O
Together O
, O
these B-Entity
commands I-Entity
provide B-Action
complete B-Entity
backdoor I-Entity
functionality I-Entity
, O
allowing B-Action
remote B-Entity
attacker I-Entity
full B-Entity
control I-Entity
over I-Entity
the I-Entity
compromised I-Entity
system I-Entity
. O
 
The O
ability O
to O
update B-Action
the B-Entity
driver I-Entity
and O
then O
rely B-Action
on I-Action
its B-Entity
communication I-Entity
capabilities I-Entity
means O
that O
the O
components O
of O
Snake O
are O
flexible O
, O
making O
possible O
the O
existence O
of O
the O
hybrid O
( O
kernel-centric O
and O
usermode-centric O
) O
architectures O
. O
 
For O
example O
, O
the O
virtual O
partitions O
are O
used O
by O
kernel-centric O
Snake O
variants O
, O
where O
the B-Entity
kernel-mode I-Entity
driver I-Entity
is B-Action
responsible B-Entity
for I-Entity
the I-Entity
communications I-Entity
. O
 
If O
such B-Entity
a I-Entity
driver I-Entity
is B-Action
installed I-Action
via B-Modifier
an B-Entity
update I-Entity
, O
the B-Entity
usermode I-Entity
component I-Entity
can O
be B-Action
instructed I-Action
to O
delegate O
the O
file O
upload O
task O
to O
the O
driver O
by O
copying B-Action
all B-Entity
the I-Entity
necessary I-Entity
logs I-Entity
into B-Modifier
the B-Entity
shared I-Entity
virtual I-Entity
partition I-Entity
, O
physically O
located O
on O
the O
compromised O
host O
and O
thus O
, O
accessible O
from O
kernel O
. O
 
This O
particular O
architecture O
relies O
on O
a B-Entity
kernel-mode I-Entity
driver I-Entity
to O
carry B-Action
out I-Action
the B-Entity
network I-Entity
communications I-Entity
. O
 
The B-Entity
usermode I-Entity
DLLs I-Entity
are B-Action
still I-Action
injected I-Action
into B-Modifier
the B-Entity
system I-Entity
processes I-Entity
to B-Modifier
perform B-Entity
high-level I-Entity
tasks I-Entity
. O
 
The O
delivery O
mechanism O
is O
not O
known O
: O
it B-Entity
may O
be B-Action
distributed I-Action
via B-Modifier
a O
thumb-drive O
, O
a B-Entity
phishing I-Entity
email I-Entity
attachment I-Entity
, O
or O
be B-Action
delivered I-Action
via B-Modifier
an B-Entity
exploit I-Entity
across I-Entity
the I-Entity
network I-Entity
( O
e.g O
. O
 
by O
using O
the O
reconnaissance O
tool O
that O
is O
explained O
later O
) O
. O
 
Infection B-Entity
starts B-Action
from B-Modifier
a B-Entity
dropper I-Entity
penetrating I-Entity
into I-Entity
the I-Entity
compromised I-Entity
system I-Entity
where I-Entity
it I-Entity
is I-Entity
allowed I-Entity
to I-Entity
run I-Entity
. O
 
Once O
executed B-Action
, O
the B-Entity
dropper I-Entity
installs B-Action
the B-Entity
kernel I-Entity
mode I-Entity
driver I-Entity
in B-Modifier
a B-Entity
pre-defined I-Entity
location I-Entity
. O
 
The O
dropper O
itself O
is O
32-bit O
, O
so O
it O
will O
run O
both O
on O
32-bit O
and O
64-bit O
Windows O
OS O
( O
in O
WoW64 O
mode O
) O
. O
 
On B-Modifier
a B-Entity
32-bit I-Entity
OS I-Entity
, O
it B-Entity
will O
install B-Action
a B-Entity
32-bit I-Entity
driver I-Entity
. O
 
On B-Modifier
a B-Entity
64-bit I-Entity
OS I-Entity
, O
it B-Entity
will O
install B-Action
a B-Entity
64-bit I-Entity
driver I-Entity
. O
 
The B-Entity
analysed I-Entity
32-bit I-Entity
dropper I-Entity
creates B-Action
a B-Entity
driver I-Entity
in B-Modifier
the B-Entity
following I-Entity
location I-Entity
: O
However O
, O
different O
samples O
may O
use O
a O
different O
path O
and O
driver O
file O
name O
. O
 
For O
example O
, O
some O
samples O
exposed O
these O
filenames O
: O
fdisk32.sys O
, O
A0009547.sys O
, O
or O
Ultra3.sys O
. O
 
The O
filename O
of O
the O
dropper O
could O
be O
rknginst.exe O
or O
fdiskmon.exe O
. O
 
Once O
executed O
, O
the O
driver O
first O
makes O
sure O
it O
is O
registered O
under O
a O
pre-defined O
name O
, O
such O
as O
Ultra3 O
. O
 
Other O
samples O
may O
have O
a O
different O
registration O
name O
, O
such O
as O
~ROOT O
. O
 
The B-Entity
registration I-Entity
is B-Action
ensured I-Action
with B-Modifier
creation B-Entity
of I-Entity
the I-Entity
following I-Entity
registry I-Entity
entries I-Entity
: O
The B-Entity
driver I-Entity
then O
flags B-Action
the B-Entity
following I-Entity
events I-Entity
with B-Modifier
the B-Entity
notification I-Entity
purposes I-Entity
: O
The B-Entity
rootkit I-Entity
then O
places B-Action
a B-Entity
number I-Entity
of I-Entity
the I-Entity
hooks I-Entity
. O
 
The O
first O
API O
it B-Entity
hooks B-Action
is O
IoCreateDevice B-Entity
( I-Entity
) I-Entity
. O
 
The B-Entity
installed I-Entity
hook I-Entity
handler I-Entity
calls B-Action
the B-Entity
original I-Entity
API I-Entity
and O
then O
checks B-Action
if B-Entity
the I-Entity
name I-Entity
of I-Entity
the I-Entity
device I-Entity
is I-Entity
netbt I-Entity
or I-Entity
afd I-Entity
. O
 
If O
so O
, O
it B-Entity
will O
install B-Action
a B-Entity
TDI I-Entity
filter I-Entity
driver I-Entity
. O
 
If O
the O
device O
name O
is O
Null O
, O
Beep O
, O
tcpip O
or O
Nsiproxy O
, O
it O
will O
activate O
itself O
by O
enabling O
its B-Entity
hooks I-Entity
designed O
to O
hide B-Action
the B-Entity
presence I-Entity
of I-Entity
Snake I-Entity
on I-Entity
a I-Entity
system I-Entity
, O
set O
up O
its O
access O
control O
lists O
and O
the O
messaging O
system O
. O
 
In O
order O
to O
hide B-Action
its B-Entity
components I-Entity
, O
the B-Entity
driver I-Entity
hooks B-Action
the B-Entity
following I-Entity
APIs I-Entity
: O
For O
example O
, O
the B-Entity
hook I-Entity
handlers I-Entity
of I-Entity
the I-Entity
registry-related I-Entity
APIs I-Entity
will O
block B-Action
access B-Entity
to I-Entity
the I-Entity
registry I-Entity
entries I-Entity
that I-Entity
contain I-Entity
the I-Entity
name I-Entity
of I-Entity
the I-Entity
driver I-Entity
. O
 
In O
one O
example O
, O
the B-Entity
rootkit I-Entity
blocks B-Action
access B-Entity
to I-Entity
registry I-Entity
entries I-Entity
that I-Entity
contain I-Entity
the I-Entity
strings I-Entity
'' I-Entity
Ultra3 I-Entity
'' I-Entity
and I-Entity
'' I-Entity
~ROOT I-Entity
'' I-Entity
. O
 
The B-Entity
ZwReadFile I-Entity
( I-Entity
) I-Entity
hook I-Entity
handler I-Entity
will O
block B-Action
access B-Entity
to I-Entity
the I-Entity
home I-Entity
directory I-Entity
where I-Entity
the I-Entity
rootkit I-Entity
keeps I-Entity
its I-Entity
file I-Entity
. O
 
In O
one O
of O
the O
analysed O
kernel-centric O
Snake O
samples O
the O
home O
directory O
was O
hard-coded O
as O
% O
windows O
% O
\ O
$ O
NtUninstallQ817473 O
$ O
, O
so O
it B-Entity
blocked B-Action
file B-Entity
read I-Entity
access I-Entity
from I-Entity
that I-Entity
directory I-Entity
. O
 
The B-Entity
ZwClose I-Entity
( I-Entity
) I-Entity
hook I-Entity
handler I-Entity
is O
used O
to O
inject B-Action
the B-Entity
DLL I-Entity
module I-Entity
into B-Modifier
the B-Entity
userland I-Entity
processes I-Entity
. O
 
The B-Entity
hook I-Entity
handler I-Entity
for I-Entity
ZwTerminateProcess I-Entity
( I-Entity
) I-Entity
checks B-Action
if B-Entity
the I-Entity
process I-Entity
being I-Entity
shut I-Entity
down I-Entity
is I-Entity
svchost.exe I-Entity
. O
 
If O
so O
, O
it O
considers O
it O
to O
be O
a O
system O
shutdown O
, O
so O
it B-Entity
unloads B-Action
its B-Entity
usermode I-Entity
DLL I-Entity
and O
deactivates B-Action
its B-Entity
own I-Entity
network I-Entity
drivers I-Entity
, O
just O
like O
it O
does O
when O
its O
ZwShutdownSystem O
( O
) O
hook O
handler O
gets O
invoked O
. O
 
The B-Entity
ObOpenObjectByName I-Entity
( I-Entity
) I-Entity
hook I-Entity
is O
designed O
to O
hide B-Action
the B-Entity
presence I-Entity
of I-Entity
its I-Entity
virtual I-Entity
partitions I-Entity
( O
described O
later O
) O
. O
 
To O
encrypt B-Action
data B-Entity
stored I-Entity
on I-Entity
its I-Entity
virtual I-Entity
partitions I-Entity
, O
the B-Entity
driver I-Entity
sets B-Action
a B-Entity
hook I-Entity
for I-Entity
another I-Entity
API I-Entity
: O
To O
re-infect B-Action
the B-Entity
usermode I-Entity
process I-Entity
svchost.exe I-Entity
and O
to O
re-enable B-Action
its B-Entity
network I-Entity
drivers I-Entity
, O
the B-Entity
rootkit I-Entity
hooks B-Action
these B-Entity
APIs I-Entity
: O
Snake O
then O
proceeds O
to O
the O
task O
of O
deep O
packet O
inspection O
and O
modification O
. O
 
In O
order O
to O
accomplish O
it O
, O
it B-Entity
registers B-Action
a B-Entity
callout I-Entity
driver I-Entity
for I-Entity
Windows I-Entity
Filtering I-Entity
Platform I-Entity
( I-Entity
WFP I-Entity
) I-Entity
, O
an O
architecture O
first O
introduced O
with O
Windows O
Vista O
and O
nowadays O
normally O
used O
by O
antivirus O
and/or O
intrusion O
detection O
systems O
to O
inspect/block O
malicious O
traffic O
. O
 
Snake O
sets O
filters O
at O
the O
layers O
FWPMLAYERSTREAMV4 O
and O
FWPMLAYERALEFLOWESTABLISHEDV4 O
in O
the O
TCP/ O
IP O
stack O
, O
so O
that O
its B-Entity
callout I-Entity
driver I-Entity
is B-Action
notified I-Action
whenever B-Modifier
a B-Entity
TCP I-Entity
connection I-Entity
is I-Entity
established I-Entity
by I-Entity
a I-Entity
browser I-Entity
. O
 
When O
that O
happens O
, O
the B-Entity
rootkit I-Entity
triggers B-Action
an B-Entity
event I-Entity
named I-Entity
\BaseNamedObjects\wininetactivate I-Entity
. O
 
When B-Modifier
the B-Entity
data I-Entity
arrives I-Entity
, O
it B-Entity
is B-Action
intercepted I-Action
with B-Modifier
the B-Entity
FwpsCopyStreamDataToBuffer0 I-Entity
( I-Entity
) I-Entity
API I-Entity
, O
and O
then O
scanned B-Action
for B-Modifier
the B-Entity
presence I-Entity
of I-Entity
the I-Entity
hidden I-Entity
commands I-Entity
from I-Entity
C I-Entity
& I-Entity
C I-Entity
. O
 
The B-Entity
driver I-Entity
inspects B-Action
bidirectional B-Entity
network I-Entity
data I-Entity
on B-Modifier
a B-Entity
per I-Entity
stream I-Entity
basis I-Entity
, O
as O
it O
's O
located O
right O
on O
the O
stream O
data O
path O
. O
 
An O
ability O
to O
manipulate B-Action
data B-Entity
streams I-Entity
is O
provided O
with O
the O
packet O
injection O
logic O
below O
, O
allowing O
Snake B-Entity
to O
covertly O
insert B-Action
traffic B-Entity
destined I-Entity
to I-Entity
its I-Entity
C I-Entity
& I-Entity
C I-Entity
servers I-Entity
: O
In O
order O
to O
qualify O
as O
a O
browser O
, O
the O
usermode O
process O
must O
have O
any O
of O
the O
following O
names O
: O
In O
addition O
to O
WFP O
, O
Snake B-Entity
also O
hooks B-Action
the B-Entity
Transport I-Entity
Driver I-Entity
Interface I-Entity
( I-Entity
TDI I-Entity
) I-Entity
network I-Entity
routines I-Entity
by B-Modifier
setting B-Entity
itself I-Entity
up I-Entity
as I-Entity
a I-Entity
TDI I-Entity
filter I-Entity
driver I-Entity
. O
 
TDI O
is O
considered O
deprecated O
and O
will O
be O
removed O
in O
future O
versions O
of O
Microsoft O
Windows O
, O
but O
it O
's O
still O
supported O
on O
Windows O
7 O
. O
 
Being O
registered B-Action
as B-Modifier
a B-Entity
TDI I-Entity
driver I-Entity
on B-Modifier
the B-Entity
device I-Entity
stack I-Entity
, O
Snake B-Entity
hooks B-Action
TCP B-Entity
calls I-Entity
. O
 
This O
way O
it B-Entity
intercepts B-Action
all B-Entity
requests I-Entity
along I-Entity
with I-Entity
their I-Entity
parameters I-Entity
via B-Modifier
IRP B-Entity
( I-Entity
IO I-Entity
request I-Entity
package I-Entity
) I-Entity
hooks I-Entity
. O
 
By O
'sniffing O
' O
all O
the O
requests O
, O
it B-Entity
can O
now O
inspect B-Action
the B-Entity
traffic I-Entity
, O
looking B-Action
for I-Action
and I-Action
then I-Action
parsing I-Action
GET B-Entity
/ I-Entity
POST I-Entity
HTTP I-Entity
requests I-Entity
and I-Entity
also I-Entity
SMTP I-Entity
communications I-Entity
, O
in O
order O
to O
distinguish B-Action
commands B-Entity
addressed I-Entity
to I-Entity
itself I-Entity
. O
 
If O
the B-Entity
rootkit I-Entity
detects B-Action
that B-Modifier
the B-Entity
OS I-Entity
version I-Entity
is I-Entity
pre-Vista I-Entity
( I-Entity
e.g I-Entity
. I-Entity
Windows I-Entity
XP I-Entity
) I-Entity
or I-Entity
Windows I-Entity
Server I-Entity
2008 I-Entity
( I-Entity
e.g I-Entity
. I-Entity
Windows I-Entity
Server I-Entity
2003 I-Entity
) I-Entity
, O
it B-Entity
will O
invoke B-Action
FwpsStreamInjectAsync0 B-Entity
( I-Entity
) I-Entity
API I-Entity
in O
order O
to O
generate B-Action
outbound B-Entity
requests I-Entity
. O
 
Whenever B-Modifier
the B-Entity
client I-Entity
establishes I-Entity
connections I-Entity
, O
the B-Entity
TDI I-Entity
driver I-Entity
will O
also O
'pulse B-Action
' I-Action
the B-Entity
\BaseNamedObjects\wininetactivate I-Entity
event I-Entity
, O
just O
like O
the O
WPF O
driver O
's O
component O
of O
it O
, O
in O
order O
to O
notify O
the O
userland O
service O
about O
the O
event O
. O
 
The B-Entity
data I-Entity
that O
the B-Entity
driver I-Entity
intercepts B-Action
, O
along O
with O
the O
important O
notifications O
, O
is O
passed O
to O
the O
userland O
DLL O
to O
be O
processed O
. O
 
If B-Modifier
the B-Entity
data I-Entity
contains I-Entity
commands I-Entity
from I-Entity
C I-Entity
& I-Entity
C I-Entity
, O
the B-Entity
DLL I-Entity
module I-Entity
is O
expected O
to O
execute B-Action
them B-Entity
and O
report O
results O
back O
to O
the B-Entity
driver I-Entity
to O
be B-Action
delivered I-Action
back B-Modifier
to I-Modifier
C B-Entity
& I-Entity
C I-Entity
. O
 
For O
NDIS O
versions O
5.X O
, O
Snake O
rootkit O
contains O
code B-Entity
that O
installs B-Action
NDIS B-Entity
filter I-Entity
intermediate I-Entity
driver I-Entity
. O
 
This B-Entity
driver I-Entity
is B-Action
set I-Action
up I-Action
above B-Modifier
a B-Entity
miniport I-Entity
driver I-Entity
( O
a O
driver O
that O
communicates O
with O
the O
physical O
device O
) O
and O
below B-Modifier
a B-Entity
protocol I-Entity
driver I-Entity
( O
a O
driver O
that O
implements O
a O
protocol O
, O
e.g O
. O
 
TCP/IP O
) O
. O
 
The B-Entity
driver I-Entity
is B-Action
registered I-Action
with B-Modifier
NdisIMRegisterLayeredMiniport B-Entity
( I-Entity
) I-Entity
API I-Entity
. O
 
After O
that O
, O
the B-Entity
drivers I-Entity
hooks B-Action
the B-Entity
following I-Entity
exports I-Entity
within B-Modifier
ndis.sys B-Entity
: O
The O
rootkit O
contains O
code B-Entity
that O
installs B-Action
NDIS B-Entity
filter I-Entity
driver I-Entity
for I-Entity
NDIS I-Entity
6.0 I-Entity
and I-Entity
above I-Entity
: O
NDIS B-Entity
filter I-Entity
driver I-Entity
configuration I-Entity
is B-Action
stored I-Action
in B-Modifier
the B-Entity
registry I-Entity
entry I-Entity
: O
The B-Entity
driver I-Entity
is B-Action
registered I-Action
with B-Modifier
NdisFRegisterFilterDriver B-Entity
( I-Entity
) I-Entity
API I-Entity
. O
 
After O
that O
, O
the B-Entity
drivers I-Entity
hooks B-Action
the B-Entity
following I-Entity
exports I-Entity
within B-Modifier
ndis.sys B-Entity
( I-Entity
for I-Entity
NDIS I-Entity
6.0 I-Entity
) I-Entity
: O
Another B-Entity
set I-Entity
of I-Entity
exports I-Entity
it B-Entity
attempts O
to O
hook B-Action
in B-Modifier
ndis.sys B-Entity
( I-Entity
for I-Entity
NDIS I-Entity
6.0 I-Entity
) I-Entity
is O
: O
With O
the B-Entity
hooks I-Entity
installed B-Action
, O
whenever O
the O
network O
adapter O
driver O
attempts O
to O
register O
to O
NDIS O
, O
or O
whenever O
there O
is O
an O
attempt O
to O
install O
NDIS O
intermediate O
driver O
or O
NDIS O
filter O
driver O
, O
the B-Entity
hook I-Entity
handlers I-Entity
will O
register B-Action
Snake B-Entity
's I-Entity
own I-Entity
MiniportXxx I-Entity
functions I-Entity
with B-Modifier
the B-Entity
NDIS I-Entity
library I-Entity
. O
 
With O
its O
own O
miniport O
handler O
functions O
, O
it B-Entity
can O
send B-Action
/ O
receive B-Action
data B-Entity
by B-Modifier
using B-Entity
a I-Entity
private I-Entity
TCP/IP I-Entity
stack I-Entity
, O
bypassing B-Action
all B-Entity
firewall I-Entity
hooks I-Entity
, O
and O
making B-Action
its B-Entity
open I-Entity
ports I-Entity
invisible B-Entity
to I-Entity
scanners I-Entity
. O
 
The B-Entity
Snake I-Entity
rootkit I-Entity
registers B-Action
itself B-Entity
as B-Modifier
Network B-Entity
Driver I-Entity
Interface I-Entity
Specification I-Entity
( I-Entity
NDIS I-Entity
) I-Entity
protocol I-Entity
driver I-Entity
. O
 
Whenever O
the B-Entity
underlying I-Entity
miniport I-Entity
driver I-Entity
receives B-Action
data B-Entity
from B-Modifier
the B-Entity
network I-Entity
, O
it B-Entity
calls O
NDIS O
by O
invoking B-Action
a B-Entity
data I-Entity
receive I-Entity
indication I-Entity
function I-Entity
NdisMIndicateReceiveNetBufferLists I-Entity
( I-Entity
) I-Entity
. O
 
When O
that O
happens O
, O
NDIS B-Entity
invokes B-Action
Snake B-Entity
's I-Entity
hook I-Entity
function I-Entity
( O
ProtocolReceiveNetBufferLists O
) O
to O
process O
the O
received O
data O
. O
 
To O
send B-Action
the B-Entity
data I-Entity
back O
, O
the B-Entity
protocol I-Entity
driver I-Entity
defines B-Action
the B-Entity
data I-Entity
in B-Modifier
a B-Entity
list I-Entity
of I-Entity
NETBUFFERLIST I-Entity
structures I-Entity
, O
and O
then O
passes O
them O
to O
NDIS O
by O
calling B-Action
NdisSendNetBufferLists B-Entity
( I-Entity
) I-Entity
. O
 
NDIS B-Entity
, O
in O
turn O
, O
calls B-Action
the B-Entity
miniport I-Entity
driver's I-Entity
MiniportSendNetBufferLists I-Entity
( I-Entity
) I-Entity
function I-Entity
to O
forward O
the O
data O
to O
an O
underlying O
miniport O
driver O
. O
 
Being O
able O
to O
fully O
manipulate B-Action
traffic B-Entity
at B-Modifier
3 B-Entity
different I-Entity
levels I-Entity
( I-Entity
NDIS I-Entity
protocol I-Entity
driver I-Entity
, I-Entity
TDI I-Entity
Driver I-Entity
, I-Entity
and I-Entity
WPF I-Entity
callout I-Entity
driver I-Entity
) I-Entity
, O
Snake B-Entity
is O
able O
to O
'inject B-Action
' I-Action
the B-Entity
traffic I-Entity
into B-Modifier
existing B-Entity
communications I-Entity
to O
reach B-Action
out I-Action
to B-Modifier
external B-Entity
components I-Entity
, O
and O
at O
the O
same O
time O
parse B-Action
all B-Entity
incoming I-Entity
traffic I-Entity
to O
detect B-Action
traffic B-Entity
addressed I-Entity
to I-Entity
itself I-Entity
: O
As O
the B-Entity
driver I-Entity
intercepts B-Action
all B-Entity
connections I-Entity
( O
e.g O
. O
 
on O
TDIRECEIVE O
TDI O
event O
or O
ClientEventReceive O
( O
) O
event O
notification O
triggered O
through O
its O
TDI O
Filter O
Driver O
) O
, O
it B-Entity
parses B-Action
all B-Entity
incoming I-Entity
HTTP I-Entity
and I-Entity
SMTP I-Entity
traffic I-Entity
to O
see O
if O
it B-Entity
can O
be B-Action
authenticated I-Action
as B-Modifier
Snake B-Entity
traffic I-Entity
. O
 
The B-Entity
authentication I-Entity
is B-Action
implemented I-Action
by O
decrypting B-Action
the B-Entity
data I-Entity
and O
making B-Action
sure I-Action
it B-Entity
starts I-Entity
with I-Entity
the I-Entity
markers I-Entity
0xDEADBEAF I-Entity
and I-Entity
0xC001BA5E I-Entity
( I-Entity
which I-Entity
appear I-Entity
to I-Entity
derive I-Entity
from I-Entity
'DEAD I-Entity
BEEF I-Entity
' I-Entity
and I-Entity
'COOL I-Entity
BASE I-Entity
' I-Entity
) I-Entity
. O
 
Here O
are O
specific O
steps O
: O
By O
observing O
such O
behaviour O
, O
one O
might O
wonder O
why O
the O
driver O
is O
expecting O
HTTP O
or O
SMTP O
clients O
? O
Why O
does O
it O
act O
like O
HTTP/SMTP O
server O
processing O
client O
traffic O
, O
and O
serving O
back O
normal O
responses O
as O
per O
the O
protocol O
? O
For O
example O
, O
in O
HTTP O
the B-Entity
driver I-Entity
will O
respond B-Action
with B-Modifier
messages B-Entity
like I-Entity
'' I-Entity
HTTP/1.1 I-Entity
200 I-Entity
OK I-Entity
'' I-Entity
or I-Entity
'' I-Entity
HTTP/1.1 I-Entity
500 I-Entity
Server I-Entity
Error I-Entity
'' I-Entity
. O
 
For O
SMTP O
traffic O
, O
it O
communicates O
back O
normal O
SMTP O
server O
responses O
, O
such O
as O
'' O
250 O
Sender O
OK O
'' O
, O
'' O
503 O
Bad O
sequence O
of O
commands O
'' O
, O
etc O
. O
 
The O
reason O
behind O
such O
behaviour O
is O
that O
the B-Entity
driver I-Entity
is B-Action
acting I-Action
in B-Modifier
this B-Entity
mode I-Entity
like B-Modifier
a B-Entity
proxy I-Entity
, O
routing B-Action
requests B-Entity
from I-Entity
other I-Entity
infected I-Entity
hosts I-Entity
to B-Modifier
a B-Entity
remote I-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
. O
 
Another O
opportunity O
this O
mode O
unlocks O
is O
a O
peer-to-peer O
network O
mode O
with O
no O
centralised O
C O
& O
C O
. O
 
The O
infected O
hosts O
are O
capable O
of O
transferring O
the O
following O
peer-2-peer O
commands O
defining O
fragment O
size O
, O
reliability O
parameters O
, O
new O
peer O
information O
, O
peer O
impersonation O
flags O
, O
etc O
. O
 
: O
Once O
the B-Entity
incoming I-Entity
data I-Entity
is B-Action
authenticated I-Action
and I-Action
decrypted I-Action
, O
the O
driver O
passes O
it O
to O
the O
DLL O
by O
using O
memory O
pipes O
. O
 
For O
example O
, O
on O
HTTP O
traffic O
arrival O
it B-Entity
may O
send B-Action
traffic B-Entity
data I-Entity
into B-Modifier
a B-Entity
memory I-Entity
pipe I-Entity
\Device\NamedPipe\isapihttp I-Entity
, O
and O
then O
, O
send B-Action
a B-Entity
received I-Entity
peer-2-peer I-Entity
command I-Entity
message I-Entity
writepeernfo= I-Entity
[ I-Entity
IPADDRESS I-Entity
: I-Entity
PORT I-Entity
] I-Entity
0fragnoscrambling=Y0 I-Entity
into B-Modifier
another B-Entity
memory I-Entity
pipe I-Entity
called I-Entity
\Device\NamedPipe\isapidg I-Entity
. O
 
In O
order O
to O
log B-Action
its B-Entity
activity I-Entity
, O
the B-Entity
driver I-Entity
writes B-Action
log B-Entity
data I-Entity
into B-Modifier
the B-Entity
pipe I-Entity
\Device\NamedPipe\isapilog I-Entity
, O
so O
that O
the B-Entity
DLL I-Entity
could O
log B-Action
the B-Entity
data I-Entity
into B-Modifier
the B-Entity
log I-Entity
files I-Entity
. O
 
Full O
list O
of O
the B-Entity
named I-Entity
pipes I-Entity
used B-Action
for B-Modifier
communications B-Entity
is O
provided O
below O
: O
Messages B-Entity
submitted B-Action
into B-Modifier
the B-Entity
pipes I-Entity
are O
wrapped O
into O
the O
structures O
. O
 
The O
structures O
appear O
to O
contain O
headers O
to O
allow O
the B-Entity
pipe I-Entity
server I-Entity
, O
that O
runs O
within O
an O
infected O
userland O
module O
, O
to O
identify B-Action
the B-Entity
messages I-Entity
first O
and O
then O
unwrap O
the O
structures O
accordingly O
. O
 
For O
example O
, O
the O
message O
headers O
could O
be O
: O
Once O
received B-Action
from B-Modifier
the B-Entity
pipes I-Entity
and O
unwrapped/decoded O
, O
the B-Entity
data I-Entity
is O
then O
handled O
by O
the O
usermode O
DLL O
as O
per O
the O
data O
intention O
- O
whether O
it O
's O
a O
traffic O
sniffing O
task O
, O
a O
peer-2-peer O
client O
logic O
, O
a O
logging O
task O
, O
or O
a O
task O
of O
saving O
received O
files O
into O
the O
virtual O
volumes O
. O
 
The B-Entity
driver I-Entity
creates B-Action
virtual B-Entity
file I-Entity
volumes I-Entity
for B-Modifier
encrypted B-Entity
storage I-Entity
of I-Entity
its I-Entity
files I-Entity
and I-Entity
configuration I-Entity
data I-Entity
: O
The B-Entity
volumes I-Entity
are B-Action
mounted I-Action
from B-Modifier
the B-Entity
virtual I-Entity
file I-Entity
systems I-Entity
RawDisk1 I-Entity
and I-Entity
RawDisk2 I-Entity
. O
 
The B-Entity
first I-Entity
partition I-Entity
is B-Action
created I-Action
with B-Modifier
the B-Entity
following I-Entity
steps I-Entity
: O
The B-Entity
hook I-Entity
installed B-Action
by O
the B-Entity
rootkit I-Entity
on B-Modifier
IofCallDriver B-Entity
( I-Entity
) I-Entity
API I-Entity
provides B-Action
on-the-fly B-Entity
data I-Entity
encryption/decryption I-Entity
whenever O
that B-Entity
data I-Entity
is B-Action
written I-Action
to B-Modifier
or O
read B-Action
from B-Modifier
the B-Entity
volume I-Entity
. O
 
The B-Entity
encryption I-Entity
algorithm I-Entity
is B-Action
based I-Action
on B-Modifier
CAST-128 B-Entity
, O
with B-Modifier
the B-Entity
hard-coded I-Entity
key I-Entity
stored I-Entity
in I-Entity
the I-Entity
rootkit I-Entity
body I-Entity
. O
 
As O
a O
result O
, O
whenever O
the B-Entity
data I-Entity
is B-Action
saved I-Action
into B-Modifier
the B-Entity
volume I-Entity
Hd1 I-Entity
, O
it B-Entity
will O
be B-Action
scrambled I-Action
on-the-fly B-Entity
, O
and O
reflected B-Action
in B-Entity
the I-Entity
persistent I-Entity
storage I-Entity
file I-Entity
hotfix.dat I-Entity
, O
which O
is O
physically O
located O
within O
the O
rootkit O
's O
'home O
' O
directory O
: O
Analysis O
of O
the O
hotfix.dat O
file O
contents O
reveals O
it B-Entity
's B-Action
a B-Entity
fully I-Entity
encrypted I-Entity
file I-Entity
with I-Entity
flat I-Entity
entropy I-Entity
. O
 
Thus O
, O
it O
is O
not O
possible O
to O
reveal O
the O
contents O
of O
the O
Snake O
's O
volume O
by O
accessing O
the O
contents O
of O
this O
file O
( O
unless O
the O
encryption O
is O
broken O
, O
that O
is O
) O
. O
 
Enlisting O
the O
contents O
of O
the O
created O
volume O
is O
possible O
, O
along O
with O
creating O
files O
on O
it O
: O
However O
, O
as O
soon O
as O
IofCallDriver O
( O
) O
hook O
is O
removed O
, O
the O
same O
'dir O
' O
command O
will O
fail O
, O
as O
with O
no O
hook O
the O
rootkit O
can O
not O
decrypt O
the O
scrambled O
volume O
: O
The O
second O
volume O
\\.\Hd2 O
is O
not O
mapped O
to O
a O
file O
, O
so O
when O
a O
computer O
is O
switched O
off O
, O
its O
contents O
is O
lost O
. O
 
Thus O
, O
it O
could O
be O
used O
as O
a O
temporary O
or O
a O
cache O
storage O
. O
 
The B-Entity
data I-Entity
stored I-Entity
in I-Entity
\\.\Hd2 I-Entity
is B-Action
encrypted I-Action
the B-Entity
same I-Entity
way I-Entity
the I-Entity
first I-Entity
volume I-Entity
's I-Entity
data I-Entity
. O
 
Both B-Entity
volumes I-Entity
appear O
to O
be B-Action
set I-Action
up I-Action
as B-Modifier
FAT B-Entity
volumes I-Entity
. O
 
An O
attempt O
to O
read O
the O
data O
from O
these O
volumes O
with O
the O
code O
below O
: O
This O
will O
produce O
the O
following O
results O
: O
For O
\\.\Hd1 O
: O
For O
\\.\Hd2 O
: O
The O
ability O
to O
keep B-Action
its B-Entity
data I-Entity
on B-Modifier
TrueCrypt-like B-Entity
volumes I-Entity
provides O
Snake B-Entity
with O
a O
powerful O
ability O
to O
exchange O
data O
with O
the O
usermode O
DLL O
, O
as O
these O
volumes O
are O
accessible O
both O
from O
usermode O
and O
kernel O
mode O
. O
 
Static O
analysis O
of O
the O
code O
reveals O
that O
the B-Entity
Snake I-Entity
driver I-Entity
uses B-Action
virtual B-Entity
volumes I-Entity
to O
store B-Action
its B-Entity
data I-Entity
and I-Entity
additional I-Entity
files I-Entity
on B-Modifier
it B-Entity
. O
 
For O
example O
, O
it B-Entity
stores B-Action
its B-Entity
message I-Entity
queue I-Entity
in B-Modifier
a B-Entity
file I-Entity
called I-Entity
: O
The O
message O
queue O
indicates O
an O
asynchronous O
communication O
model O
between O
kernel O
mode O
driver O
and O
a O
usermode O
DLL O
, O
e.g O
. O
 
to O
pass O
commands O
, O
configuration O
parameters O
, O
binary O
images O
of O
additional O
Snake O
components O
. O
 
Other O
files O
that O
may O
also O
be O
found O
on O
the O
virtual O
volume O
are O
: O
klog O
, O
conlog O
, O
dump O
, O
rknginst.exe O
, O
where O
rknginst.exe O
could O
be O
the O
name O
of O
the O
original O
dropper O
, O
and O
other B-Entity
log I-Entity
files I-Entity
could O
potentially O
contain B-Action
executed B-Entity
command I-Entity
outputs I-Entity
, O
intercepted B-Action
keystrokes B-Entity
, O
and O
other O
output O
logs O
. O
 
The O
64-bit O
version O
of O
Snake O
must O
deal O
with O
a O
number O
of O
additional O
security O
protections O
implemented O
in O
64-bit O
editions O
of O
Microsoft O
Windows O
, O
the O
most O
significant O
of O
which O
are O
kernel O
driver O
signature O
validation O
and O
Kernel O
Patch O
Protection O
( O
more O
commonly O
known O
as O
PatchGuard O
) O
. O
 
PatchGuard O
is O
a O
feature O
of O
64-bit O
Windows O
which O
aims O
to O
prevent O
modification O
of O
the O
Windows O
kernel O
, O
something O
that O
is O
often O
performed O
by O
malware O
attempting O
to O
hide O
itself O
on O
an O
infected O
system O
. O
 
Although O
PatchGuard O
is O
successful O
at O
preventing O
kernel O
patching O
once O
initialised O
, O
several O
published O
bypass O
approaches O
exist O
, O
. O
 
The O
technique O
used O
by O
Snake O
appears O
to O
be O
similar O
to O
these O
approaches O
. O
 
The O
driver O
signing O
policy O
enforced O
by O
all O
64-bit O
versions O
of O
Windows O
from O
Vista O
onwards O
requires O
all O
kernel-mode O
drivers O
to O
be O
signed O
with O
a O
valid O
digital O
signature O
. O
 
The O
Snake O
dropper O
contains O
both O
32-bit O
and O
64-bit O
unsigned O
drivers O
, O
and O
it B-Entity
can O
successfully O
load B-Action
its B-Entity
unsigned I-Entity
64-bit I-Entity
driver I-Entity
on B-Modifier
a B-Entity
64-bit I-Entity
version I-Entity
of I-Entity
Windows I-Entity
XP I-Entity
– O
as O
driver O
signing O
is O
not O
enforced O
it O
does O
not O
have O
to O
resort O
to O
any O
tricks O
under O
this O
OS O
version O
. O
 
In O
this O
case O
, O
in O
order O
to O
ensure B-Action
the B-Entity
driver I-Entity
is I-Entity
loaded I-Entity
automatically I-Entity
at I-Entity
startup I-Entity
, O
the B-Entity
dropper I-Entity
can O
install B-Action
the B-Entity
64-bit I-Entity
driver I-Entity
on B-Modifier
64-bit B-Entity
Windows I-Entity
XP I-Entity
in O
the O
same O
way O
it B-Entity
installs B-Action
a B-Entity
32-bit I-Entity
driver I-Entity
on B-Modifier
a B-Entity
32-bit I-Entity
version I-Entity
of I-Entity
Windows I-Entity
XP I-Entity
. O
 
On B-Modifier
64-bit B-Entity
versions I-Entity
of I-Entity
Windows I-Entity
Vista I-Entity
and I-Entity
above I-Entity
it B-Entity
behaves B-Action
differently B-Entity
. O
 
Firstly O
, O
the B-Entity
64-bit I-Entity
unsigned I-Entity
driver I-Entity
file I-Entity
is B-Action
created I-Action
as O
usual O
: O
However O
, O
the O
driver O
is O
not O
registered O
; O
what O
is B-Action
registered I-Action
instead O
is O
the B-Entity
dropper I-Entity
itself I-Entity
. O
 
To O
do O
that O
, O
the B-Entity
dropper I-Entity
first O
copies B-Action
itself B-Entity
as O
: O
The B-Entity
dropper I-Entity
then O
registers B-Action
itself B-Entity
as B-Modifier
a B-Entity
service I-Entity
to O
ensure B-Action
it B-Entity
starts I-Entity
every I-Entity
time I-Entity
Windows I-Entity
is I-Entity
booted I-Entity
, O
by O
creating O
the O
values O
: O
Now O
comes O
the O
most O
interesting O
part O
: O
does O
the O
dropper O
manage O
to O
load O
its O
64-bit O
unsigned O
driver O
under O
64-bit O
versions O
of O
Windows O
Vista O
and O
later O
versions O
, O
such O
as O
64-bit O
Windows O
7/8 O
? O
The O
answer O
: O
Yes O
, O
it O
does O
. O
 
Does O
it O
resort O
to O
using O
bootkit O
technology O
, O
which O
has O
been O
used O
in O
the O
past O
to O
bypass O
protections O
to O
load O
unsigned O
64-bit O
drivers O
? O
The O
answer O
: O
No O
. O
 
Bootkits O
must O
overwrite O
the O
Master O
Boot O
Record O
( O
MBR O
) O
and O
antivirus O
products O
are O
well O
trained O
to O
catch O
that O
kind O
of O
bad O
behavior O
. O
 
The O
masterminds O
behind O
Snake O
rootkit O
seem O
to O
be O
well O
aware O
of O
this O
so O
what O
they O
resorted O
to O
instead O
is O
leveraging O
a O
vulnerability O
in O
a O
well-known O
virtualization O
product O
called O
VirtualBox O
, O
a O
product O
made O
by O
Oracle O
which O
is O
widely O
used O
by O
researchers O
to O
analyse O
malware O
. O
 
VirtualBox O
driver O
version O
1.6.2 O
was O
released O
in O
June O
2 O
, O
2008 O
. O
 
Two O
months O
later O
, O
in O
August O
2008 O
, O
security O
researchers O
reported O
that O
its O
main O
driver O
component O
, O
which O
is O
signed O
under O
the O
entity O
'' O
innotek O
Gmbh O
'' O
, O
contained O
a O
privilege O
escalation O
vulnerability O
. O
 
In O
a O
nutshell O
, O
the O
VirtualBox O
software O
installs O
a O
driver O
called O
VBoxDrv O
. O
 
The O
driver O
is O
controlled O
with O
the O
Input/Ouput O
Control O
Codes O
( O
32-bit O
values O
called O
IOCTL O
) O
passed O
along O
DeviceIoControl O
( O
) O
API O
. O
 
One O
of O
the O
documented O
transfer O
methods O
that O
the O
system O
uses O
to O
pass O
data O
between O
the O
caller O
of O
DeviceIoControl O
( O
) O
API O
and O
the O
driver O
itself O
is O
called O
METHODNEITHER O
. O
 
As O
per O
MSDN O
documentation O
, O
METHODNEITHER O
is O
a O
special O
transfer O
type O
when O
Input/Output O
Request O
Packet O
( O
IRP O
) O
supplies O
the O
user-mode O
virtual O
addresses O
of O
the O
input O
and O
output O
buffers O
, O
without O
validating O
or O
mapping O
them O
. O
 
It O
is O
the O
responsibility O
of O
the O
driver O
to O
validate O
the O
addresses O
sent O
from O
user O
mode O
in O
order O
to O
make O
sure O
those O
addresses O
are O
valid O
usermode O
addresses O
. O
 
The O
source O
code O
of O
the O
vulnerable O
driver O
( O
shown O
below O
) O
demonstrates O
how O
the O
integer O
value O
of O
the O
rc O
variable O
is O
first O
derived O
from O
the O
input O
parameters O
pDevObj O
( O
device O
object O
) O
and O
pIrp O
( O
request O
packet O
) O
. O
 
Next O
, O
that O
integer O
value O
is O
written O
into O
the O
UserBuffer O
- O
an O
arbitrary O
address O
, O
pointed O
by O
the O
input O
parameter O
pIrp O
( O
request O
packet O
) O
. O
 
As O
there O
are O
no O
validations O
made O
for O
the O
UserBuffer O
an B-Entity
attacker I-Entity
can O
craft B-Action
such B-Entity
input I-Entity
parameters I-Entity
that I-Entity
will I-Entity
define I-Entity
address I-Entity
within I-Entity
kernel I-Entity
memory I-Entity
to I-Entity
patch I-Entity
and I-Entity
the I-Entity
data I-Entity
to I-Entity
patch I-Entity
it I-Entity
with O
: O
Now O
that O
the B-Entity
vulnerable I-Entity
driver I-Entity
can O
be B-Action
used I-Action
as B-Modifier
a B-Entity
weapon I-Entity
to I-Entity
patch I-Entity
kernel I-Entity
memory I-Entity
, O
all O
the O
malware O
needs O
to O
do O
is O
to O
patch O
the O
content O
of O
the O
variable O
nt O
! O
gCiEnabled O
, O
a O
boolean O
variable O
'' O
Code O
Integrity O
Enabled O
'' O
that O
marks O
whether O
the O
system O
was O
booted O
in O
WinPE O
mode O
. O
 
When O
running O
in O
WinPE O
mode O
there O
is O
no O
Code O
Integrity O
control O
, O
therefore O
by O
enabling O
this O
mode O
by O
patching O
only O
one O
bit O
, O
Code B-Entity
Integrity I-Entity
verification I-Entity
is B-Action
disabled I-Action
so O
that O
the B-Entity
unsigned I-Entity
64-bit I-Entity
driver I-Entity
can O
be B-Action
loaded I-Action
. O
 
This O
variable O
is O
used O
within O
the O
function O
SepInitializeCodeIntegrity O
( O
) O
, O
implemented O
within O
CI.dll O
's O
function O
CiInitialize O
( O
) O
and O
imported O
by O
the O
NT O
core O
( O
ntoskrnl.exe O
) O
. O
 
In O
order O
to O
find O
the O
variable O
in O
kernel O
memory O
, O
the B-Entity
Snake I-Entity
dropper I-Entity
loads B-Action
a B-Entity
copy I-Entity
of I-Entity
the I-Entity
NT I-Entity
core I-Entity
image I-Entity
( I-Entity
ntoskrnl.exe I-Entity
) I-Entity
, O
locates B-Action
the B-Entity
import I-Entity
of I-Entity
CI.dll I-Entity
's I-Entity
function I-Entity
CiInitialize I-Entity
( I-Entity
) I-Entity
, O
and O
then O
SepInitializeCodeIntegrity B-Entity
( I-Entity
) I-Entity
within I-Entity
it I-Entity
. O
 
Then O
it B-Entity
parses B-Action
the B-Entity
function I-Entity
's I-Entity
code I-Entity
to B-Modifier
locate B-Entity
the I-Entity
offset I-Entity
of I-Entity
the I-Entity
variable I-Entity
. O
 
Once O
located O
, O
the O
content O
of O
the O
variable O
nt O
! O
gCiEnabled O
is O
patched O
in O
kernel O
memory O
and O
the B-Entity
64-bit I-Entity
unsigned I-Entity
driver I-Entity
is B-Action
loaded I-Action
. O
 
This O
explains O
why O
Snake B-Entity
dropper I-Entity
registers B-Action
itself B-Entity
as B-Modifier
a B-Entity
service I-Entity
to O
start B-Action
each B-Entity
time I-Entity
Windows I-Entity
starts I-Entity
: O
in O
order O
to O
install B-Action
the B-Entity
vulnerable I-Entity
VBox I-Entity
driver I-Entity
first O
, O
then O
pass O
it O
a O
malformed O
structure O
to O
disable B-Action
Code B-Entity
Integrity I-Entity
control I-Entity
with B-Modifier
a B-Entity
DeviceIoControl I-Entity
( I-Entity
) I-Entity
API I-Entity
call I-Entity
, O
and O
finally O
, O
load B-Action
the B-Entity
driver I-Entity
. O
 
In O
order O
to O
be O
able O
to O
perform O
the O
steps O
above O
, O
the B-Entity
dropper I-Entity
must O
first O
obtain B-Action
Administrator B-Entity
privileges I-Entity
. O
 
It B-Entity
attempts O
to O
do O
this O
by O
running B-Action
MS09-025 B-Entity
and I-Entity
MS10-015 I-Entity
exploits I-Entity
on B-Modifier
the B-Entity
target I-Entity
system I-Entity
. O
 
These O
exploits O
are O
bundled O
within O
the O
dropper O
in O
its O
resource O
section O
as O
executable O
files O
. O
 
Other O
resources O
embedded O
within O
the O
dropper O
are O
the O
32-bit O
and O
64-bit O
builds O
of O
its O
driver O
, O
a B-Entity
tool I-Entity
for O
creating B-Action
NTFS B-Entity
file I-Entity
systems I-Entity
, O
and O
the B-Entity
initial I-Entity
message I-Entity
queue I-Entity
file I-Entity
which O
is B-Action
written I-Action
into B-Modifier
the B-Entity
virtual I-Entity
volume I-Entity
. O
 
The O
message O
queue O
file O
contains O
configuration O
data O
and O
the O
libraries B-Entity
that O
will O
be B-Action
injected I-Action
into B-Modifier
usermode B-Entity
processes I-Entity
. O
 
The B-Entity
usermode I-Entity
DLLs I-Entity
injected B-Action
by O
the B-Entity
kernel-mode I-Entity
driver I-Entity
into B-Modifier
the B-Entity
userland I-Entity
system I-Entity
process I-Entity
( O
e.g O
. O
 
explorer.exe O
) O
are O
: O
The B-Entity
rkctlWin32.dll/rkctlx64.dll I-Entity
module I-Entity
uses B-Action
the B-Entity
following I-Entity
hard-coded I-Entity
named I-Entity
pipe I-Entity
for B-Modifier
communications B-Entity
: O
The B-Entity
remote I-Entity
commands I-Entity
it B-Entity
receives B-Action
appear O
to O
be O
designed O
to O
control B-Action
other B-Entity
components I-Entity
of I-Entity
Snake I-Entity
: O
The O
injsnakeWin32.dll/injsnakex64.dll O
module O
exports O
61 O
functions O
. O
 
It O
is O
designed O
to O
perform O
the O
high-level O
tasks O
such O
as O
: O
When O
the B-Entity
DLL I-Entity
activates B-Action
, O
it B-Entity
reads B-Action
configuration B-Entity
parameters I-Entity
from B-Modifier
the B-Entity
configuration I-Entity
queue I-Entity
, O
that O
the B-Entity
driver I-Entity
creates B-Action
on B-Modifier
a B-Entity
virtual I-Entity
volume I-Entity
. O
 
One O
of O
the O
parameters O
defines O
the B-Entity
pipe I-Entity
name I-Entity
( I-Entity
s I-Entity
) I-Entity
that O
the B-Entity
DLL I-Entity
should O
use B-Action
for B-Modifier
its B-Entity
communications I-Entity
. O
 
The B-Entity
remote I-Entity
commands I-Entity
received B-Action
by O
this B-Entity
Snake I-Entity
DLL I-Entity
module I-Entity
are O
designed O
to O
set O
up O
various O
communication O
parameters O
: O
To O
post B-Action
the B-Entity
data I-Entity
, O
the B-Entity
DLL I-Entity
can O
use O
the O
following O
User-Agent O
string O
'' O
Mozilla/4.0 O
( O
compatible O
; O
MSIE O
6.0 O
) O
'' O
. O
 
It B-Entity
may O
rely B-Action
on I-Action
the B-Entity
following I-Entity
Internet I-Entity
Media I-Entity
types I-Entity
( I-Entity
MIME I-Entity
types I-Entity
) I-Entity
for B-Modifier
data B-Entity
exfiltration I-Entity
: O
Request B-Entity
type I-Entity
it B-Entity
uses B-Action
can O
either O
be B-Action
POST B-Entity
of O
GET B-Entity
, O
and O
C B-Entity
& I-Entity
C I-Entity
server I-Entity
resource I-Entity
name I-Entity
is B-Action
/default.asp B-Entity
. O
 
One B-Entity
of I-Entity
the I-Entity
Snake I-Entity
components I-Entity
that O
could O
have O
been B-Action
downloaded I-Action
from B-Modifier
a B-Entity
remote I-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
, O
was B-Action
identified I-Action
as B-Modifier
a B-Entity
network I-Entity
reconnaissance I-Entity
tool I-Entity
. O
 
When B-Modifier
run B-Entity
as I-Entity
a I-Entity
command I-Entity
line I-Entity
tool I-Entity
, O
with O
its O
logic O
defined O
with O
the O
command O
line O
switches O
, O
this B-Entity
tool I-Entity
enumerates B-Action
other B-Entity
network I-Entity
hosts I-Entity
and O
detects B-Action
what B-Entity
Windows I-Entity
RPC I-Entity
services I-Entity
are I-Entity
enabled I-Entity
at I-Entity
the I-Entity
endpoints I-Entity
. O
 
It O
carries O
a B-Entity
list I-Entity
of I-Entity
interface I-Entity
identifiers I-Entity
associated B-Action
with B-Modifier
the B-Entity
named I-Entity
pipes I-Entity
. O
 
It B-Entity
then O
uses O
these O
identifiers O
to O
write B-Action
a B-Entity
message I-Entity
to B-Modifier
and O
read B-Action
a B-Entity
message I-Entity
from B-Modifier
the B-Entity
associated I-Entity
named I-Entity
pipes I-Entity
. O
 
By O
knowing O
what O
RPC O
services O
are O
running O
, O
it B-Entity
can O
successfully O
fingerprint B-Action
all B-Entity
network I-Entity
hosts I-Entity
by B-Modifier
mimicking B-Entity
the I-Entity
Metasploit I-Entity
's I-Entity
logic I-Entity
of I-Entity
OS I-Entity
fingerprinting I-Entity
via I-Entity
SMB I-Entity
. O
 
The O
fingerprinting O
allows O
it B-Entity
to O
reveal B-Action
the B-Entity
following I-Entity
characteristics I-Entity
for B-Modifier
each B-Entity
host I-Entity
found I-Entity
in I-Entity
the I-Entity
network I-Entity
: O
The B-Entity
data I-Entity
it O
retrieves O
is B-Action
encrypted I-Action
and O
saved B-Action
into B-Modifier
a B-Entity
configuration I-Entity
file I-Entity
% I-Entity
system I-Entity
% I-Entity
\vtmon.bin I-Entity
. O
 
This B-Entity
file I-Entity
is B-Action
then I-Action
further I-Action
encrypted I-Action
with B-Modifier
an B-Entity
NTL-based I-Entity
( I-Entity
Number I-Entity
Theory I-Entity
Library I-Entity
) I-Entity
algorithm I-Entity
and O
is B-Action
uploaded I-Action
by B-Modifier
the B-Entity
usermode-centric I-Entity
Snake I-Entity
rootkit I-Entity
to B-Modifier
the B-Entity
C I-Entity
& I-Entity
C I-Entity
server I-Entity
, O
along B-Modifier
with I-Modifier
other B-Entity
configuration I-Entity
files I-Entity
, I-Entity
such I-Entity
as I-Entity
mtmon.sdb I-Entity
, I-Entity
mtmon32.sdb I-Entity
, I-Entity
gstatsnd.bin I-Entity
, I-Entity
gstat.bin I-Entity
, I-Entity
gstat32.bin I-Entity
, I-Entity
and I-Entity
other I-Entity
log I-Entity
files I-Entity
found I-Entity
in I-Entity
the I-Entity
% I-Entity
windows I-Entity
% I-Entity
\ I-Entity
$ I-Entity
NtUninstallQ I-Entity
[ I-Entity
random I-Entity
] I-Entity
$ I-Entity
directory I-Entity
. O
 
By O
using O
this O
function O
the B-Entity
remote I-Entity
attacker I-Entity
can O
identify B-Action
any B-Entity
potentially I-Entity
exploitable I-Entity
hosts I-Entity
located I-Entity
in I-Entity
the I-Entity
same I-Entity
network I-Entity
as I-Entity
the I-Entity
victim I-Entity
. O
 
The B-Entity
attacker I-Entity
may O
then O
craft O
an O
exploit O
against O
those O
hosts O
, O
possibly O
by O
using O
the O
Metasploit O
framework O
, O
and O
then O
deliver B-Action
the B-Entity
generated I-Entity
shellcode I-Entity
back B-Modifier
to I-Modifier
the B-Entity
reconnaissance I-Entity
tool I-Entity
to B-Modifier
be B-Entity
applied I-Entity
against I-Entity
the I-Entity
identified I-Entity
hosts I-Entity
by I-Entity
running I-Entity
the I-Entity
tool I-Entity
with I-Entity
the I-Entity
'expos I-Entity
' I-Entity
switch I-Entity
. O
 
If O
the B-Entity
tool I-Entity
successfully O
delivers B-Action
the B-Entity
payload I-Entity
and O
exploits B-Action
the B-Entity
remote I-Entity
host I-Entity
( I-Entity
s I-Entity
) I-Entity
, O
it B-Entity
will O
replicate B-Action
the B-Entity
infection I-Entity
across B-Modifier
the B-Entity
network I-Entity
, O
taking B-Action
control I-Action
over B-Modifier
new B-Entity
hosts I-Entity
, O
thus O
repeating B-Action
the B-Entity
infection I-Entity
cycle I-Entity
all B-Entity
over I-Entity
again I-Entity
and O
spreading B-Action
the B-Entity
infection I-Entity
further B-Entity
. O
 
Unlike O
traditional O
worm O
techniques O
, O
this O
process O
is O
rather O
manual O
, O
but O
its O
danger O
is O
in O
the O
fact O
that O
the B-Entity
attacker I-Entity
can O
flexibly O
craft O
new O
attack O
methods O
, O
adjusting B-Action
them B-Entity
to B-Modifier
the B-Entity
hosts I-Entity
present I-Entity
within I-Entity
the I-Entity
network I-Entity
, O
thus O
preying O
on O
the O
weakest O
( O
least O
updated O
, O
most O
vulnerable O
) O
victims O
along O
its O
path O
. O
 
As O
seen O
from O
the O
check-in O
logs O
found O
within O
one O
of O
the O
recent O
samples O
, O
the O
time O
span O
covers O
almost O
6 O
years O
from O
January O
2007 O
till O
December O
2012 O
, O
which O
is O
aligned O
with O
the O
first O
reports O
of O
Agent.BTZ O
. O
 
It O
's O
worth O
noting O
that O
Agent.BTZ B-Entity
used B-Action
the B-Entity
same I-Entity
XOR I-Entity
key I-Entity
for B-Modifier
its B-Entity
logs I-Entity
as O
the O
most O
recent O
variants O
: O
Log B-Entity
files I-Entity
created B-Action
by O
the B-Entity
latest I-Entity
samples I-Entity
of I-Entity
Snake I-Entity
, O
compiled O
in O
2013 O
and O
2014 O
, O
were O
successfully O
decrypted O
with O
the O
same O
XOR O
key O
. O
 
Other O
similarities O
include O
the O
usage O
of O
the O
virtual O
partition O
\\.\Vd1 O
, O
the O
temporary O
file O
named O
FA.tmp O
, O
usage O
of O
files O
named O
mswmpdat.tlb O
, O
wmcache.nld O
, O
winview.ocx O
. O
 
The O
cyber-espionage O
operation O
behind O
the O
Snake O
rootkit O
is O
well O
established O
, O
a O
sample O
comiled O
in O
January O
2006 O
indicates O
that O
the O
activity O
would O
have O
begun O
in O
at O
least O
2005 O
. O
 
It B-Entity
is O
also O
sophisticated O
, O
using B-Action
complex B-Entity
techniques I-Entity
for B-Modifier
evading B-Entity
host I-Entity
defences I-Entity
and O
providing B-Action
the B-Entity
attackers I-Entity
covert B-Entity
communication I-Entity
channels I-Entity
. O
 
Toolmarks O
left O
behind O
by O
the O
authors O
'vlad O
' O
& O
'gilg O
' O
, O
leave O
tantalizing O
clues O
as O
to O
the O
personas O
behind O
this O
. O
 
From O
a O
technical O
perspective O
, O
Snake O
demonstrates O
two O
very O
different O
approaches O
to O
the O
task O
of O
building O
a O
cyber-espionage O
toolkit O
. O
 
One O
approach O
is O
to O
delegate B-Action
the B-Entity
network I-Entity
communication I-Entity
engine I-Entity
to B-Modifier
usermode B-Entity
code I-Entity
, O
backed O
up O
by O
a O
usermode O
rootkit O
. O
 
Another O
approach O
is O
to O
carry B-Action
out I-Action
all B-Entity
of I-Entity
the I-Entity
communications I-Entity
from B-Modifier
the B-Entity
kernel-mode I-Entity
driver I-Entity
, O
which O
is O
a O
very O
challenging O
task O
by O
itself O
. O
 
The O
complexity O
of O
the O
usermode-centric O
approach O
is O
on O
par O
with O
Rustock O
rootkit O
- O
it O
uses O
similar O
techniques O
. O
 
It O
's O
an O
old O
well-polished O
technology O
that O
evolved O
over O
the O
years O
and O
demonstrated O
its O
resilience O
and O
survivability O
under O
the O
stress O
of O
security O
counter- O
measures O
. O
 
The O
complexity O
of O
the O
kernel-centric O
architecture O
of O
Snake O
is O
quite O
unique O
. O
 
This O
architecture O
is O
designed O
to O
grant O
Snake O
as O
much O
flexibility O
as O
possible O
. O
 
When B-Modifier
most B-Entity
of I-Entity
the I-Entity
infected I-Entity
hosts I-Entity
are I-Entity
cut I-Entity
off I-Entity
from I-Entity
the I-Entity
outside I-Entity
world I-Entity
, O
it B-Entity
only B-Action
needs I-Action
one B-Entity
host I-Entity
to I-Entity
be I-Entity
connected I-Entity
online I-Entity
. O
 
The B-Entity
traffic I-Entity
is B-Action
then I-Action
routed I-Action
through B-Modifier
that B-Entity
host I-Entity
to O
make B-Action
external B-Entity
control I-Entity
and O
data B-Entity
exfiltration I-Entity
still B-Entity
possible I-Entity
. O
 
The B-Entity
presence I-Entity
of I-Entity
the I-Entity
reconnaissance I-Entity
tool I-Entity
in I-Entity
the I-Entity
Snake I-Entity
operators I-Entity
' I-Entity
framework I-Entity
suggests B-Action
the B-Entity
existence I-Entity
of I-Entity
an I-Entity
arsenal I-Entity
of I-Entity
infiltration I-Entity
tools I-Entity
, O
designed O
to O
compromise B-Action
a B-Entity
system I-Entity
, O
then O
find O
a O
way O
to O
replicate B-Action
into B-Modifier
other B-Entity
hosts I-Entity
, O
infect B-Action
them B-Entity
, O
and O
spread B-Action
the B-Entity
infection I-Entity
even B-Entity
further I-Entity
. O
 
As O
demonstrated O
, O
the B-Entity
backdoor I-Entity
commands I-Entity
allow B-Action
Snake B-Entity
to O
provide B-Action
remote B-Entity
attackers I-Entity
with B-Modifier
full B-Entity
remote I-Entity
access I-Entity
to I-Entity
the I-Entity
compromised I-Entity
system I-Entity
. O
 
Its O
ability O
to O
hibernate B-Action
, O
staying B-Action
fully B-Entity
inactive I-Entity
for B-Modifier
a B-Entity
number I-Entity
of I-Entity
days I-Entity
, O
makes B-Action
its B-Entity
detection I-Entity
during I-Entity
that I-Entity
time I-Entity
very B-Entity
difficult I-Entity
. O
 
The O
analysed O
code O
suggests O
that O
even O
file O
system O
and O
registry O
operations O
can O
be O
delegated O
by O
an O
infected O
module O
to O
another O
module O
in O
order O
to O
stay B-Action
unnoticed B-Entity
by B-Modifier
behaviour B-Entity
analysis I-Entity
engines I-Entity
of I-Entity
the I-Entity
antivirus I-Entity
products I-Entity
, O
and O
to O
overcome B-Action
account B-Entity
restrictions I-Entity
of I-Entity
the I-Entity
browser I-Entity
processes I-Entity
so O
that O
the B-Entity
injected I-Entity
module I-Entity
could O
still O
write B-Action
into B-Modifier
files B-Entity
and O
into B-Modifier
the B-Entity
sensitive I-Entity
registry I-Entity
hives I-Entity
. O
 
The B-Entity
logs I-Entity
and I-Entity
dumps I-Entity
it B-Entity
creates B-Action
on B-Modifier
the B-Entity
hidden I-Entity
virtual I-Entity
volumes I-Entity
contributes O
to O
its O
stealthiness O
too O
. O
 
A O
great O
deal O
of O
attention O
has O
also O
been O
given O
to O
keep B-Action
its B-Entity
network I-Entity
communications I-Entity
as B-Entity
quiet I-Entity
as I-Entity
possible I-Entity
. O
 
Its O
ability O
to O
generate B-Action
malicious B-Entity
traffic I-Entity
whenever B-Modifier
the B-Entity
user I-Entity
goes I-Entity
online I-Entity
and I-Entity
start I-Entity
loading I-Entity
the I-Entity
web I-Entity
pages I-Entity
allows O
it B-Entity
to O
'blend B-Action
in I-Action
' I-Action
with B-Modifier
the B-Entity
legitimate I-Entity
communications I-Entity
. O
 
We O
expect O
much O
more O
will O
be O
uncovered O
by O
researchers O
in O
the O
coming O
weeks O
as O
the O
capabilities O
of O
this O
operation O
are O
further O
fleshed O
out O
. O
 
However O
, O
as O
we O
implied O
in O
the O
opening O
section O
, O
we O
view O
this O
threat O
to O
be O
a O
permanent O
feature O
of O
the O
landscape O
. O
 
Whether O
they O
dismantle O
this O
toolset O
and O
start O
from O
scratch O
, O
or O
continue O
using O
tools O
which O
have O
been O
exposed O
, O
remains O
to O
be O
seen O
. O
 
For O
their O
targets O
though O
the O
considerable O
challenge O
of O
keeping O
secrets O
safe O
on O
sensitive O
networks O
will O
certainly O
continue O
for O
years O
to O
come O
. O
 
